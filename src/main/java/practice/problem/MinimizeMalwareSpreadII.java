package practice.problem;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

// 928. Minimize Malware Spread II
public class MinimizeMalwareSpreadII {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        Arrays.sort(initial);
        Set<Integer> mal = new HashSet<>();
        for (int i : initial)
            mal.add(i);
        int max = -1, res = -1;
        for (int n : initial) {
            int save = 0;
            Set<Integer> visited = new HashSet<>();
            visited.add(n);
            for (int i = 0; i < graph.length; i++) {
                if (i != n && graph[n][i] == 1) {
                    int temp = dfs(i, visited, mal, graph);
                    if (temp < 0)
                        continue;
                    save += temp;
                }
            }
            if (save > max) {
                res = n;
                max = save;
            }
        }
        return res;
    }

    private int dfs(int n, Set<Integer> visited, Set<Integer> mal, int[][] graph) {
        if (visited.contains(n))
            return 0;
        if (mal.contains(n))
            return -1;
        visited.add(n);
        int res = 1;
        for (int i = 0; i < graph.length; i++) {
            if (i != n && graph[n][i] == 1) {
                int temp = dfs(i, visited, mal, graph);
                if (temp == -1) {
                    mal.add(n);
                    return -1;
                }
                res += temp;
            }
        }
        return res;
    }
}
