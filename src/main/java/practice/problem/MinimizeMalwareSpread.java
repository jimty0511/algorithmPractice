package practice.problem;

import java.util.Arrays;

// 924. Minimize Malware Spread
public class MinimizeMalwareSpread {

    class UnionFind {
        int[] parents;

        public UnionFind(int size) {
            parents = new int[size];
            for (int i = 0; i < size; i++)
                parents[i] = i;
        }

        public void union(int x, int y) {
            parents[find(x)] = parents[find(y)];
        }

        public int find(int x) {
            while (x != parents[x]) {
                parents[x] = parents[parents[x]];
                x = parents[x];
            }
            return x;
        }

    }

    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        UnionFind unionFind = new UnionFind(n);
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (graph[i][j] == 1)
                    unionFind.union(i, j);
            }
        }
        int[] ufSize = new int[n], malCount = new int[n];
        for (int i = 0; i < n; i++) {
            ufSize[unionFind.find(i)]++;
        }
        for (int init : initial) {
            malCount[unionFind.find(init)]++;
        }
        int res = -1;
        int maxSize = 0;
        Arrays.sort(initial);
        for (int init : initial) {
            int idx = unionFind.find(init);
            if (malCount[idx] == 1 && ufSize[idx] > maxSize) {
                maxSize = ufSize[idx];
                res = init;
            }
        }
        return maxSize == 0 ? initial[0] : res;
    }
}
