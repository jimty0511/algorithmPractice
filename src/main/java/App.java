import org.apache.spark.SparkConf;
import org.apache.spark.api.java.JavaRDD;
import org.apache.spark.api.java.JavaSparkContext;
import practice.AllPractices;
import practice.airbnb.*;
import practice.domain.*;
import practice.googleContest.ForegoneSolution;
import practice.googleContest.YouCanGoYourOwnWay;
import practice.lcdesign.ConsistentHashing;
import practice.lcdesign.DesignTwitter;
import practice.lcdesign.Geohash;
import practice.lcdesign.RateLimiter;
import practice.lintcode.*;
import practice.lintcode.RangeSumOfBST;
import practice.lintcode.ReverseOnlyLetters;
import practice.lintcode.ThirdMaximumNumber;
import practice.lintcode.WordSubsets;
import practice.problem.*;

import java.util.*;
import java.util.regex.Pattern;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {
//    public String getGreeting() {
//        return "Hello world.";
//    }

    public static Pattern SPACE_DELIMITER = Pattern.compile(" ");

    public static void main(String[] args) throws Exception {

        class ListMax {
            List<Integer> listMax;
            int n;

            public ListMax(int n) {
                this.n = n;
                this.listMax = new ArrayList<Integer>(this.n);
                //Initialize to default value of 0 for all n positions
                for (int i = 0; i < n; i++) {
                    this.listMax.add(0);
                }
            }

            public void doOperation(int a, int b, int k) {
                for (int i = a - 1; i < b; i++) {
                    int val = this.listMax.get(i);
                    val += k;
                    this.listMax.set(i, val);
                }
            }

            public int listMax() {
                Collections.sort(this.listMax);
                int size = this.listMax.size();
                return this.listMax.get(size - 1);
            }
        }


        AllPractices ap = new AllPractices();

//        System.out.println(new App().getGreeting());

//        int[] ints = new int[]{2, 2, 3, 4};
//        int[] res = findErrorNums(ints);

//        TreeNode treeNode1 = new TreeNode(1);
//        TreeNode treeNode2 = new TreeNode(2);
//        TreeNode treeNode3 = new TreeNode(-1);
//        TreeNode treeNode4 = new TreeNode(-1);
//        TreeNode treeNode5 = new TreeNode(2);
//
//        treeNode1.left = treeNode2;
//        treeNode1.right = treeNode3;
//        treeNode2.left = treeNode4;
//        treeNode3.right = treeNode5;

//        int n = pathSum(treeNode1, 2);

//        NumberOfOneBits numberOfOneBits = new NumberOfOneBits();
//        numberOfOneBits.hammingWeightTwo(7);

////        boolean res = isUgly(300);
//        int[] ints = new int[]{1, 12, -5, -6, 50, 3};
        int[] ints2 = new int[]{3, 2, 2, 3};
////        double res = findMaxAverage(ints, 4);

        MergeTwoLists mergeTwoLists = new MergeTwoLists();
        ListNode l1 = new ListNode(1);
        l1.next = new ListNode(3);
        l1.next.next = new ListNode(5);
        ListNode l2 = new ListNode(2);
        l2.next = new ListNode(4);
        l2.next.next = new ListNode(6);
//
//        ListNode l3 = mergeTwoLists.mergeTwoListsIter(l1, l2);
//        RemoveElement removeElement = new RemoveElement();
//        int length = removeElement.removeElement(ints2, 2);
//        int[] ints4 = new int[]{1, 3, 5, 6};
////        int[] plusOne = plusOne(ints4);
////        isPowerOfFour(16);
//
//        String[] list1 = {"Shogun", "Tapioca Express", "Burger King", "KFC"};
//        String[] list2 = {"KFC", "Shogun", "Burger King"};
////        String[] res = findRestaurant(list1, list2);
////        System.out.println(res);
//
//
//        int arr[] = {9, 2, 3, 4, 5, 6, 7, 8, 18, 0};
//        int n = arr.length;
////        int maxDiff = maxIndexDiffTwo(arr, n);
////        System.out.println(maxDiff);
//
//        String[] morseString = {"shogun", "tapioc", "burger", "kfc"};
////        System.out.println(uniqueMorseRepresentations(morseString));
//
////        System.out.println(selfDividingNumbers(9, 22));
//        String[] domains = {"900 google.mail.com", "50 yahoo.com", "1 intel.mail.com", "5 wiki.org"};
////        System.out.println(subdomainVisits(domains));
//
//        int[] widths = {4, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10};
//        String s = "bbbcccdddaaa";
////        System.out.println(numberOfLines(widths, s));
//
//        String[] points = {"5", "-2", "4", "C", "D", "9", "+", "+"};
////        System.out.println(calPoints(points));
//
        int[][] matrix = {{1, 2, 3, 4}, {5, 1, 2, 3}, {9, 5, 1, 2}};
//        ToeplitzMatrix toeplitzMatrix = new ToeplitzMatrix();
//        System.out.println(toeplitzMatrix.isToeplitzMatrix(matrix));

////        System.out.println(hasAlternatingBits(43));

//        CountBits countBits = new CountBits();
//        System.out.println(countBits.countBitsDp(7));

//        int[][] trianglePoints = {{0, 0}, {0, 1}, {1, 0}, {2, 0}, {0, 2}};
////        System.out.println(largestTriangleArea(trianglePoints));
//
//        int[][] oldMatrix = {{1, 2}, {3, 4}};
////        System.out.println(matrixReshape(oldMatrix, 1, 4));
//
//        CountPrimes countPrimes = new CountPrimes();
//        System.out.println(countPrimes.countPrimesTwo(100));

//        LetterCasePermutation letterCasePermutation = new LetterCasePermutation();
//        System.out.println(letterCasePermutation.letterCasePermutation("a1b2"));
//        int[][] flip = {{1, 1, 0}, {1, 0, 1}, {0, 0, 0}};
//
//        System.out.println(flipAndInvertImage(flip));

        Employee employee1 = new Employee();
        employee1.id = 1;
        employee1.importance = 5;
        employee1.subordinates = Arrays.asList(2, 3);

        Employee employee2 = new Employee();
        employee2.id = 2;
        employee2.importance = 3;
        employee2.subordinates = new ArrayList<>();

        Employee employee3 = new Employee();
        employee3.id = 3;
        employee3.importance = 3;
        employee3.subordinates = new ArrayList<>();

        List<Employee> employeeList = Arrays.asList(employee1, employee2, employee3);
        Stream<List<Employee>> listStream = Stream.of(employeeList);
//        System.out.println(ap.getImportance(employeeList, 1));

        List<String> a = Arrays.asList("a", "b", "c", "f");
        List<String> b = Arrays.asList("a", "b", "c", "d", "f");
        List<String> c = Arrays.asList("d", "e", "f", "g");

        List<List<String>> lists = new ArrayList<List<String>>();
        lists.add(a);
        lists.add(b);
        lists.add(c);
        List<String> collect = lists.stream().flatMap(x -> x.stream()).distinct().collect(Collectors.toList());
//        System.out.println("Common in A & B & C: " + ap.getCommonElements(lists));

        Map<String, List<Integer>> strIntMap = new HashMap<>();
        strIntMap.put("Jim", Arrays.asList(1, 2, 3));
        strIntMap.put("Qwe", Arrays.asList(1));
        strIntMap.put("Asd", Arrays.asList(2));
        strIntMap.put("Zxc", Arrays.asList(2, 3));
        strIntMap.put("Poi", Arrays.asList(1, 3));

        Staff jimInt = new Staff();
        jimInt.setName("Jim");
        jimInt.setIntegerList(Arrays.asList(1, 2, 3));

        Staff staff1Int = new Staff();
        staff1Int.setName("staff1");
        staff1Int.setIntegerList(Arrays.asList(3));

        Staff staff2Int = new Staff();
        staff2Int.setName("staff2");
        staff2Int.setIntegerList(Arrays.asList(2));

        Staff staff3Int = new Staff();
        staff3Int.setName("staff3");
        staff3Int.setIntegerList(Arrays.asList(2, 3));

        Staff jimStr = new Staff();
        jimStr.setName("Jim");
        jimStr.setStringList(Arrays.asList("one", "two", "three"));

        Staff staff1Str = new Staff();
        staff1Str.setName("staff1");
        staff1Str.setStringList(Arrays.asList("three"));

        Staff staff2Str = new Staff();
        staff2Str.setName("staff2");
        staff2Str.setStringList(Arrays.asList("two", "three"));

        Staff staff3Str = new Staff();
        staff3Str.setName("staff3");
        staff3Str.setStringList(Arrays.asList("two"));

        List<Staff> staffIntList = Arrays.asList(jimInt, staff1Int, staff2Int, staff3Int);
        List<Staff> staffStrList = Arrays.asList(jimStr, staff1Str, staff2Str, staff3Str);

        List<Staff> staffIntFinalList = staffIntList.stream().filter(staff -> staff.getIntegerList().size() > 1).collect(Collectors.toList());
        List<Staff> staffStrFinalList = staffStrList.stream().filter(staff -> staff.getStringList().size() > 1).collect(Collectors.toList());

        List<String> staffIntFinalListName = staffIntList.stream().filter(staff -> staff.getIntegerList().size() > 1).map(staff -> staff.getName()).collect(Collectors.toList());
        List<String> staffStrFinalListName = staffStrList.stream().filter(staff -> staff.getStringList().size() > 1).map(staff -> staff.getName()).collect(Collectors.toList());

        List<String> StaffMultiIntAndStr = staffIntFinalListName.stream().filter(staffStrFinalListName::contains).collect(Collectors.toList());

        List<Integer> intListForAllStaff = staffIntList.stream().flatMap(staff -> staff.getIntegerList().stream()).collect(Collectors.toList());

        List<String> ultimateStreamList = staffIntList.stream().filter(staff -> staff.getIntegerList().size() > 1).map(staff -> staff.getName())
                .filter(qwe -> staffStrList.stream().filter(staff -> staff.getStringList().size() > 1).map(staff -> staff.getName()).collect(Collectors.toList()).contains(qwe)
                ).collect(Collectors.toList());
        System.out.println(staffIntFinalList);

//        mergeSort(Arrays.asList(34, 3, 21, 6, 0, 32)).forEach(System.out::println);

//        int[][] island = {
//                {0, 0, 0, 0, 0},
//                {0, 1, 0, 1, 0},
//                {0, 1, 1, 1, 0},
//                {0, 0, 0, 1, 0},
//                {1, 1, 1, 0, 0}};

//        System.out.println(maxAreaOfIsland(island));
//
//        System.out.println(rotatedDigits(15));
//
        CountBinarySubstrings countBinarySubstrings = new CountBinarySubstrings();
        System.out.println(countBinarySubstrings.countBinarySubstrings("00110001111"));

        TreeNode node1 = new TreeNode(10);
        node1.left = new TreeNode(6);
        node1.right = new TreeNode(12);
        node1.left.left = new TreeNode(2);
        node1.left.right = new TreeNode(8);
        node1.right.right = new TreeNode(15);

//        System.out.println(findTarget(node1, 14));
//
//        ConstructStringFromBinaryTree constructStringFromBinaryTree = new ConstructStringFromBinaryTree();
//        System.out.println(constructStringFromBinaryTree.tree2strIterative(node1));
//
//        System.out.println(isOneBitCharacter(new int[]{1, 0, 1, 1, 1, 0}));

//        MostCommonWord mostCommonWord = new MostCommonWord();
//        mostCommonWord.mostCommonWordThree("Bob", new String[]{});
//
//        System.out.println(largeGroupPositions("abcdddeeeeaabbbcd"));

        node1.right.left = new TreeNode(11);

//        System.out.println(convertBST(node1));

//        System.out.println(maxCount(3, 3, new int[][]{{3, 3}, {2, 2}, {3, 1}}));
//
//        System.out.println(minMoves(new int[]{2, 1, 3}));
//
//        System.out.println(floodFill(new int[][]{{1, 1, 1}, {1, 1, 0}, {1, 0, 1}}, 1, 1, 2));
//
//        System.out.println(minDiffInBST(node1));
//
//        System.out.println(findShortestSubArray(new int[]{1, 2, 2, 3, 1, 2, 1}));
//
//        System.out.println(imageSmootherTwo(new int[][]{{9, 8, 7}, {6, 5, 4}, {3, 2, 1}}));
//
//        System.out.println(nextGreatestLetter(new char[]{'c', 'f', 'j'}, 'd'));
//
//        System.out.println(minCostClimbingStairs(new int[]{1, 100, 1, 1, 1, 100, 1, 1, 100, 1}));
//
//        LongestCommonPrefix longestCommonPrefix = new LongestCommonPrefix();
//        System.out.println(longestCommonPrefix.longestCommonPrefixBinarySearch(new String[]{"flower", "flow", "flight"}));
//
//        UglyNumberII uglyNumberII = new UglyNumberII();
//        System.out.println(uglyNumberII.nthUglyNumberDp(15));

//        SuperUglyNumber superUglyNumber = new SuperUglyNumber();
//        superUglyNumber.nthSuperUglyNumberThree(12, new int[]{2, 7, 13, 19});
//
//        System.out.println(findLengthOfLCIS(new int[]{1, 3, 5, 4, 6, 7, 8, 9}));

        TreeNode secondMin = new TreeNode(2);
        secondMin.left = new TreeNode(4);
        secondMin.left.left = new TreeNode(4);
        secondMin.left.right = new TreeNode(6);
        secondMin.right = new TreeNode(2);
        secondMin.right.left = new TreeNode(2);
        secondMin.right.right = new TreeNode(8);
        secondMin.right.left.left = new TreeNode(2);
        secondMin.right.left.right = new TreeNode(3);

//        SecondMinimumNodeInaBinaryTree secondMinimumNodeInaBinaryTree = new SecondMinimumNodeInaBinaryTree();
//        System.out.println(secondMinimumNodeInaBinaryTree.findSecondMinimumValue(secondMin));
//
//        System.out.println(findLHS(new int[]{1, 2, 2, 3, 1, 2, 1}));
//
//        BinaryTreePaths binaryTreePaths = new BinaryTreePaths();
//        binaryTreePaths.binaryTreePathsIter(node1);
//
//        System.out.println(dominantIndex(new int[]{1, 3, 4, 5}));
//
//        System.out.println(multiplesOf3And5(10));
//
//        System.out.println(binomialCoeff(4, 3));
//
//        System.out.println(binomial(5, 3));
//
//        System.out.println(getMaxProfit(new int[]{10, 7, 5, 8, 11, 9}));
//
//        System.out.println(getProductsOfAllIntsExceptAtIndex(new int[]{5, 7, 3, 4}));
//
//        System.out.println(highestProductOf3(new int[]{1, -7, 3, -4, 5, 10, -10}));
//
        LongestWordInDictionary longestWordInDictionary = new LongestWordInDictionary();
        System.out.println(longestWordInDictionary.longestWord(new String[]{"a", "banana", "app", "appl", "apply", "apple", "b", "ban", "ap", "ba", "bana", "banan"}));

        TreeNode mainTree = new TreeNode(3);
        mainTree.left = new TreeNode(4);
        mainTree.right = new TreeNode(5);
        mainTree.left.left = new TreeNode(1);
        mainTree.left.right = new TreeNode(2);
        mainTree.left.right.left = new TreeNode(0);

        TreeNode subTree = new TreeNode(4);
        subTree.left = new TreeNode(1);
        subTree.right = new TreeNode(2);

//        System.out.println(isSubtree(mainTree, subTree));

//        FindPivotIndex findPivotIndex = new FindPivotIndex();
//        System.out.println(findPivotIndex.pivotIndex(new int[]{1, 7, 3, 6, 5, 6}));
//
//        System.out.println(licenseKeyFormatting("5F3Z-2e-9-w1", 2));

//        ValidPerfectSquare validPerfectSquare = new ValidPerfectSquare();
//        System.out.println(validPerfectSquare.isPerfectSquare(49));
//
//        System.out.println(isBalanced(mainTree));

//        MyQueue myQueue = new MyQueue();
//        myQueue.push(1);
//        myQueue.push(2);
//        myQueue.push(3);
//
//        myQueue.peek();
//
//        myQueue.pop();
//        myQueue.pop();
//
//        Queue<Integer> testQueue = new PriorityQueue<>();

//        System.out.println(twoSum(new int[]{1, 7, 3, 6, 5, 6}, 11));

//        RepeatedSubstringPattern repeatedSubstringPattern = new RepeatedSubstringPattern();
//        System.out.println(repeatedSubstringPattern.repeatedSubstringPattern("abcabcabcabcabc"));
//
//        System.out.println(isRectangleOverlap(new int[]{-2, -2, 0, 0}, new int[]{-3, -3, -1, -1}));

//        TreeNode findMode = new TreeNode(1);
//        findMode.right = new TreeNode(2);
//        findMode.right.left = new TreeNode(2);

//        System.out.println(findMode(findMode));
//
//        System.out.println(trailingZeroes(28));

//        CountAndSay countAndSay = new CountAndSay();
//        System.out.println(countAndSay.countAndSay(5));

//        RemoveDuplicatesFromSortedArray removeDuplicatesFromSortedArray = new RemoveDuplicatesFromSortedArray();
//        System.out.println(removeDuplicatesFromSortedArray.removeDuplicates(new int[]{0, 0, 1, 1, 1, 2, 2, 3, 3, 4}));

//        RemoveDuplicatesFromSortedArrayII removeDuplicatesFromSortedArrayII = new RemoveDuplicatesFromSortedArrayII();
//        removeDuplicatesFromSortedArrayII.removeDuplicates(new int[]{1, 1, 1, 1, 2, 2, 2, 3, 3});

//        RemoveDuplicatesFromSortedListII removeDuplicatesFromSortedListII = new RemoveDuplicatesFromSortedListII();
//        removeDuplicatesFromSortedListII.deleteDuplicatesTwo()

//        System.out.println(countSegments("Hello, my  name is John"));
//
//        System.out.println(countPrimes(20));
//
//        ArrangingCoins arrangingCoins = new ArrangingCoins();
//        System.out.println(arrangingCoins.arrangeCoins(8));
//
//        System.out.println(isPalindrome(43232));
//
//        System.out.println(compress(new char[]{'a', 'a', 'b', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c'}));

        mainTree.right.right = new TreeNode(6);
//        PathSum pathSum = new PathSum();
//        System.out.println(pathSum.hasPathSumIterative(mainTree, 14));

//        TreeNode pathSumII = new TreeNode(5);
//        pathSumII.left = new TreeNode(4);
//        pathSumII.left.left = new TreeNode(11);
//        pathSumII.left.left.left = new TreeNode(7);
//        pathSumII.left.left.right = new TreeNode(2);
//        pathSumII.right = new TreeNode(8);
//        pathSumII.right.left = new TreeNode(13);
//        pathSumII.right.right = new TreeNode(4);
//        pathSumII.right.right.left = new TreeNode(5);
//        pathSumII.right.right.right = new TreeNode(1);
//
//        PathSumII pathSumII1 = new PathSumII();
//        pathSumII1.pathSum(pathSumII, 22);

//        PathSumIII pathSumIII = new PathSumIII();
//        pathSumIII.pathSum(mainTree, 8);

//        PathSumIV pathSumIV = new PathSumIV();
//        pathSumIV.pathSum(new int[]{113, 214, 225, 311, 322, 346});

//        IsomorphicStrings isomorphicStrings = new IsomorphicStrings();
//        System.out.println(isomorphicStrings.isIsomorphic("title", "paper"));

//        StrobogrammaticNumberII strobogrammaticNumberII = new StrobogrammaticNumberII();
//        strobogrammaticNumberII.findStrobogrammatic(5);

//        StrobogrammaticNumberIII strobogrammaticNumberIII = new StrobogrammaticNumberIII();
//        strobogrammaticNumberIII.strobogrammaticInRangeTwo("50", "100");

//        MyStack myStack = new MyStack();
//        myStack.push(1);
//        myStack.push(2);
//        myStack.push(3);
//        System.out.println("my stack pop: " + myStack.pop());

//        AddBinary addBinary = new AddBinary();
//        System.out.println(addBinary.addBinary("10101", "1110"));
//
//        System.out.println(wordPattern("abba", "dog dog dog dog"));
//
//        System.out.println(isValid("(){}[]({[]})"));

//        LongestSubstringWithAtMostTwoDistinctCharacters longestSubstringWithAtMostTwoDistinctCharacters = new LongestSubstringWithAtMostTwoDistinctCharacters();
//        longestSubstringWithAtMostTwoDistinctCharacters.lengthOfLongestSubstringTwoDistinct("ccaabbb");

//        FindAllAnagramsInAString findAllAnagramsInAString = new FindAllAnagramsInAString();
//        System.out.println(findAllAnagramsInAString.findAnagramsTwo("abcdecabedabde", "abc"));

//        ValidPalindromeII validPalindromeII = new ValidPalindromeII();
//        validPalindromeII.validPalindrome("abc");

//        TargetSum targetSum = new TargetSum();
//        ArrayList<Integer> arrayList = new ArrayList<>();
//        arrayList.add(1);
//        arrayList.add(2);
//        arrayList.add(3);
//        arrayList.add(4);
//        targetSum.findTargetSumWays(new int[]{1, 2, 3, 4, 5}, 3);

//        LongestSubstringWithoutRepeatingCharacters longestSubstringWithoutRepeatingCharacters = new LongestSubstringWithoutRepeatingCharacters();
//        System.out.println(longestSubstringWithoutRepeatingCharacters.lengthOfLongestSubstringTwo("pwwpkewx"));

//        System.out.println(findSubstring("barfoobarfoothefoobarman", new String[]{"foo", "bar", "foo"}));

//        System.out.println(minDepth(mainTree));

//        System.out.println(maxDepth(mainTree));

        ListNode palindrome = new ListNode(1);
        palindrome.next = new ListNode(2);
        palindrome.next.next = new ListNode(3);
        palindrome.next.next.next = new ListNode(4);
        palindrome.next.next.next.next = new ListNode(3);
        palindrome.next.next.next.next.next = new ListNode(2);
        palindrome.next.next.next.next.next.next = new ListNode(1);

//        PalindromeLinkedList palindromeLinkedList = new PalindromeLinkedList();
//        System.out.println(palindromeLinkedList.isPalindrome(palindrome));

//        System.out.println(removeElements(palindrome, 1));

//        ContainsDuplicateII containsDuplicateII = new ContainsDuplicateII();
//        System.out.println(containsDuplicateII.containsNearbyDuplicate(new int[]{1, 2, 3, 4, 2, 1}, 3));

//        ContainsDuplicateIII containsDuplicateIII = new ContainsDuplicateIII();
//        containsDuplicateIII.containsNearbyAlmostDuplicate(new int[]{10, 22, 33, 12}, 3, 3);

        TreeNode univalue = new TreeNode(4);
        univalue.left = new TreeNode(3);
        univalue.left.right = new TreeNode(3);
        univalue.left.right.left = new TreeNode(3);
        univalue.right = new TreeNode(2);
        univalue.right.right = new TreeNode(5);
        univalue.right.right.left = new TreeNode(5);

//        System.out.println(longestUnivaluePath(univalue));

//        NumArray numArray = new NumArray(new int[]{-2, 0, 3, -5, 2, -1});

//        PerfectNumber perfectNumber = new PerfectNumber();
//        perfectNumber.checkPerfectNumberTwo(28);

//        System.out.println(judgeSquareSum(18));

//        MergeSortedArray mergeSortedArray = new MergeSortedArray();
//        mergeSortedArray.merge(new int[]{3, 4, 8, 9, 0, 0, 0}, 4, new int[]{2, 5, 6}, 3);

//        System.out.println(validPalindrome("abcddcbfa"));

//        System.out.println(repeatedStringMatch("abcd", "cdabcdab"));

        ListNode intersection = new ListNode(9);
        intersection.next = new ListNode(10);

        ListNode interOne = new ListNode(1);
        interOne.next = new ListNode(3);
        interOne.next.next = new ListNode(5);
        interOne.next.next.next = intersection;

        ListNode interTwo = new ListNode(2);
        interTwo.next = new ListNode(4);
        interTwo.next.next = new ListNode(6);
        interTwo.next.next.next = new ListNode(8);
        interTwo.next.next.next.next = intersection;

//        IntersectionOfTwoLinkedLists intersectionOfTwoLinkedLists = new IntersectionOfTwoLinkedLists();
//        System.out.println(intersectionOfTwoLinkedLists.getIntersectionNode(interOne, interTwo));

//        System.out.println(canPlaceFlowers(new int[]{1, 0, 0, 0, 1, 0, 0, 1, 0, 0}, 3));

//        NthDigit nthDigit = new NthDigit();
//        System.out.println(nthDigit.findNthDigit(2040));

//        Heaters heaters = new Heaters();
//        System.out.println(heaters.findRadius(new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, new int[]{1, 7, 8}));

//        ReverseBits reverseBits = new ReverseBits();
//        System.out.println(reverseBits.reverseBits(29471923));

//        ShortestUnsortedContinuousSubarray shortestUnsortedContinuousSubarray = new ShortestUnsortedContinuousSubarray();
//        System.out.println(shortestUnsortedContinuousSubarray.findUnsortedSubarray(new int[]{2, 4, 8, 6, 1, 7, 10}));

//        SqrtX sqrtX = new SqrtX();
//        System.out.println(sqrtX.mySqrt(21));

//        ThirdMaximumNumber thirdMaximumNumber = new ThirdMaximumNumber();
//        System.out.println(thirdMaximumNumber.thirdMax(new int[]{1, 3, 3, 5, 5, 9, 6}));

//        ExcelSheetColumnTitle excelSheetColumnTitle = new ExcelSheetColumnTitle();
//        System.out.println(excelSheetColumnTitle.convertToTitle(702));

//        ExcelSheetColumnNumber excelSheetColumnNumber = new ExcelSheetColumnNumber();
//        excelSheetColumnNumber.titleToNumber("ZZ");

//        System.out.println(largestPalindrome(2));

//        System.out.println(leavesToDoublyLinkedList(mainTree));

//        System.out.println(hammingDistance(14, 19));

//        System.out.println(findTheDifference("abcd", "abced"));

//        MaxIndexDiffOfArray maxIndexDiffOfArray = new MaxIndexDiffOfArray();
//        System.out.println(maxIndexDiffOfArray.maxIndexDiffTwo(new int[]{34, 8, 10, 3, 2, 80, 30, 33, 1}, 9));

//        System.out.println(ap.maxSubArray(new int[]{34, 8, -10, 3, 2, -80, 30, 33, 1}));

//        System.out.println(removeAlternateDuplicate("you got beautiful eyes"));

//        TopKFrequentWords topKFrequentWords = new TopKFrequentWords();
//        System.out.println(topKFrequentWords.topKFrequentBucketSort(new String[]{"i", "love", "leetcode", "i", "love", "coding", "i", "love", "coding"}, 2));

        mainTree.left.right.right = new TreeNode(10);
//        System.out.println(printkdistanceNode(mainTree, mainTree.right, 3));

//        ShortestDistanceToACharacter shortestDistanceToACharacter = new ShortestDistanceToACharacter();
//        System.out.println(shortestDistanceToACharacter.shortestToChar("loveleetcode", 'e'));

//        System.out.println(convertToBase7(100));

//        RotateArray rotateArray = new RotateArray();
//        rotateArray.rotate(new int[]{1, 2, 3, 4, 5, 6, 7}, 20);

//        System.out.println(reverse(-123));

//        NonDecreasingArray nonDecreasingArray = new NonDecreasingArray();
//        System.out.println(nonDecreasingArray.checkPossibility(new int[]{1, 4, 3, 3, 2, 6, 7}));

//        System.out.println(reverseString("abcdefg"));

//        System.out.println(fizzBuzz(15));

//        SingleNumber singleNumber = new SingleNumber();
//        System.out.println(singleNumber.singleNumberBit(new int[]{1, 4, 4, 3, 1, 3, 7}));

//        SingleNumberII singleNumberII = new SingleNumberII();
//        singleNumberII.singleNumberWithKTwo(new int[]{2, 2, 2, 3});
//        singleNumberII.singleNumberWithK(new int[]{2, 3, 2, 2, 2}, 4);

//        SingleNumberIII singleNumberIII = new SingleNumberIII();
//        singleNumberIII.singleNumber(new int[]{1, 2, 3, 2, 1, 5});

//        SumOfTwoIntegers sumOfTwoIntegers = new SumOfTwoIntegers();
//        System.out.println(sumOfTwoIntegers.getSumIterative(1, 3));

//        RomanToInt romanToInt = new RomanToInt();
//        System.out.println(romanToInt.romanToInt("MCMXCIV"));

//        IntToRoman intToRoman = new IntToRoman();
//        intToRoman.intToRoman(11998);

//        moveZeroes(new int[]{1, 0, 3, 0, 12, 0, 5});

//        System.out.println(maxProfitTwo(new int[]{7, 1, 5, 3, 6, 4}));

//        System.out.println(isAnagram("ac", "bb"));

//        System.out.println(containsDuplicate(new int[]{1, 2, 3, 1}));

        ListNode reverseList = new ListNode(1);
        reverseList.next = new ListNode(3);
        reverseList.next.next = new ListNode(5);
        reverseList.next.next.next = new ListNode(7);

//        ReverseLinkedList reverseLinkedList = new ReverseLinkedList();
//        System.out.println(reverseLinkedList.reverseList(reverseList));

//        System.out.println(reverseListRecursive(reverseList));

//        MissingNumber missingNumber = new MissingNumber();
//        System.out.println(missingNumber.missingNumberBit(new int[]{6, 4, 3, 2, 1, 0}));

//        System.out.println(sortedArrayToBST(new int[]{-10, -3, 0, 5, 9}));

        ListNode listToBST = new ListNode(-10);
        listToBST.next = new ListNode(-3);
        listToBST.next.next = new ListNode(0);
        listToBST.next.next.next = new ListNode(5);
        listToBST.next.next.next.next = new ListNode(9);

//        System.out.println(ap.sortedListToBST(listToBST));

//        HappyNumber happyNumber = new HappyNumber();
//        System.out.println(happyNumber.isHappy(198));

//        ClimbingStairs climbingStairs = new ClimbingStairs();
//        System.out.println(climbingStairs.climbStairsThreeSteps(10));

//        System.out.println(isPowerOfThree(80));

//        TreeNode symmetric = new TreeNode(1);
//        symmetric.left = new TreeNode(2);
//        symmetric.right = new TreeNode(2);
//        symmetric.left.left = new TreeNode(3);
//        symmetric.left.right = new TreeNode(4);
////        symmetric.right.left = new TreeNode(4);
//        symmetric.right.right = new TreeNode(3);

//        System.out.println(isSymmetric(symmetric));

//        System.out.println(hammingWeight(27));

//        System.out.println(generate(5));

//        System.out.println(ap.cellCompete(new int[]{1, 1, 1, 0, 1, 1, 1, 1,}, 2));

//        System.out.println(generalizedGCD(5, new int[]{2, 4, 6, 8, 10}));

//        spiralPrint(new int[][]{{1, 2, 3, 4, 5, 6}, {7, 8, 9, 10, 11, 12}, {13, 14, 15, 16, 17, 18}});

//        System.out.println(rowWithMax0(new int[][]{{1, 1, 1, 0}, {1, 1, 0, 0,}, {0, 0, 0, 0,}, {1, 0, 0, 0}}));

//        System.out.println(pythagoreanTriplets(20));

//        System.out.println(lcm(15, 25));

//        System.out.println(lcmOfArraysTwo(new int[]{2, 7, 3, 9, 4}));

//        System.out.println(retrieveMostFrequentlyUsedWords("Jill and Jack and Jill. went to Jack's and Jill's food's", Arrays.asList("and", "to", "Jack")));

//        System.out.println(reorderLines(6, Arrays.asList("g1 act car", "zo4 4 7", "a8 act zoo", "f3 52 54 31", "t2 13 121 98", "a1 13 121 98")));

//        ProductExceptSelf productExceptSelf = new ProductExceptSelf();
//        System.out.println(productExceptSelf.productExceptSelfTwo(new int[]{7, 1, 0, 2, 9}));

//        System.out.println(inorderTraversalIterative(mainTree));

//        System.out.println(trimBST(node1, 2, 10));

//        System.out.println(averageOfLevels(node1));

//        System.out.println(minDiffInBST(node1));

//        System.out.println(generateParenthesis(3));

//        System.out.println(generateParenthesisTwo(3));

//        System.out.println(generateParenthesisBacktrack(3));

//        KnightsTour tour = new KnightsTour(5, 5);
//        tour.tourFrom(0, 0);
//        tour.printGrid();

//        System.out.println(permute(new int[]{1, 2, 3}));

//        PermutationsII permutationsII = new PermutationsII();
//        System.out.println(permutationsII.permuteUnique(new int[]{1, 2, 2, 1, 3}));

//        System.out.println(subsets(new int[]{1, 2, 3}));

//        SubsetsII subsetsII = new SubsetsII();
//        System.out.println(subsetsII.subsetsWithDup(new int[]{1, 2, 2, 3}));

//        System.out.println(combinationSum(new int[]{2, 3, 6, 7}, 10));

//        System.out.println(combinationSum2(new int[]{10, 1, 2, 7, 6, 1, 5}, 8));

//        CombinationSumIV combinationSumIV = new CombinationSumIV();
//        combinationSumIV.combinationSum4(new int[]{1, 2, 3}, 4);

//        System.out.println(ap.partition("aabcb"));

//        FourSumII fourSumII = new FourSumII();
//        System.out.println(fourSumII.fourSumCount(new int[]{1, 2}, new int[]{-2, -1}, new int[]{-1, 2}, new int[]{0, 2}));

//        FourSum fourSum = new FourSum();
//        System.out.println(fourSum.fourSumTwo(new int[]{1, 0, -1, 0, -2, 2}, 0));

//        ShuffleAnArray obj = new ShuffleAnArray(new int[]{1, 3, 5});
//        int[] shuffle = obj.shuffle();

//        System.out.println(ap.kthSmallestIter(node1, 3));

        ListNode oddEven = new ListNode(1);
        oddEven.next = new ListNode(2);
        oddEven.next.next = new ListNode(3);
        oddEven.next.next.next = new ListNode(4);
        oddEven.next.next.next.next = new ListNode(5);
        oddEven.next.next.next.next.next = new ListNode(6);
        oddEven.next.next.next.next.next.next = new ListNode(7);

//        System.out.println(ap.oddEvenList(oddEven));

//        KthSmallestElementInaSortedMatrix kthSmallestElementInaSortedMatrix = new KthSmallestElementInaSortedMatrix();
//        System.out.println(kthSmallestElementInaSortedMatrix.kthSmallestBinarySearch(new int[][]{{1, 5, 9}, {10, 11, 13}, {12, 13, 15}}, 8));

//        System.out.println(kSmallestPairs(new int[]{1, 7, 11}, new int[]{2, 4, 6}, 8));

//        System.out.println(ap.findDuplicateBinarySearch(new int[]{1, 3, 4, 2, 2, 5}));

        ListNode withCircle = new ListNode(1);
        withCircle.next = new ListNode(2);
        ListNode circle = new ListNode(3);
        withCircle.next.next = circle;
        circle.next = new ListNode(4);
        circle.next.next = new ListNode(5);
        circle.next.next.next = new ListNode(6);
        circle.next.next.next.next = circle;

//        System.out.println(ap.detectCycle(withCircle));

//        UniquePaths uniquePaths = new UniquePaths();
//        System.out.println(uniquePaths.uniquePaths(7, 3));

//        UniquePathsII uniquePathsII = new UniquePathsII();
//        uniquePathsII.uniquePathsWithObstaclesTwo(new int[][]{{0, 0, 0}, {0, 0, 0}, {0, 0, 0}});

//        RotateImage rotateImage = new RotateImage();
//        rotateImage.rotateThree(new int[][]{{1, 2, 3}, {4, 5, 6}, {7, 8, 9}});

//        KthLargestElementInAnArray kthLargestElementInAnArray = new KthLargestElementInAnArray();
//        System.out.println(kthLargestElementInAnArray.findKthLargest(new int[]{3, 2, 6, 5, 1, 4}, 3));

//        RandomizedSet randomSet = new RandomizedSet();
//        randomSet.insert(1);
//        randomSet.remove(2);
//        randomSet.insert(2);
//        randomSet.getRandom();
//        randomSet.remove(1);

//        IncreasingTripletSubsequence increasingTripletSubsequence = new IncreasingTripletSubsequence();
//        System.out.println(increasingTripletSubsequence.increasingTriplet(new int[]{1, 1, 1, 1, 0, 2}));

//        System.out.println(groupAnagrams(new String[]{"eat", "tea", "tan", "ate", "nat", "bat"}));

//        SortColors sortColors = new SortColors();
//        sortColors.sortColorsOnePass(new int[]{2, 0, 2, 1, 1, 0, 1, 2, 0});

//        System.out.println(findPeakElement(new int[]{1, 2, 1, 3, 5, 6, 4}));

//        LongestIncreasingSubsequence longestIncreasingSubsequence = new LongestIncreasingSubsequence();
//        System.out.println(longestIncreasingSubsequence.lengthOfLIS(new int[]{10, 9, 2, 5, 7, 3, 101, 18}));

//        System.out.println(lengthOfLIS(new int[]{10, 9, 2, 5, 3, 7, 101, 18}));

//        System.out.println(isValidSudoku(new char[][]{
//                {'5', '3', '.', '.', '7', '.', '.', '.', '.'},
//                {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
//                {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
//                {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
//                {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
//                {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
//                {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
//                {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
//                {'.', '.', '.', '.', '8', '.', '.', '7', '9'}
//        }));

//        SudokuSolver sudokuSolver = new SudokuSolver();
//        sudokuSolver.solveSudoku(new char[][]{
//                {'5', '3', '.', '.', '7', '.', '.', '.', '.'},
//                {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
//                {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
//                {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
//                {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
//                {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
//                {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
//                {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
//                {'.', '.', '.', '.', '8', '.', '.', '7', '9'}
//        });

//        PerfectSquares perfectSquares = new PerfectSquares();
//        System.out.println(perfectSquares.numSquares(13));

//        gameOfLife(new int[][]{
//                {1, 0, 0, 1, 0, 1, 0},
//                {1, 1, 0, 0, 0, 0, 1},
//                {0, 0, 1, 1, 0, 1, 0}
//        });

//        System.out.println(zigzagLevelOrder(mainTree));

//        System.out.println(maxArea(new int[]{9, 10, 8, 7, 3, 5, 6}));

//        System.out.println(numIslands(new char[][]{
//                {'1', '1', '0', '0', '0'},
//                {'1', '1', '0', '0', '0'},
//                {'0', '0', '1', '0', '0'},
//                {'0', '0', '0', '1', '1'}
//        }));

//        LetterCombinationsOfaPhoneNumber letterCombinationsOfaPhoneNumber = new LetterCombinationsOfaPhoneNumber();
//        System.out.println(letterCombinationsOfaPhoneNumber.letterCombinationsBfs("23"));

//        SetMatrixZeros setMatrixZeros = new SetMatrixZeros();
//        setMatrixZeros.setZeroes(new int[][]{
//                {1, 1, 2, 0},
//                {3, 0, 5, 2},
//                {1, 3, 1, 5}
//        });

        TreeLinkNode treeLinkNode1 = new TreeLinkNode(1);
        treeLinkNode1.left = new TreeLinkNode(2);
        treeLinkNode1.right = new TreeLinkNode(3);
        treeLinkNode1.left.left = new TreeLinkNode(4);
        treeLinkNode1.left.right = new TreeLinkNode(5);
        treeLinkNode1.right.left = new TreeLinkNode(6);
        treeLinkNode1.right.right = new TreeLinkNode(7);

//        connect(treeLinkNode1);

//        LongestSubstringWithAtLeastKRepeatingCharacters longestSubstringWithAtLeastKRepeatingCharacters = new LongestSubstringWithAtLeastKRepeatingCharacters();
//        System.out.println(longestSubstringWithAtLeastKRepeatingCharacters.longestSubstring("ababbc", 2));

//        ConstructBinaryTreefromPreorderandInorderTraversal constructBinaryTreefromPreorderandInorderTraversal = new ConstructBinaryTreefromPreorderandInorderTraversal();
//        System.out.println(constructBinaryTreefromPreorderandInorderTraversal.buildTreeTwo(new int[]{3, 4, 1, 2, 0, 10, 5, 6}, new int[]{1, 4, 0, 2, 10, 3, 5, 6}));

        ListNode listNodeRemoveFromEnd = new ListNode(1);
        listNodeRemoveFromEnd.next = new ListNode(2);
        listNodeRemoveFromEnd.next.next = new ListNode(3);
        listNodeRemoveFromEnd.next.next.next = new ListNode(4);
        listNodeRemoveFromEnd.next.next.next.next = new ListNode(5);
        listNodeRemoveFromEnd.next.next.next.next.next = new ListNode(6);

//        System.out.println(ap.removeNthFromEnd(listNodeRemoveFromEnd, 3));

        List<Interval> intervalList = new ArrayList<>();
        intervalList.addAll(Arrays.asList(new Interval(10, 18), new Interval(1, 3), new Interval(2, 6),
                new Interval(8, 15)));

//        System.out.println(merge(intervalList));

//        System.out.println(search(new int[]{4, 5, 6, 7, 0, 1, 2}, 0));

//        WordBreak wordBreak = new WordBreak();
//        System.out.println(wordBreak.wordBreakTwo("applepenapple", Arrays.asList("apple", "pen")));

//        System.out.println(searchRange(new int[]{5, 7, 7, 8, 8, 10}, 8));

//        TrieLeetCode trieLeetCode = new TrieLeetCode();
//        trieLeetCode.insert("apple");
//        trieLeetCode.search("apple");   // returns true
//        trieLeetCode.search("app");     // returns false
//        trieLeetCode.startsWith("app"); // returns true
//        trieLeetCode.insert("app");
//        trieLeetCode.search("app");

//        System.out.println(calculate(" 3+5 / 2 "));
        ListNode mergeSortList = new ListNode(-1);
        mergeSortList.next = new ListNode(5);
        mergeSortList.next.next = new ListNode(3);
        mergeSortList.next.next.next = new ListNode(4);
        mergeSortList.next.next.next.next = new ListNode(0);

//        SortList sortList = new SortList();
//        System.out.println(sortList.sortList(mergeSortList));

//        InsertionSortList insertionSortList = new InsertionSortList();
//        System.out.println(insertionSortList.insertionSortList(mergeSortList));

//        GasStation gasStation = new GasStation();
//        System.out.println(gasStation.canCompleteCircuitTwo(new int[]{1, 2, 3, 4, 5}, new int[]{3, 4, 5, 1, 2}));

//        GasStationII gasStationII = new GasStationII();
//        gasStationII.getTimes(25, 10, new int[]{10, 14, 20, 21}, new int[]{10, 5, 2, 4});

//        LowestCommonAncestorOfABinaryTree lowestCommonAncestorOfABinaryTree = new LowestCommonAncestorOfABinaryTree();
//        System.out.println(lowestCommonAncestorOfABinaryTree.lowestCommonAncestorIterative(mainTree, mainTree.left.right, mainTree.left));

//        JumpGame jumpGame = new JumpGame();
//        System.out.println(jumpGame.canJump(new int[]{3, 2, 2, 0, 4}));

//        JumpGameII jumpGameII = new JumpGameII();
//        jumpGameII.jump(new int[]{2, 3, 1, 1, 4});

        ListNode addTwoNumbers1 = new ListNode(2);
        addTwoNumbers1.next = new ListNode(4);
        addTwoNumbers1.next.next = new ListNode(3);
        ListNode addTwoNumbers2 = new ListNode(5);
        addTwoNumbers2.next = new ListNode(6);
        addTwoNumbers2.next.next = new ListNode(4);

//        AddTwoNumbers addTwoNumbers = new AddTwoNumbers();
//        System.out.println(addTwoNumbers.addTwoNumbers(addTwoNumbers1, addTwoNumbers2));

//        AddTwoNumbersII addTwoNumbersII = new AddTwoNumbersII();
        addTwoNumbers1.next.next.next = new ListNode(9);
//        addTwoNumbersII.addTwoNumbers(addTwoNumbers1, addTwoNumbers2);

//        System.out.println(ap.evalRPN(new String[]{"10", "6", "9", "3", "+", "-11", "*", "/", "*", "17", "+", "5", "+"}));

//        WordSearch wordSearch = new WordSearch();
//        System.out.println(wordSearch.exist(new char[][]{
//                {'A', 'B', 'C', 'E'},
//                {'S', 'F', 'C', 'S'},
//                {'A', 'D', 'E', 'E'}
//        }, "ABCCED"));

//        WordSearchII wordSearchII = new WordSearchII();
//        wordSearchII.findWordsTwo(new char[][]{
//                {'o', 'a', 'a', 'n'},
//                {'e', 't', 'a', 'e'},
//                {'i', 'h', 'k', 'r'},
//                {'i', 'f', 'l', 'v'}
//        }, Arrays.asList("eat", "oath", "oat"));

//        ap.spiralOrder(new int[][]{{1, 2, 3, 4, 5, 6}, {7, 8, 9, 10, 11, 12}, {13, 14, 15, 16, 17, 18}});

//        ap.generateMatrix(2);

//        System.out.println(ap.maxProduct(new int[]{2, 3, 0, -2, 4, -3}));

//        CoinChange coinChange = new CoinChange();
//        System.out.println(coinChange.coinChange(new int[]{3, 4, 5}, 13));

//        CoinChangeII coinChangeII = new CoinChangeII();
//        coinChangeII.change(6, new int[]{1, 2, 3});
//        coinChangeII.change(6, new int[]{1, 2, 3}, new int[]{6, 2, 2});
        // 1,1,1,1,1,1    1,1,1,1,2    1,1,2,2    1,1,1,3    3,3    1,2,3

//        Codec codec = new Codec();
//        codec.decode(codec.encode("www.google.com"));

//        BinaryTreeRightSideView binaryTreeRightSideView = new BinaryTreeRightSideView();
//        System.out.println(binaryTreeRightSideView.rightSideViewIter(mainTree));

//        GrayCode grayCode = new GrayCode();
//        grayCode.grayCodeTwo(7);

        RandomListNode randomListNode1 = new RandomListNode(1);
        RandomListNode randomListNode2 = new RandomListNode(2);
        RandomListNode randomListNode3 = new RandomListNode(3);
        RandomListNode randomListNode4 = new RandomListNode(4);
        randomListNode1.next = randomListNode2;
        randomListNode1.random = randomListNode3;
        randomListNode2.next = randomListNode3;
        randomListNode2.random = randomListNode4;
        randomListNode3.next = randomListNode4;

//        System.out.println(ap.copyRandomList(randomListNode1));

//        ListNode example = new ListNode(1);
//        example.next = new ListNode(2);
//        example.next.next = new ListNode(3);
//        example.next.next.next = new ListNode(4);
//        example.next.next.next.next = new ListNode(5);
//        example.next.next.next.next.next = new ListNode(6);
//
//        ListNode cur = example;
//        ListNode pre = example;
//
//        pre.next = pre.next.next;
//
//        cur.next = cur.next.next;
//
//        cur = cur.next;
//
//        System.out.println(example);

//        LongestPalindromicSubstring longestPalindromicSubstring = new LongestPalindromicSubstring();
//        System.out.println(longestPalindromicSubstring.longestPalindromeOn("abcefgfeddefg"));

//        System.out.println(ap.threeSum(new int[]{-1, 0, 1, 2, -1, -4, 3}));

//        WordLadder wordLadder = new WordLadder();
//        wordLadder.lc("a", "c", new HashSet<>(Arrays.asList("b")));
//        System.out.println(wordLadder.ladderLengthTwoPointer("hot", "dog", Arrays.asList("hot", "dog")));

//        System.out.println(ap.myAtoi("    -42"));

//        Node nodeA = new Node("A");
//        Node nodeB = new Node("B");
//        Node nodeC = new Node("C");
//        Node nodeD = new Node("D");
//        Node nodeE = new Node("E");
//        Node nodeF = new Node("F");
//
//        nodeA.addDestination(nodeB, 10);
//        nodeA.addDestination(nodeC, 15);
//
//        nodeB.addDestination(nodeD, 12);
//        nodeB.addDestination(nodeF, 15);
//
//        nodeC.addDestination(nodeE, 10);
//
//        nodeD.addDestination(nodeE, 2);
//        nodeD.addDestination(nodeF, 1);
//
//        nodeF.addDestination(nodeE, 5);
//
//        Graph graph = new Graph();
//
//        graph.addNode(nodeA);
//        graph.addNode(nodeB);
//        graph.addNode(nodeC);
//        graph.addNode(nodeD);
//        graph.addNode(nodeE);
//        graph.addNode(nodeF);
//
//        graph = DijkstraExample.calculateShortestPathFromSource(graph, nodeA);

//        System.out.println(ap.trap(new int[]{0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1}));

//        SerializeDeserializeBinaryTree serializeDeserializeBinaryTree = new SerializeDeserializeBinaryTree();
//        serializeDeserializeBinaryTree.deserialize(serializeDeserializeBinaryTree.serialize(mainTree));

//        SlidingWindowMaximum slidingWindowMaximum = new SlidingWindowMaximum();
//        System.out.println(slidingWindowMaximum.maxSlidingWindow(new int[]{1, 3, -1, -3, 5, 3, 6, 7}, 3));

        ListNode mergeKListsOne = new ListNode(1);
        mergeKListsOne.next = new ListNode(4);
        mergeKListsOne.next.next = new ListNode(5);

        ListNode mergeKListsTwo = new ListNode(1);
        mergeKListsTwo.next = new ListNode(3);
        mergeKListsTwo.next.next = new ListNode(4);

        ListNode mergeKListsThree = new ListNode(2);
        mergeKListsThree.next = new ListNode(6);

//        MergeKSortedLists mergeKSortedLists = new MergeKSortedLists();
//        System.out.println(mergeKSortedLists.mergeKLists(new ListNode[]{mergeKListsOne, mergeKListsTwo, mergeKListsThree}));

//        Map<Integer, String> map = new LinkedHashMap<>(16, .75f, true);
//        map.put(1, null);
//        map.put(2, null);
//        map.put(3, null);
//        map.put(4, null);
//        map.put(5, null);
//        Set<Integer> keys = map.keySet();
//        System.out.println(keys.toString());
//        map.get(4);
//        System.out.println(keys.toString());
//        map.get(3);
//        System.out.println(keys.toString());

//        LRUCache cache = new LRUCache(2);
//        cache.put(1, 1);
//        cache.put(2, 2);
//        cache.get(1);       // returns 1
//        cache.put(3, 3);    // evicts key 2
//        cache.get(2);       // returns -1 (not found)
//        cache.put(4, 4);    // evicts key 1
//        cache.get(1);       // returns -1 (not found)
//        cache.get(3);       // returns 3
//        cache.get(4);

//        WordLadderII wordLadderII = new WordLadderII();
//        System.out.println(wordLadderII.findLaddersBiDirectionTwo("hit", "cog", Arrays.asList("hot", "dot", "dog", "lot", "log", "cog")));

//        BreadthFirstSearchExampleNeighbourList.BfsNode node40 = new BreadthFirstSearchExampleNeighbourList.BfsNode(40);
//        BreadthFirstSearchExampleNeighbourList.BfsNode node10 = new BreadthFirstSearchExampleNeighbourList.BfsNode(10);
//        BreadthFirstSearchExampleNeighbourList.BfsNode node20 = new BreadthFirstSearchExampleNeighbourList.BfsNode(20);
//        BreadthFirstSearchExampleNeighbourList.BfsNode node30 = new BreadthFirstSearchExampleNeighbourList.BfsNode(30);
//        BreadthFirstSearchExampleNeighbourList.BfsNode node60 = new BreadthFirstSearchExampleNeighbourList.BfsNode(60);
//        BreadthFirstSearchExampleNeighbourList.BfsNode node50 = new BreadthFirstSearchExampleNeighbourList.BfsNode(50);
//        BreadthFirstSearchExampleNeighbourList.BfsNode node70 = new BreadthFirstSearchExampleNeighbourList.BfsNode(70);
//        node40.addNeighbours(node10);
//        node40.addNeighbours(node20);
//        node10.addNeighbours(node30);
//        node20.addNeighbours(node10);
//        node20.addNeighbours(node30);
//        node20.addNeighbours(node60);
//        node20.addNeighbours(node50);
//        node30.addNeighbours(node60);
//        node60.addNeighbours(node70);
//        node50.addNeighbours(node70);
//        BreadthFirstSearchExampleNeighbourList breadthFirstSearchExampleNeighbourList = new BreadthFirstSearchExampleNeighbourList();
//        breadthFirstSearchExampleNeighbourList.bfs(node40);

//        System.out.println(ap.minMutationBiDirection("AACCGGTT", "ACACCGTA", new String[]{"AACCGGTA", "AACCGCTA", "AAACGGTA", "AAACCGTA", "ACACCGTA"}));

//        LFUCacheLHS lfuCacheLHS = new LFUCacheLHS(3);
//        lfuCacheLHS.put(1, 1);
//        lfuCacheLHS.put(2, 2);
//        lfuCacheLHS.put(3, 3);
//        lfuCacheLHS.get(1);
//        lfuCacheLHS.get(2);
//        lfuCacheLHS.get(3);
//        lfuCacheLHS.put(4, 4);
//        lfuCacheLHS.get(1);
//        lfuCacheLHS.get(3);
//        lfuCacheLHS.get(4);

//        LFUCache lfuCache = new LFUCache(3);
//        lfuCache.put(1, 1);
//        lfuCache.put(2, 2);
//        lfuCache.put(3, 3);
//        lfuCache.get(1);
//        lfuCache.get(2);
//        lfuCache.get(3);
//        lfuCache.put(4, 4);
//        lfuCache.get(1);
//        lfuCache.get(3);
//        lfuCache.get(4);

//        System.out.println(ap.levelOrderBottomDfs(mainTree));

//        System.out.println(ap.largestValuesDfs(mainTree));

//        System.out.println(ap.canFinish(4, new int[][]{{1, 0}, {2, 1}, {3, 2}}));

//        ap.solve(new char[][]{{'X', 'X', 'X', 'X'}, {'X', 'O', 'O', 'X'}, {'X', 'X', 'O', 'X'}, {'X', 'X', 'O', 'X'}});

//        ZeroOneMatrix zeroOneMatrix = new ZeroOneMatrix();
//        zeroOneMatrix.updateMatrixDp(new int[][]{{0, 0, 0}, {0, 1, 0}, {1, 1, 1}});

//        RemoveInvalidParentheses removeInvalidParentheses = new RemoveInvalidParentheses();
//        removeInvalidParentheses.removeInvalidParenthesesDfs("(a)(()()");

//        System.out.println(ap.pacificAtlanticBfs(new int[][]{{1, 2, 2, 3, 5}, {3, 2, 3, 4, 4}, {2, 4, 5, 3, 1}, {6, 7, 1, 4, 5}, {5, 1, 1, 2, 4}}));

//        TrappingRainWater trappingRainWater = new TrappingRainWater();
//        trappingRainWater.trapTwo(new int[]{1, 0, 2, 1, 0, 1, 3, 2, 1, 2});

//        TrappingRainWaterII trappingRainWaterII = new TrappingRainWaterII();
//        System.out.println(trappingRainWaterII.trapRainWaterTwo(new int[][]{{1, 4, 3, 1, 3, 2}, {3, 2, 1, 3, 2, 4}, {2, 3, 3, 2, 3, 1}}));

//        ap.wallsAndGatesMultiEndBfs(new int[][]{
//                {Integer.MAX_VALUE, -1, 0, Integer.MAX_VALUE},
//                {Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, -1},
//                {Integer.MAX_VALUE, -1, Integer.MAX_VALUE, -1},
//                {0, -1, Integer.MAX_VALUE, Integer.MAX_VALUE}});

//        ShortestDistanceFromAllBuildings shortestDistanceFromAllBuildings = new ShortestDistanceFromAllBuildings();
//        System.out.println(shortestDistanceFromAllBuildings.shortestDistance(new int[][]{{1, 0, 2, 0, 1}, {0, 0, 0, 0, 0}, {0, 0, 1, 0, 0}}));

//        MinimumHeightTrees minimumHeightTrees = new MinimumHeightTrees();
//        System.out.println(minimumHeightTrees.findMinHeightTrees(7, new int[][]{{0, 3}, {1, 3}, {2, 3}, {4, 3}, {5, 4}, {6, 5}}));

//        CheapestFlightsWithinKStops cheapestFlightsWithinKStops = new CheapestFlightsWithinKStops();
//        System.out.println(cheapestFlightsWithinKStops.findCheapestPriceTwo(3, new int[][]{{0, 1, 100}, {1, 2, 100}, {0, 2, 500}}, 0, 2, 1));

//        NetworkDelyTime networkDelyTime = new NetworkDelyTime();
//        System.out.println(networkDelyTime.networkDelayTime(new int[][]{{2, 3, 5}, {2, 4, 5}, {3, 6, 3}, {3, 7, 4}, {4, 8, 10}}, 6, 2));

//        PartitionLabels partitionLabels = new PartitionLabels();
//        System.out.println(partitionLabels.partitionLabels("ababcbacadefegdehijhklij"));

//        PalindromePartitioningII palindromePartitioningII = new PalindromePartitioningII();
//        System.out.println(palindromePartitioningII.minCutDpNew("aabcbcbdd"));

//        System.out.println(ap.boundaryOfBinaryTree(mainTree));

//        CutOffTreesForGolfEvent cutOffTreesForGolfEvent = new CutOffTreesForGolfEvent();
//        System.out.println(cutOffTreesForGolfEvent.cutOffTree(Arrays.asList(Arrays.asList(1, 2, 3), Arrays.asList(0, 0, 4), Arrays.asList(7, 6, 5))));

//        ValidateBinarySearchTree validateBinarySearchTree = new ValidateBinarySearchTree();
//        System.out.println(validateBinarySearchTree.isValidBST(node1));

//        SerializeDeserializeBinarySearchTree serializeDeserializeBinarySearchTree = new SerializeDeserializeBinarySearchTree();
//        serializeDeserializeBinarySearchTree.deserialize(serializeDeserializeBinarySearchTree.serialize(node1));

//        BinaryTreeInorderTraversal binaryTreeInorderTraversal = new BinaryTreeInorderTraversal();
//        binaryTreeInorderTraversal.inorderTraversal(mainTree);

//        ConstructBinaryTreefromInorderandPostorderTraversal constructBinaryTreefromInorderandPostorderTraversal = new ConstructBinaryTreefromInorderandPostorderTraversal();
//        System.out.println(constructBinaryTreefromInorderandPostorderTraversal.buildTreeTwo(new int[]{1, 4, 0, 2, 10, 3, 5, 6}, new int[]{1, 0, 10, 2, 4, 6, 5, 3}));

//        BinaryTreePostTraversal binaryTreePostTraversal = new BinaryTreePostTraversal();
//        binaryTreePostTraversal.postorderTraversal(mainTree);

//        BinaryTreePreorderTraversal binaryTreePreorderTraversal = new BinaryTreePreorderTraversal();
//        binaryTreePreorderTraversal.preorderTraversalThree(mainTree);

//        ConstructBinaryTreefromPreorderandPostorderTraversal constructBinaryTreefromPreorderandPostorderTraversal = new ConstructBinaryTreefromPreorderandPostorderTraversal();
//        constructBinaryTreefromPreorderandPostorderTraversal.constructFromPrePostTwo(new int[]{3, 4, 1, 2, 0, 10, 5, 6}, new int[]{1, 0, 10, 2, 4, 6, 5, 3});

//        MedianOfTwoSortedArrays medianOfTwoSortedArrays = new MedianOfTwoSortedArrays();
//        System.out.println(medianOfTwoSortedArrays.findMedianSortedArraysTwo(new int[]{4, 8, 13}, new int[]{1, 2, 3, 7}));

//        System.out.println(ap.findMinTwo(new int[]{3, 3, 3, 4, 5, 5, 1, 2, 3}));

//        ThreeSumClosest threeSumClosest = new ThreeSumClosest();
//        System.out.println(threeSumClosest.threeSumClosestTwo(new int[]{-1, 2, 1, -4, 7}, 1));

//        MajorityElement majorityElement = new MajorityElement();
//        majorityElement.majorityElementBit(new int[]{2, 2, 1, 1, 1, 2, 2});
//        System.out.println(majorityElement.majorityElementMoore(new int[]{2, 2, 1, 1, 3, 2, 2}));


//        System.out.println(majorityElement.majorityElementTwo(new int[]{1, 3, 1, 3, 3, 2, 2, 2}));

//        SummaryRanges summaryRanges = new SummaryRanges();
//        System.out.println(summaryRanges.summaryRanges(new int[]{0, 2, 3, 4, 6, 8, 9}));

//        NextPermutation nextPermutation = new NextPermutation();
//        nextPermutation.nextPermutation(new int[]{6, 5, 4, 8, 7, 5, 4});
//        nextPermutation.nextPermutation(new int[]{1, 2, 2, 2});

//        Triangle triangle = new Triangle();
//        System.out.println(triangle.minimumTotal(Arrays.asList(Arrays.asList(2), Arrays.asList(3, 4), Arrays.asList(6, 5, 7), Arrays.asList(4, 1, 8, 3))));

//        MinimumPathSum minimumPathSum = new MinimumPathSum();
//        System.out.println(minimumPathSum.minPathSum(new int[][]{{1, 3, 1, 2}, {1, 5, 5, 2}, {4, 2, 1, 3}}));

//        System.out.println(ap.leastInterval(new char[]{'A', 'A', 'A', 'B', 'B', 'B', 'C', 'C', 'D'}, 3));

        ListNode removeDups = new ListNode(1);
        removeDups.next = new ListNode(3);
        removeDups.next.next = new ListNode(5);
        removeDups.next.next.next = new ListNode(5);
        removeDups.next.next.next.next = new ListNode(4);

//        ap.removeDups(removeDups);

        ListNode partition = new ListNode(6);
        partition.next = new ListNode(5);
        partition.next.next = new ListNode(8);
        partition.next.next.next = new ListNode(4);
        partition.next.next.next.next = new ListNode(10);
        partition.next.next.next.next.next = new ListNode(2);
        partition.next.next.next.next.next.next = new ListNode(1);

//        System.out.println(ap.partitionLC(partition, 3));
//        System.out.println(ap.swapPairs(listNodeRemoveFromEnd));
//        ReorderList reorderList = new ReorderList();
//        reorderList.reorderListThreeSteps(listNodeRemoveFromEnd);

        ListNode removeDupsTwo = new ListNode(1);
        removeDupsTwo.next = new ListNode(1);
        removeDupsTwo.next.next = new ListNode(1);
        removeDupsTwo.next.next.next = new ListNode(2);
        removeDupsTwo.next.next.next.next = new ListNode(3);
        removeDupsTwo.next.next.next.next.next = new ListNode(3);
        removeDupsTwo.next.next.next.next.next.next = new ListNode(4);
        removeDupsTwo.next.next.next.next.next.next.next = new ListNode(5);

//        System.out.println(ap.deleteDuplicatesTwo(removeDupsTwo));

        ListNode removeDupsUnsorted = new ListNode(1);
        removeDupsUnsorted.next = new ListNode(2);
        removeDupsUnsorted.next.next = new ListNode(5);
        removeDupsUnsorted.next.next.next = new ListNode(4);
        removeDupsUnsorted.next.next.next.next = new ListNode(2);
        removeDupsUnsorted.next.next.next.next.next = new ListNode(1);
        removeDupsUnsorted.next.next.next.next.next.next = new ListNode(3);

//        System.out.println(ap.deleteDuplicatesUnsorted(removeDupsUnsorted));

//        ReverseLinkedListII reverseLinkedListII = new ReverseLinkedListII();
//        System.out.println(reverseLinkedListII.reverseBetween(removeDupsUnsorted, 1, 2));

//        RotateList rotateList = new RotateList();
//        System.out.println(rotateList.rotateRight(listNodeRemoveFromEnd, 8));

//        SplitLinkedListInParts splitLinkedListInParts = new SplitLinkedListInParts();
//        listNodeRemoveFromEnd.next.next.next.next.next.next = new ListNode(8);
//        splitLinkedListInParts.splitListToParts(listNodeRemoveFromEnd, 3);

//        KillProcess killProcess = new KillProcess();
//        killProcess.killProcess(Arrays.asList(1, 3, 10, 5), Arrays.asList(3, 0, 5, 3), 3);

//        MaxSumOfRectangleNoLargerThanK maxSumOfRectangleNoLargerThanK = new MaxSumOfRectangleNoLargerThanK();
//        maxSumOfRectangleNoLargerThanK.maxSumSubmatrixTreeSet(new int[][]{{1, 0, 1}, {0, -2, 3}}, 2);

//        DailyTemperatures dailyTemperatures = new DailyTemperatures();
//        dailyTemperatures.dailyTemperatures(new int[]{73, 74, 75, 71, 69, 72, 76, 73});

//        NextGreaterElementI nextGreaterElementI = new NextGreaterElementI();
//        nextGreaterElementI.nextGreaterElement(new int[]{4, 1, 2, 7}, new int[]{1, 4, 3, 2, 5, 6});
//        nextGreaterElementI.nextGreaterElementTwo(new int[]{2, 1, 3, 9});

//        NextGreaterElementII nextGreaterElementII = new NextGreaterElementII();
//        nextGreaterElementII.nextGreaterElements(new int[]{1, 4, 3, 6, 5, 2});

//        NextGreaterElementIII nextGreaterElementIII = new NextGreaterElementIII();
//        nextGreaterElementIII.nextGreaterElement(98745631);

//        DecodeString decodeString = new DecodeString();
//        decodeString.decodeStringTwo("2[qwe]3[a2[c]]");

//        DecodeWaysII decodeWaysII = new DecodeWaysII();
//        decodeWaysII.numDecodingsTwo("1*2*3");

//        BinaryTreePreorderTraversal binaryTreePreorderTraversal = new BinaryTreePreorderTraversal();
//        binaryTreePreorderTraversal.preorderTraversalTwo(node1);

//        BinaryTreeInorderTraversal binaryTreeInorderTraversal = new BinaryTreeInorderTraversal();
//        binaryTreeInorderTraversal.inorderTraversalTwo(node1);

//        VerifyPreorderSequenceinBinarySearchTree verifyPreorderSequenceinBinarySearchTree = new VerifyPreorderSequenceinBinarySearchTree();
//        verifyPreorderSequenceinBinarySearchTree.verifyPreorderTwo(new int[]{10, 6, 2, 9, 11, 12, 15});

//        SimplifyPath simplifyPath = new SimplifyPath();
//        simplifyPath.simplifyPath("/a/./b/../../c/");

//        VerifyPreorderSequenceinBinaryTree verifyPreorderSequenceinBinaryTree = new VerifyPreorderSequenceinBinaryTree();
//        verifyPreorderSequenceinBinaryTree.isValidSerialization("9,3,4,#,#,1,#,#,2,#,6,#,#");

//        TernaryExpressionParser ternaryExpressionParser = new TernaryExpressionParser();
//        ternaryExpressionParser.parseTernary("F?1:T?4:5");

//        OneThreeTwoPattern oneThreeTwoPattern = new OneThreeTwoPattern();
//        oneThreeTwoPattern.find132patternTwo(new int[]{9, 11, 8, 9, 10, 7, 9});

//        RemoveKDigits removeKDigits = new RemoveKDigits();
//        removeKDigits.removeKdigits("1232229", 3);

//        LargestRectangleInHistogram largestRectangleInHistogram = new LargestRectangleInHistogram();
//        largestRectangleInHistogram.largestRectangleArea(new int[]{6, 2, 5, 4, 5, 1, 6});

//        MaximalRectangle maximalRectangle = new MaximalRectangle();
//        maximalRectangle.maximalRectangle(new char[][]{
//                {'1', '0', '1', '0', '0'},
//                {'1', '0', '1', '1', '1'},
//                {'1', '1', '1', '1', '1'},
//                {'1', '0', '0', '1', '0'}});
//        maximalRectangle.maximalRectangle(new boolean[][]{
//                {true, true, false, false, true},
//                {false, true, false, false, true},
//                {false, false, true, true, true},
//                {false, false, true, true, true},
//                {false, false, false, false, true}});

//        MaximalSquare maximalSquare = new MaximalSquare();
//        maximalSquare.maximalSquare(new char[][]{
//                {'1', '0', '1', '0', '0'},
//                {'1', '0', '1', '1', '1'},
//                {'1', '1', '1', '1', '1'},
//                {'1', '0', '0', '1', '1'}});

//        LargestPlusSign largestPlusSign = new LargestPlusSign();
//        largestPlusSign.orderOfLargestPlusSignTwo(5, new int[][]{{4, 2}, {2, 4}});

//        MaximizeDistanceToClosestPerson maximizeDistanceToClosestPerson = new MaximizeDistanceToClosestPerson();
//        maximizeDistanceToClosestPerson.maxDistToClosestTwo(new int[]{1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0});

//        BoldWordsInString boldWordsInString = new BoldWordsInString();
//        boldWordsInString.boldWords(new String[]{"ab", "bc"}, "aabcd");

//        SentenceSimilarityII sentenceSimilarityII = new SentenceSimilarityII();
//        sentenceSimilarityII.areSentencesSimilarDfs(new String[]{"great", "acting", "skills"},
//                new String[]{"cool", "drama", "talent"},
//                new String[][]{{"great", "good"}, {"fine", "good"}, {"good", "cool"}, {"acting", "drama"}, {"skills", "talent"}});

//        SentenceSimilarityI sentenceSimilarityI = new SentenceSimilarityI();
//        sentenceSimilarityI.areSentencesSimilar(new String[]{"great", "acting", "skills"},
//                new String[]{"fine", "drama", "talent"},
//                new String[][]{{"great", "good"}, {"fine", "good"}, {"acting", "drama"}, {"skills", "talent"}});

//        FlipGameII flipGameII = new FlipGameII();
//        System.out.println(flipGameII.canWin("++++"));

//        ShortestWordDistanceII shortestWordDistanceII = new ShortestWordDistanceII(new String[]{"practice", "makes", "perfect", "coding", "makes"});
//        shortestWordDistanceII.shortest("makes", "coding");

//        ShortestWordDistanceIII shortestWordDistanceIII = new ShortestWordDistanceIII();
//        shortestWordDistanceIII.shortestWordDistance(new String[]{"practice", "makes", "perfect", "coding", "makes"}, "makes", "makes");

//        InvertBinaryTree invertBinaryTree = new InvertBinaryTree();
//        invertBinaryTree.invertTreeStack(node1);

//        MergeTwoBinaryTrees mergeTwoBinaryTrees = new MergeTwoBinaryTrees();
//        mergeTwoBinaryTrees.mergeTreesDfs(node1, mainTree);

//        UniqueBinarySearchTreesII uniqueBinarySearchTreesII = new UniqueBinarySearchTreesII();
//        uniqueBinarySearchTreesII.generateTrees(4);

//        BalanceBinaryTree balanceBinaryTree = new BalanceBinaryTree();
//        balanceBinaryTree.isBalanced(node1);

//        LowestCommonAncestorOfABinaryTree lowestCommonAncestorOfABinaryTree = new LowestCommonAncestorOfABinaryTree();
//        lowestCommonAncestorOfABinaryTree.lowestCommonAncestorIterative(node1, node1.right.left, node1.right.right);

//        MaximumBinaryTree maximumBinaryTree = new MaximumBinaryTree();
//        maximumBinaryTree.constructMaximumBinaryTreeIterative(new int[]{3, 2, 1, 6, 0, 5});

        TreeNode completeNode = new TreeNode(10);
        completeNode.left = new TreeNode(6);
        completeNode.right = new TreeNode(12);
        completeNode.right.left = new TreeNode(10);
        completeNode.right.right = new TreeNode(8);
        completeNode.left.left = new TreeNode(2);
        completeNode.left.right = new TreeNode(9);
        completeNode.left.left.left = new TreeNode(3);

//        CountCompleteTreeNodes countCompleteTreeNodes = new CountCompleteTreeNodes();
//        countCompleteTreeNodes.countNodes(completeNode);

//        CountPrimes countPrimes = new CountPrimes();
//        countPrimes.countPrimes(8);
//        countPrimes.getAllPrime(50);

//        FlattenBinaryTreeToLinkedList flattenBinaryTreeToLinkedList = new FlattenBinaryTreeToLinkedList();
//        flattenBinaryTreeToLinkedList.flattenIterative(node1);

        TreeNode rob3 = new TreeNode(2);
        rob3.left = new TreeNode(1);
        rob3.left.left = new TreeNode(3);
        rob3.left.left.left = new TreeNode(4);

//        HouseRobberIII houseRobberIII = new HouseRobberIII();
//        houseRobberIII.rob(rob3);

//        HouseRobber houseRobber = new HouseRobber();
//        houseRobber.robTwo(new int[]{2, 7, 9, 3, 1, 20});

        TreeNode uniValue = new TreeNode(5);
        uniValue.left = new TreeNode(1);
        uniValue.left.left = new TreeNode(5);
        uniValue.left.right = new TreeNode(5);
        uniValue.right = new TreeNode(5);
        uniValue.right.right = new TreeNode(5);

//        CountUnivalueSubtrees countUnivalueSubtrees = new CountUnivalueSubtrees();
//        countUnivalueSubtrees.countUnivalSubtrees(uniValue);

        TreeLinkNode populating2 = new TreeLinkNode(1);
        populating2.left = new TreeLinkNode(2);
        populating2.right = new TreeLinkNode(3);
        populating2.left.left = new TreeLinkNode(4);
        populating2.left.right = new TreeLinkNode(5);
        populating2.right.right = new TreeLinkNode(7);

//        PopulatingNextRightPointersInEachNodeII populatingNextRightPointersInEachNodeII = new PopulatingNextRightPointersInEachNodeII();
//        populatingNextRightPointersInEachNodeII.connect(populating2);

//        InorderSuccessorInBST inorderSuccessorInBST = new InorderSuccessorInBST();
//        inorderSuccessorInBST.inorderSuccessor(node1, node1.right);

        TreeNode upsideDown = new TreeNode(1);
        upsideDown.left = new TreeNode(2);
        upsideDown.left.left = new TreeNode(4);
        upsideDown.left.right = new TreeNode(5);
        upsideDown.right = new TreeNode(3);

//        BinaryTreeUpsideDown binaryTreeUpsideDown = new BinaryTreeUpsideDown();
//        binaryTreeUpsideDown.upsideDownBinaryTree(upsideDown);

//        PrintBinaryTree printBinaryTree = new PrintBinaryTree();
//        printBinaryTree.printTree(node1);

//        SumRootToLeafNumbers sumRootToLeafNumbers = new SumRootToLeafNumbers();
//        sumRootToLeafNumbers.sumNumbersIterative(node1);

//        DeleteNodeInBST deleteNodeInBST = new DeleteNodeInBST();
//        deleteNodeInBST.deleteNode(node1, 6);

//        FindDuplicateSubtrees findDuplicateSubtrees = new FindDuplicateSubtrees();
//        findDuplicateSubtrees.findDuplicateSubtrees(uniValue);

//        ClosestBinarySearchTreeValue closestBinarySearchTreeValue = new ClosestBinarySearchTreeValue();
//        closestBinarySearchTreeValue.closestValue(node1, 8.8);

//        FindLeavesOfBinaryTree findLeavesOfBinaryTree = new FindLeavesOfBinaryTree();
//        findLeavesOfBinaryTree.findLeaves(mainTree);

//        ClosestBinarySearchTreeValueII closestBinarySearchTreeValueII = new ClosestBinarySearchTreeValueII();
//        closestBinarySearchTreeValueII.closestKValuesTwoIterative(node1, 9.5, 2);

//        ZigZagConversion zigZagConversion = new ZigZagConversion();
//        zigZagConversion.convert("PAYPALISHIRING", 4);

//        ValidParenthesisString validParenthesisString = new ValidParenthesisString();
//        validParenthesisString.checkValidString("(**))");

//        ReversePairsLC reversePairsLC = new ReversePairsLC();
//        reversePairsLC.reversePairs(new int[]{2, 4, 1, 3, 5});

//        ReversePairs reversePairs = new ReversePairs();
//        reversePairs.reversePairs(new int[]{2, 4, 3, 5, 1});

//        CountOfSmallerNumbersAfterSelf countOfSmallerNumbersAfterSelf = new CountOfSmallerNumbersAfterSelf();
//        countOfSmallerNumbersAfterSelf.countSmaller(new int[]{5, 2, 6, 1});

//        MaximumXOROfTwoNumbersInAnArray maximumXOROfTwoNumbersInAnArray = new MaximumXOROfTwoNumbersInAnArray();
//        maximumXOROfTwoNumbersInAnArray.findMaximumXORTrie(new int[]{3, 10, 5, 25, 2, 8});

//        MaximumProductOfWordLengths maximumProductOfWordLengths = new MaximumProductOfWordLengths();
//        maximumProductOfWordLengths.maxProduct(new String[]{"aa", "aaa", "abcw", "baz", "foo", "bar", "xtfn", "abcdef"});

//        GeneralizedAbbreviation generalizedAbbreviation = new GeneralizedAbbreviation();
//        generalizedAbbreviation.generateAbbreviations("word");

//        LargestNumber largestNumber = new LargestNumber();
//        largestNumber.largestNumber(new int[]{3, 30, 34, 5, 9});

//        WiggleSort wiggleSort = new WiggleSort();
//        wiggleSort.wiggleSort(new int[]{3, 5, 2, 1, 6, 4});

//        BubbleSort bubbleSort = new BubbleSort();
//        bubbleSort.bubbleSortTwo(new int[]{5, 1, 4, 2, 8});

//        InsertionSort insertionSort = new InsertionSort();
//        insertionSort.insertionSort(new int[]{5, 1, 4, 2, 8});

//        MergeSort mergeSort = new MergeSort();
//        mergeSort.sort(new int[]{5, 1, 4, 2, 8});

//        QuickSort quickSort = new QuickSort();
//        quickSort.sort(new int[]{5, 1, 4, 2, 8});

//        LongestConsecutiveSequence longestConsecutiveSequence = new LongestConsecutiveSequence();
//        longestConsecutiveSequence.longestConsecutive(new int[]{100, 1, 3, 200, 4, 5, 2});

//        PalindromicSubStrings palindromicSubStrings = new PalindromicSubStrings();
//        palindromicSubStrings.countSubstrings("abcb");

//        BestTimetoBuyAndSellStockWithCooldown bestTimetoBuyAndSellStockWithCooldown = new BestTimetoBuyAndSellStockWithCooldown();
//        bestTimetoBuyAndSellStockWithCooldown.maxProfit(new int[]{1,2,3,0,2});

//        ArithmeticSlices arithmeticSlices = new ArithmeticSlices();
//        arithmeticSlices.numberOfArithmeticSlices(new int[]{1, 2, 3});

//        RegularExpressionMatching regularExpressionMatching = new RegularExpressionMatching();
//        regularExpressionMatching.isMatch("aaabcd", "a*b.d");

//        ReverseWordsInAString reverseWordsInAString = new ReverseWordsInAString();
//        reverseWordsInAString.reverseWordsTwo("blue sky is bla");

        Interval interval1 = new Interval(0, 30);
        Interval interval2 = new Interval(5, 20);
        Interval interval3 = new Interval(15, 30);
        Interval interval4 = new Interval(30, 40);

//        MeetingRooms meetingRooms = new MeetingRooms();
//        meetingRooms.canAttendMeetingsTm(new Interval[]{interval1, interval2, interval3, interval4});

//        MeetingRoomII meetingRoomII = new MeetingRoomII();
//        meetingRoomII.minMeetingRoomsTmFindRange(new Interval[]{interval1, interval2, interval3, interval4});

//        BinaryTreeVerticalOrderTraversal binaryTreeVerticalOrderTraversal = new BinaryTreeVerticalOrderTraversal();
//        binaryTreeVerticalOrderTraversal.verticalOrderWoHelper(node1);

//        MinimumWindowSubstring minimumWindowSubstring = new MinimumWindowSubstring();
//        minimumWindowSubstring.minWindow("ADOBECODEBANC", "ABC");

//        CourseSchedule courseSchedule = new CourseSchedule();
//        courseSchedule.canFinishTwo(4, new int[][]{{1, 0}, {2, 0}, {3, 1}, {3, 2}});

//        CourseScheduleII courseScheduleII = new CourseScheduleII();
//        courseScheduleII.findOrder(4, new int[][]{{0, 1}, {2, 0}, {3, 1}, {3, 2}});

//        CourseScheduleIII courseScheduleIII = new CourseScheduleIII();
//        courseScheduleIII.scheduleCourse(new int[][]{{100, 200}, {1000, 1100}, {300, 1200}, {300, 1500}, {2000, 3200}});

//        ReconstructItinerary reconstructItinerary = new ReconstructItinerary();
//        reconstructItinerary.findItinerary(new String[][]{{"JFK", "SFO"}, {"JFK", "ATL"}, {"SFO", "ATL"}, {"ATL", "JFK"}, {"ATL", "SFO"}});

//        EvaluateDivision evaluateDivision = new EvaluateDivision();
//        evaluateDivision.calcEquationGraph(new String[][]{{"a", "b"}, {"b", "c"}}, new double[]{2.0, 3.0},
//                new String[][]{{"a", "c"}, {"b", "a"}, {"a", "e"}, {"c", "a"}, {"x", "x"}});

//        CouplesHoldingHands couplesHoldingHands = new CouplesHoldingHands();
//        couplesHoldingHands.minSwapsCouples(new int[]{0, 2, 1, 4, 5, 3});
//        couplesHoldingHands.miniSwapsArray(new int[]{2, 3, 1, 0, 5, 4});

//        FibonnaciNumber fibonnaciNumber = new FibonnaciNumber();
//        fibonnaciNumber.fib(9);

//        FirstMissingPositive firstMissingPositive = new FirstMissingPositive();
//        firstMissingPositive.firstMissingPositive(new int[]{3, 4, 5, -1, 1, -2});
//        firstMissingPositive.firstMissingPositive(new int[]{7, 8, 9, 10, 11});

//        PourWater pourWater = new PourWater();
//        pourWater.pourWater(new int[]{2, 1, 1, 2, 1, 2, 2}, 4, 3);

//        AlienDictionary alienDictionary = new AlienDictionary();
//        alienDictionary.alienOrderThree(new String[]{"wrt",
//                "wrf",
//                "er",
//                "ett",
//                "rftt"});

//        GraphValidTree graphValidTree = new GraphValidTree();
//        graphValidTree.validTreeUf(5, new int[][]{{0, 1}, {1, 2}, {2, 3}, {1, 3}, {1, 4}});

//        EditDistance editDistance = new EditDistance();
//        editDistance.minDistance("abc", "adc");

//        IntegerToEnglishWords integerToEnglishWords = new IntegerToEnglishWords();
//        integerToEnglishWords.numberToWords(654321);

//        MultiplyStrings multiplyStrings = new MultiplyStrings();
//        multiplyStrings.multiply("123", "456");

//        PalindromePairs palindromePairs = new PalindromePairs();
//        palindromePairs.palindromePairsTrie(new String[]{"abcd", "dcba", "lls", "sss", "sssll"});

//        LongestAbsoluteFilePath longestAbsoluteFilePath = new LongestAbsoluteFilePath();
//        longestAbsoluteFilePath.lengthLongestPathTwo("dir\n\tsubdir1\n\t\tfile1.ext\n\t\tsubsubdir1\n\tsubdiTwo\n\t\tsubsubdirTwo2\n\t\t\tfile2.ext");

//        DivideTwoIntegers divideTwoIntegers = new DivideTwoIntegers();
//        divideTwoIntegers.divideTwo(17, 3);

//        MaxPointsOnaLine maxPointsOnaLine = new MaxPointsOnaLine();
//        maxPointsOnaLine.maxPoints(new Point[]{new Point(4, 0), new Point(4, -1), new Point(4, 5)});

//        PowXN powXN = new PowXN();
//        System.out.println(powXN.myPowThree(4, 9));

//        NumberOfDIgitOne numberOfDIgitOne = new NumberOfDIgitOne();
//        numberOfDIgitOne.countDigitOne(3141092);

//        QueueReconstructionByHeight queueReconstructionByHeight = new QueueReconstructionByHeight();
//        queueReconstructionByHeight.reconstructQueue(new int[][]{{7, 0}, {4, 4}, {7, 1}, {5, 0}, {6, 1}, {5, 2}});

//        MaximumGap maximumGap = new MaximumGap();
//        maximumGap.maximumGapRadixSort(new int[]{3, 6, 9, 10, 1, 15});

//        WordBreakII wordBreakII = new WordBreakII();
//        wordBreakII.wordBreakTwo("penapplepineapple", Arrays.asList("apple", "pen", "applepen", "pine", "pineapple"));
//        wordBreakII.wordBreakTwo("a", Arrays.asList(""));

//        RemoveDuplicateLetters removeDuplicateLetters = new RemoveDuplicateLetters();
//        removeDuplicateLetters.removeDuplicateLetters("bcabcb");

//        BurstBallons burstBallons = new BurstBallons();
//        burstBallons.maxCoins(new int[]{3, 1, 5, 8});

//        DifferentWaysToAddParentheses differentWaysToAddParentheses = new DifferentWaysToAddParentheses();
//        differentWaysToAddParentheses.diffWaysToComputeTwo("2*3-4*5");

//        BestTimeToBuyAndSellStockII bestTimeToBuyAndSellStockII = new BestTimeToBuyAndSellStockII();
//        bestTimeToBuyAndSellStockII.maxProfitTwoII(new int[]{7, 1, 5, 3, 6, 4});

//        BestTimeToBuyAndSellStockIII bestTimeToBuyAndSellStockIII = new BestTimeToBuyAndSellStockIII();
//        bestTimeToBuyAndSellStockIII.maxProfit(new int[]{3, 3, 5, 0, 0, 3, 1, 4});

//        TheSkylineProblem theSkylineProblem = new TheSkylineProblem();
//        theSkylineProblem.getSkyline(new int[][]{{2, 9, 10}, {3, 7, 15}, {5, 12, 12}, {15, 20, 10}, {19, 24, 8}});
//        theSkylineProblem.getSkylineLC(new int[][]{{1, 3, 3}, {2, 4, 4}, {5, 6, 1}});

//        LexicographicalNumbers lexicographicalNumbers = new LexicographicalNumbers();
//        lexicographicalNumbers.lexicalOrder(23);

//        EliminationGame eliminationGame = new EliminationGame();
//        eliminationGame.lastRemaining(24);

//        TreeNode recover = new TreeNode(10);
//        recover.left = new TreeNode(6);
//        recover.left.left = new TreeNode(15);
//        recover.left.right = new TreeNode(9);
//        recover.right = new TreeNode(12);
//        recover.right.left = new TreeNode(11);
//        recover.right.right = new TreeNode(2);
//
//        RecoveryBinarySearchTree recoveryBinarySearchTree = new RecoveryBinarySearchTree();
//        recoveryBinarySearchTree.recoverTree(recover);

//        NQueens nQueens = new NQueens();
//        nQueens.solveNQueens(4);

//        LongestValidParentheses longestValidParentheses = new LongestValidParentheses();
//        longestValidParentheses.longestValidParenthesesTwo(")()(()))");

//        DistinctSubsequences distinctSubsequences = new DistinctSubsequences();
//        distinctSubsequences.numDistinct("acdbeafc", "ab");

//        SearchTwoDMatrixII searchTwoDMatrixII = new SearchTwoDMatrixII();
//        searchTwoDMatrixII.searchMatrix(new int[][]{
//                {1, 4, 7, 11, 15},
//                {2, 5, 8, 12, 19},
//                {3, 6, 9, 16, 22},
//                {10, 13, 14, 17, 24},
//                {18, 21, 23, 26, 30}
//        }, 9);

//        BasicCalculator basicCalculator = new BasicCalculator();
//        basicCalculator.calculateTwo("(1+(4+5+2)-3)+(6+8)");

//        BasicCalculatorII basicCalculatorII = new BasicCalculatorII();
//        basicCalculatorII.calculateTwo("3+2* 2 -9/3");

//        BasicCalculatorIII basicCalculatorIII = new BasicCalculatorIII();
//        basicCalculatorIII.calculate("2*(5+5*2)/3+(6/2+8)");

//        AdditiveNumber additiveNumber = new AdditiveNumber();
//        additiveNumber.isAdditiveNumberTwo("199100199");

//        SubstringWithConcatenationOfAllWords substringWithConcatenationOfAllWords = new SubstringWithConcatenationOfAllWords();
//        substringWithConcatenationOfAllWords.findSubstring("barfoothefoobarman", new String[]{"bar", "foo"});

//        RestoreIPAddresses restoreIPAddresses = new RestoreIPAddresses();
//        restoreIPAddresses.restoreIpAddresses("25525511135");

        ListNode reverseKGroup = new ListNode(1);
        reverseKGroup.next = new ListNode(2);
        reverseKGroup.next.next = new ListNode(3);
        reverseKGroup.next.next.next = new ListNode(4);
        reverseKGroup.next.next.next.next = new ListNode(5);
        reverseKGroup.next.next.next.next.next = new ListNode(6);

//        ReverseNodesInKGroup reverseNodesInKGroup = new ReverseNodesInKGroup();
//        reverseNodesInKGroup.reverseKGroup(reverseKGroup, 2);

//        char[][] board = new char[][]{
//                {'0', '0', '0', '0', '0', 'Y', '0'},
//                {'0', '0', '0', '0', '0', 'Y', 'Y'},
//                {'0', '0', '0', '0', 'R', 'Y', 'R'},
//                {'0', '0', '0', '0', 'Y', 'Y', 'Y'},
//                {'0', '0', '0', 'R', 'R', 'R', 'R'}
//        };
//        ap.findGameStatus(board);


//        Metaphone metaphone = new Metaphone();
//        String encodedMetaphone1 = metaphone.encode("Jim Tang");
//        String encodedMetaphone2 = metaphone.encode("James Tang");

//        LevenshteinDistance levenshteinDistance = new LevenshteinDistance(1);
//        int levenshteinDistance1 = levenshteinDistance.apply("abcabc", "abccba");

//        System.out.println(encodedMetaphone1 + encodedMetaphone2);
//        System.out.println(levenshteinDistance1);

//        int[] spinners = new int[]{2, 2, 3, 4, 5};
//        waitingTime(spinners, 3);

        // [-77.475793, 39.719623], [-80.524269, 39.721209], [-80.520592, 41.986872],
        // [-74.705273, 41.375059], [-75.142901, 39.881602], [-77.475793, 39.719623]
//        Polygon2D polygon2D = new Polygon2D();
//        polygon2D.addPoint(-77.475793, 39.719623);
//        polygon2D.addPoint(-80.524269, 39.721209);
//        polygon2D.addPoint(-80.520592, 41.986872);
//        polygon2D.addPoint(-74.705273, 41.375059);
//        polygon2D.addPoint(-75.142901, 39.881602);
//        polygon2D.addPoint(-77.475793, 39.719623);
//
//        System.out.println(polygon2D.containsTwo(-77.036133, 40.513799));
//
//        Polygon polygon = new Polygon();
//
//        double[] pointsX = new double[]{-77.475793, -80.524269, -80.520592, -74.705273, -75.142901, -77.475793};
//        double[] pointsY = new double[]{39.719623, 39.721209, 41.986872, 41.375059, 39.881602, 39.719623};
//
//        Path2D path2D = new Path2D.Double();
//        path2D.moveTo(pointsX[0], pointsY[0]);
//        for (int i = 0; i < pointsX.length; i++) {
//            path2D.lineTo(pointsX[i], pointsY[i]);
//        }
//        path2D.closePath();
//        System.out.println(path2D.contains(-77.036133, 40.513799));

//        PowerOfTwo powerOfTwo = new PowerOfTwo();
//        System.out.println(powerOfTwo.isPowerOfTwo(4));

//        Scanner sc = new Scanner(System.in);
//        while (sc.hasNext()) {
//            System.out.println("next is " + sc.nextInt());
//        }
//        String str = sc.nextLine();
//        int n = Integer.parseInt(str.split(" ")[0]);
//        int m = Integer.parseInt(str.split(" ")[1]);
//        int opCounter = 0;
//        ListMax lm = new ListMax(n);
//        //If I remember it right these were the constraints for the n and m values.
//        if (n >= 3 && n <= 10000000 && m >= 1 && m <= 1000000) {
//            while (opCounter != m) {
//                String line = sc.nextLine();
//                int a = Integer.parseInt(line.split(" ")[0]);
//                int b = Integer.parseInt(line.split(" ")[1]);
//                int k = Integer.parseInt(line.split(" ")[2]);
//                //If I remember it right these were the constraints for the a, b and k values.
//                if (a >= 1 && a <= n && b >= 1 && b <= n && k >= 1 && k <= 1000000000) {
//                    lm.doOperation(a, b, k);
//                }
//                opCounter++;
//            }
//        }
//        System.out.println("Maximum value in the final list: " + lm.listMax());

//        maxMoney(3, 3);

//        commandCount(Arrays.asList("abc:/b1c\\xy", "w:/a\\bc::/12\\xyz"));

//        MinimumPartition minimumPartition = new MinimumPartition();
//        minimumPartition.findMin(new int[]{1, 6, 11, 5});

//        MaximumWidthOfBinaryTree maximumWidthOfBinaryTree = new MaximumWidthOfBinaryTree();
//        maximumWidthOfBinaryTree.widthOfBinaryTree(mainTree);

//        MinimumASCIIDeleteSumForTwoStrings minimumASCIIDeleteSumForTwoStrings = new MinimumASCIIDeleteSumForTwoStrings();
//        minimumASCIIDeleteSumForTwoStrings.minimumDeleteSumTwo("delete", "leet");

//        LengthOfLongestFibonacciSubsequence lengthOfLongestFibonacciSubsequence = new LengthOfLongestFibonacciSubsequence();
//        lengthOfLongestFibonacciSubsequence.lenLongestFibSubseqDp(new int[]{1, 3, 7, 11, 12, 14, 18});

//        BestTimetoBuyAndSellStockWithTransactionFee bestTimetoBuyAndSellStockWithTransactionFee = new BestTimetoBuyAndSellStockWithTransactionFee();
//        bestTimetoBuyAndSellStockWithTransactionFee.maxProfit(new int[]{1, 3, 2, 8, 4, 9}, 2);

//        OnesAndZeroes onesAndZeroes = new OnesAndZeroes();
//        onesAndZeroes.findMaxForm(new String[]{"10", "0001", "111001", "1", "0"}, 5, 3);

//        NextClosestTime nextClosestTime = new NextClosestTime();
//        nextClosestTime.nextClosestTimeTwo("13:47");

//        RangeAddition rangeAddition = new RangeAddition();
//        rangeAddition.getModifiedArray(5, new int[][]{{1, 3, 2}, {2, 4, 3}, {0, 2, -2}});

//        NumberOfMatchingSubsequences numberOfMatchingSubsequences = new NumberOfMatchingSubsequences();
//        numberOfMatchingSubsequences.numMatchingSubseqTwo("abcde", new String[]{"f", "bb", "acd", "ace"});

//        SequenceReconstruction sequenceReconstruction = new SequenceReconstruction();
//        sequenceReconstruction.sequenceReconstruction(new int[]{4, 1, 5, 2, 6, 3},
//                Arrays.asList(Arrays.asList(5, 2, 6, 3), Arrays.asList(4, 1, 5, 2)));

//        PalindromicRanges palindromicRanges = new PalindromicRanges();
//        palindromicRanges.PalindromicRanges(1, 7);

//        UniqueEmailAddresses uniqueEmailAddresses = new UniqueEmailAddresses();
//        uniqueEmailAddresses.numUniqueEmails(new String[]{"qweqwe@qwe.com"});

        Node nAryNode1 = new Node(1, new ArrayList<>());
        Node nAryNode2 = new Node(2, new ArrayList<>());
        Node nAryNode3 = new Node(3, new ArrayList<>());
        Node nAryNode4 = new Node(4, new ArrayList<>());
        Node nAryNode5 = new Node(5, new ArrayList<>());
        Node nAryNode6 = new Node(6, new ArrayList<>());
        nAryNode1.children.addAll(Arrays.asList(nAryNode3, nAryNode2, nAryNode4));
        nAryNode3.children.addAll(Arrays.asList(nAryNode5, nAryNode6));

//        NAryTreePostorderTraversal nAryTreePostorderTraversal = new NAryTreePostorderTraversal();
//        nAryTreePostorderTraversal.postorder(nAryNode1);

//        NAryTreePreorderTraversal nAryTreePreorderTraversal = new NAryTreePreorderTraversal();
//        nAryTreePreorderTraversal.preorder(nAryNode1);

//        LeafSimilarTrees leafSimilarTrees = new LeafSimilarTrees();
//        leafSimilarTrees.leafSimilarStack(mainTree, mainTree);

//        IncreasingOrderSearchTree increasingOrderSearchTree = new IncreasingOrderSearchTree();
//        increasingOrderSearchTree.increasingBSTIter(node1);

//        SubarraySumEqualsK subarraySumEqualsK = new SubarraySumEqualsK();
//        subarraySumEqualsK.subarraySumTwo(new int[]{1, 3, 4, 6, 8, 3, 2}, 13);

//        FindPermutation findPermutation = new FindPermutation();
//        findPermutation.findPermutationStackReversingSubArray("IIDDDIID");

//        MaxChunksToMakeSorted maxChunksToMakeSorted = new MaxChunksToMakeSorted();
//        maxChunksToMakeSorted.maxChunksToSortedTwo(new int[]{3, 4, 0, 1, 2});

//        MinimumAbsoluteDifferenceInBST minimumAbsoluteDifferenceInBST = new MinimumAbsoluteDifferenceInBST();
//        minimumAbsoluteDifferenceInBST.getMinimumDifferenceThree(node1);

//        NumberOfBoomerangs numberOfBoomerangs = new NumberOfBoomerangs();
//        numberOfBoomerangs.numberOfBoomerangs(new int[][]{{0, 0}, {1, 0}, {1, 1}, {2, 0}});

//        ShoppingOffers shoppingOffers = new ShoppingOffers();
//        shoppingOffers.shoppingOffers(Arrays.asList(2, 3, 4), Arrays.asList(Arrays.asList(1, 1, 0, 4),
//                Arrays.asList(2, 2, 1, 9)), Arrays.asList(1, 2, 1));

//        FindKPairsWithSmallestSums findKPairsWithSmallestSums = new FindKPairsWithSmallestSums();
//        findKPairsWithSmallestSums.kSmallestPairs(new int[]{1, 7, 11, 16}, new int[]{2, 9, 10, 15}, 4);

//        FruitIntoBaskets fruitIntoBaskets = new FruitIntoBaskets();
//        fruitIntoBaskets.totalFruit(new int[]{3, 3, 3, 1, 2, 1, 1, 2, 3, 3, 4});

//        BackspaceStringCompare backspaceStringCompare = new BackspaceStringCompare();
//        backspaceStringCompare.backspaceCompareThree("aab##c", "ad#c");

//        KEmptySlots kEmptySlots = new KEmptySlots();
//        kEmptySlots.kEmptySlotsTreeSet(new int[]{4, 5, 1, 3, 2}, 4);

//        MinimumCostToHireKWorkers minimumCostToHireKWorkers = new MinimumCostToHireKWorkers();
//        minimumCostToHireKWorkers.mincostToHireWorkers(new int[]{10, 20, 5}, new int[]{70, 50, 30}, 2);

//        MostStonesRemovedWithSameRowOrColumn mostStonesRemovedWithSameRowOrColumn = new MostStonesRemovedWithSameRowOrColumn();
//        mostStonesRemovedWithSameRowOrColumn.removeStones(new int[][]{{0, 0}, {0, 2}, {1, 1}, {2, 0}, {2, 2}});

//        BullsAndCows bullsAndCows = new BullsAndCows();
//        bullsAndCows.getHint("145637", "615171");

//        FindAndReplaceInString findAndReplaceInString = new FindAndReplaceInString();
//        findAndReplaceInString.findReplaceStringTwo("abcd", new int[]{0, 2}, new String[]{"a", "cd"},
//                new String[]{"eee", "ffff"});

//        MinimumAreaRectangle minimumAreaRectangle = new MinimumAreaRectangle();
//        minimumAreaRectangle.minAreaRect(new int[][]{{1, 1}, {1, 3}, {3, 1}, {3, 3}, {2, 2}});

//        SwapAdjacentInLRString swapAdjacentInLRString = new SwapAdjacentInLRString();
//        swapAdjacentInLRString.canTransform("RXXLRXRXL", "XRLXXRRLX");

//        RLEIterator rleIterator = new RLEIterator(new int[]{3, 8, 1, 9, 2, 5});
//        rleIterator.next(2);
//        rleIterator.next(3);
//        rleIterator.next(1);
//        rleIterator.next(2);

//        MinimumWindowSubsequence minimumWindowSubsequence = new MinimumWindowSubsequence();
//        minimumWindowSubsequence.minWindowDp("abcdebdde", "bde");
//        minimumWindowSubsequence.minWindowIntArr(new int[]{1, 2, 3, 5, 8, 7, 6, 9, 5, 7, 3, 0, 5, 2, 3, 4, 4, 7}, new int[]{5, 7});

//        ExpressiveWords expressiveWords = new ExpressiveWords();
//        expressiveWords.expressiveWords("heeellooo", new String[]{"hello", "hi", "helo"});

//        RandomPickWithWeight randomPickWithWeight = new RandomPickWithWeight(new int[]{2, 5, 3, 4});
//        randomPickWithWeight.pickIndex();
//        randomPickWithWeight.pickIndex();

//        LongestWordInDictionaryThroughDeleting longestWordInDictionaryThroughDeleting = new LongestWordInDictionaryThroughDeleting();
//        longestWordInDictionaryThroughDeleting.findLongestWordSort("abpcplea",
//                new ArrayList<>(Arrays.asList("ale", "apple", "monkey", "plea")));

//        HandOfStraights handOfStraights = new HandOfStraights();
//        handOfStraights.isNStraightHandTwo(new int[]{1, 2, 3, 6, 2, 3, 4, 7, 8}, 3);

//        MyCalendarTwo myCalendarTwo = new MyCalendarTwo();
//        myCalendarTwo.book(10, 20);
//        myCalendarTwo.book(50, 60);
//        myCalendarTwo.book(10, 40);
//        myCalendarTwo.book(5, 15);
//        myCalendarTwo.book(5, 10);
//        myCalendarTwo.book(25, 55);

//        MergeInterval mergeInterval = new MergeInterval();
//        mergeInterval.mergeTm(Arrays.asList(new Interval(1, 3), new Interval(2, 6),
//                new Interval(8, 10), new Interval(15, 18)));

//        InsertInterval insertInterval = new InsertInterval();
//        insertInterval.insert(Arrays.asList(new Interval(1, 3), new Interval(4, 6),
//                new Interval(8, 10), new Interval(15, 18)), new Interval(2, 5));

//        RedundantConnection redundantConnection = new RedundantConnection();
//        redundantConnection.findRedundantConnection(new int[][]{{1, 2}, {2, 3}, {3, 4}, {1, 4}, {1, 5}});

//        RedundantConnectionII redundantConnectionII = new RedundantConnectionII();
//        redundantConnectionII.findRedundantDirectedConnectionTwo(new int[][]{{1, 2}, {2, 3}, {3, 4}, {4, 1}, {1, 5}});

//        SentenceScreenFitting sentenceScreenFitting = new SentenceScreenFitting();
//        sentenceScreenFitting.wordsTyping(new String[]{"abc", "de", "f"}, 4, 6);

//        NumberOfCornerRectangles numberOfCornerRectangles = new NumberOfCornerRectangles();
//        numberOfCornerRectangles.countCornerRectanglesDp(new int[][]{
//                {0, 0, 1, 1, 0},
//                {0, 1, 1, 1, 1},
//                {1, 0, 1, 1, 0},
//                {0, 0, 0, 0, 0}});

//        ChampagneTower champagneTower = new ChampagneTower();
//        champagneTower.champagneTower(10, 4, 2);

//        NumberOfDistinctIslands numberOfDistinctIslands = new NumberOfDistinctIslands();
//        numberOfDistinctIslands.numDistinctIslands(new int[][]{
//                {1, 1, 0, 1, 1}, {1, 0, 0, 0, 0}, {0, 0, 0, 0, 1}, {1, 1, 0, 1, 1}});


//        ExamRoom examRoom = new ExamRoom(10);
//        examRoom.seat();
//        examRoom.seat();
//        examRoom.seat();
//        examRoom.seat();
//        examRoom.leave(4);
//        examRoom.seat();

//        LongestMountainInArray longestMountainInArray = new LongestMountainInArray();
//        longestMountainInArray.longestMountainOnePass(new int[]{2, 1, 4, 7, 3, 2, 5});

//        OutputContestMatches outputContestMatches = new OutputContestMatches();
//        outputContestMatches.findContestMatch(8);

        TreeNode consecutiveSequenceII = new TreeNode(3);
        consecutiveSequenceII.left = new TreeNode(2);
        consecutiveSequenceII.left.left = new TreeNode(5);
        consecutiveSequenceII.left.right = new TreeNode(1);
        consecutiveSequenceII.right = new TreeNode(4);
        consecutiveSequenceII.right.left = new TreeNode(5);
        consecutiveSequenceII.right.right = new TreeNode(9);

//        BinaryTreeLongestConsecutiveSequenceII binaryTreeLongestConsecutiveSequenceII = new BinaryTreeLongestConsecutiveSequenceII();
//        binaryTreeLongestConsecutiveSequenceII.longestConsecutive(consecutiveSequenceII);


//        SolveTheEquation solveTheEquation = new SolveTheEquation();
//        solveTheEquation.solveEquation("2x+3x-6=x+2");

//        LongestRepeatingCharacterReplacement longestRepeatingCharacterReplacement = new LongestRepeatingCharacterReplacement();
//        longestRepeatingCharacterReplacement.characterReplacement("AABCDEAFAA", 2);

//        LongestPalindromicSubsequence longestPalindromicSubsequence = new LongestPalindromicSubsequence();
//        longestPalindromicSubsequence.longestPalindromeSubseqDpTwo("abecsebbb");

//        New21Game new21Game = new New21Game();
//        new21Game.new21Game(21, 17, 10);

//        EncodeAndDecodeStrings encodeAndDecodeStrings = new EncodeAndDecodeStrings();
//        encodeAndDecodeStrings.encode(Arrays.asList("", ""));
//        encodeAndDecodeStrings.decode("0/0/");

//        SplitArrayIntoConsecutiveSequences splitArrayIntoConsecutiveSequences = new SplitArrayIntoConsecutiveSequences();
//        splitArrayIntoConsecutiveSequences.isPossible(new int[]{1, 2, 3, 3, 4, 4, 5, 6});

//        NumArrayII numArrayII = new NumArrayII(new int[]{1, 3, 5, 7, 9});
//        numArrayII.sumRange(0, 3);
//        numArrayII.update(4, 10);
//        numArrayII.sumRange(2, 4);

//        CountOfSmallerNumbersAfterItself coundOfSmallerNumbersAfterItself = new CountOfSmallerNumbersAfterItself();
//        coundOfSmallerNumbersAfterItself.countSmaller(new int[]{7, 5, 2, 6, 2, 1});

//        CountOfRangeSum countOfRangeSum = new CountOfRangeSum();
//        countOfRangeSum.countRangeSum(new int[]{-2, 5, 1}, -2, 2);

//        SplitBST splitBST = new SplitBST();
//        splitBST.splitBST(node1, 9);

//        ExclusiveTimeOfFunctions exclusiveTimeOfFunctions = new ExclusiveTimeOfFunctions();
//        exclusiveTimeOfFunctions.exclusiveTime(2, Arrays.asList("0:start:0", "0:start:2", "0:end:5", "1:start:7",
//                "1:end:7", "0:end:8"));

//        ValidateStackSequence validateStackSequence = new ValidateStackSequence();
//        validateStackSequence.validateStackSequences(new int[]{1, 2, 3, 4, 5}, new int[]{4, 5, 3, 2, 1});

//        FractionToRecurringDecimal fractionToRecurringDecimal = new FractionToRecurringDecimal();
//        fractionToRecurringDecimal.fractionToDecimal(4, 333);

//        TopKFrequentElements topKFrequentElements = new TopKFrequentElements();
//        topKFrequentElements.topKFrequent(new int[]{1, 2, 1, 1, 2, 3, 4}, 2);

//        PredictTheWinner predictTheWinner = new PredictTheWinner();
//        predictTheWinner.PredictTheWinnerDp(new int[]{1, 1, 1, 1, 1});

//        PartitionEqualSubsetSum partitionEqualSubsetSum = new PartitionEqualSubsetSum();
//        partitionEqualSubsetSum.canPartition(new int[]{1, 5, 11, 5});

//        CanIWin canIWin = new CanIWin();
//        System.out.println(canIWin.canIWin(3, 4));

//        CarFleet carFleet = new CarFleet();
//        carFleet.carFleet(12, new int[]{10, 8, 0, 5, 3}, new int[]{2, 4, 1, 1, 3});

//        AddAndSearchWord addAndSearchWord = new AddAndSearchWord();
//        addAndSearchWord.addWordTwo("bad");
//        addAndSearchWord.addWordTwo("dad");
//        addAndSearchWord.addWordTwo("mad");
//        addAndSearchWord.searchTwo("pad");
//        addAndSearchWord.searchTwo("bad");
//        addAndSearchWord.searchTwo(".ad");
//        addAndSearchWord.searchTwo("b..");

//        BattleshipsInaBoard battleshipsInaBoard = new BattleshipsInaBoard();
//        battleshipsInaBoard.countBattleships(new char[][]{{'X','.','.','X'},
//                {'X','.','.','X'},
//                {'.','.','.','X'},
//                {'.','.','.','X'}});

//        DiagonalTraverse diagonalTraverse = new DiagonalTraverse();
//        diagonalTraverse.findDiagonalOrder(new int[][]{{1, 2, 3}, {4, 5, 6}, {7, 8, 9}});

//        ConcatenatedWords concatenatedWords = new ConcatenatedWords();
//        concatenatedWords.findAllConcatenatedWordsInADict(new String[]{"cat", "cats", "catsdogcats", "dog",
//                "dogcatsdog", "hippopotamuses", "rat", "ratcatdogcat"});

//        TheMaze theMaze = new TheMaze();
//        theMaze.hasPath(new int[][]{
//                {0, 0, 1, 0, 0}, {0, 0, 0, 0, 0}, {0, 0, 0, 1, 0}, {1, 1, 0, 1, 1}, {0, 0, 0, 0, 0}
//        }, new int[]{0, 4}, new int[]{4, 4});

//        TheMazeIII theMazeIII = new TheMazeIII();
//        theMazeIII.findShortestWay(new int[][]{
//                {0, 0, 0, 0, 0}, {1, 1, 0, 0, 1}, {0, 0, 0, 0, 0}, {0, 1, 0, 0, 1}, {0, 1, 0, 0, 0}
//        }, new int[]{4, 3}, new int[]{0, 1});

//        NumberOfConnectedComponentsInAnUndirectedGraph numberOfConnectedComponentsInAnUndirectedGraph = new NumberOfConnectedComponentsInAnUndirectedGraph();
//        numberOfConnectedComponentsInAnUndirectedGraph.countComponentsUf(5, new int[][]{{0, 1}, {1, 2}, {2, 0}, {3, 4}});

//        NumberOfIslands numberOfIslands = new NumberOfIslands();
//        numberOfIslands.numIslandsUf(new char[][]{{'1', '1', '0', '0', '0'}, {'1', '1', '0', '0', '0'},
//                {'0', '0', '1', '0', '0'}, {'0', '0', '0', '1', '1'}});

//        NumberOfIslandsII numberOfIslandsII = new NumberOfIslandsII();
//        numberOfIslandsII.numIslands2(3, 3, new int[][]{{0, 0}, {0, 1}, {1, 2}, {2, 1}, {2, 2}});

//        GroupShiftedStrings groupShiftedStrings = new GroupShiftedStrings();
//        groupShiftedStrings.groupStrings(new String[]{"abc", "ad", "a", "z"});

//        PascalsTriangleI pascalsTriangleI = new PascalsTriangleI();
//        pascalsTriangleI.generateTwo(5);

//        PascalsTriangleII pascalsTriangleII = new PascalsTriangleII();
//        pascalsTriangleII.getRow(6);

//        LongestAbsoluteFilePath longestAbsoluteFilePath = new LongestAbsoluteFilePath();
//        longestAbsoluteFilePath.lengthLongestPathTwo("dir\n\tsubdir1\n\t\tfile1.ext\n\t\tsubsubdir1\n\tsubdir2\n\t\tsubsubdir2\n\t\t\tfile2.ext");

//        ZigzagIterator zigzagIterator = new ZigzagIterator(Arrays.asList(1, 2, 3), Arrays.asList(4, 5, 6));
//        zigzagIterator.next();
//        zigzagIterator.next();
//        zigzagIterator.next();
//        zigzagIterator.next();

//        AccountMerge accountMerge = new AccountMerge();
//        accountMerge.accountsMergeDfs(Arrays.asList(
//                Arrays.asList("John", "johnsmith@mail.com", "john00@mail.com"),
//                Arrays.asList("John", "johnnybravo@mail.com"),
//                Arrays.asList("John", "johnsmith@mail.com", "john_newyork@mail.com"),
//                Arrays.asList("Mary", "mary@mail.com")));

//        MaxIncreaseToKeepCitySkyline maxIncreaseToKeepCitySkyline = new MaxIncreaseToKeepCitySkyline();
//        maxIncreaseToKeepCitySkyline.maxIncreaseKeepingSkyline(new int[][]{
//                {3, 0, 8, 4}, {2, 4, 5, 7}, {9, 2, 6, 3}, {0, 3, 1, 0}
//        });

//        FlipStringToMonotoneIncreasing flipStringToMonotoneIncreasing = new FlipStringToMonotoneIncreasing();
//        flipStringToMonotoneIncreasing.minFlipsMonoIncr("00100110");

//        PartitionToKEqualSumSubsets partitionToKEqualSumSubsets = new PartitionToKEqualSumSubsets();
//        partitionToKEqualSumSubsets.canPartitionKSubsetsTwo(new int[]{4, 3, 2, 3, 5, 2, 1}, 4);

//        KClosestPointsToOrigin kClosestPointsToOrigin = new KClosestPointsToOrigin();
//        kClosestPointsToOrigin.kClosest(new int[][]{{3, 3}, {5, -1}, {-2, 4}}, 2);

//        PriorityQueue<Integer> pq = new PriorityQueue<>((x, y) -> y - x);
//        pq.offer(1);
//        pq.offer(3);
//        pq.offer(5);
//        pq.offer(7);

//        XOfAKindInADeckOfCards xOfAKindInADeckOfCards = new XOfAKindInADeckOfCards();
//        xOfAKindInADeckOfCards.hasGroupsSizeX(new int[]{1, 1, 2, 2, 2, 3, 4});

//        PermutationSequence permutationSequence = new PermutationSequence();
//        permutationSequence.getPermutationTwo(4, 9);

//        MinimumSizeSubarraySum minimumSizeSubarraySum = new MinimumSizeSubarraySum();
//        minimumSizeSubarraySum.minSubArrayLen(7, new int[]{2, 3, 1, 2, 4, 3});

//        TopVotedCandidate topVotedCandidate = new TopVotedCandidate(new int[]{0, 1, 1, 0, 0, 1, 0}, new int[]{0, 5, 10, 15, 20, 25, 30});
//        topVotedCandidate.q(3);
//        topVotedCandidate.q(12);
//        topVotedCandidate.q(25);
//        topVotedCandidate.q(30);

        ListNode plusOne = new ListNode(8);
        plusOne.next = new ListNode(9);
        plusOne.next.next = new ListNode(9);
        plusOne.next.next.next = new ListNode(9);

//        PlusOneLinkedList plusOneLinkedList = new PlusOneLinkedList();
//        plusOneLinkedList.plusOne(plusOne);

//        PalindromePermutationII palindromePermutationII = new PalindromePermutationII();
//        palindromePermutationII.generatePalindromesTwo("aaaabbc");

//        WildcardMatching wildcardMatching = new WildcardMatching();
//        wildcardMatching.isMatch("adceb", "*a*b");

//        WiggleSortII wiggleSortII = new WiggleSortII();
//        wiggleSortII.wiggleSort(new int[]{13, 2, 5, 5, 4, 6});

//        FindAllNumbersDisappearedInAnArray findAllNumbersDisappearedInAnArray = new FindAllNumbersDisappearedInAnArray();
//        findAllNumbersDisappearedInAnArray.findDisappearedNumbers(new int[]{4, 3, 2, 7, 8, 2, 3, 1});

//        BucketSort bucketSort = new BucketSort();
//        bucketSort.bucketSort(new int[]{6, 4, 3, 2, 5, 1, 2, 4});

//        RectangleAreaII rectangleAreaII = new RectangleAreaII();
//        rectangleAreaII.rectangleAreaTwo(new int[][]{{0, 0, 2, 2}, {1, 0, 2, 3}, {1, 0, 3, 1}});

//        DecodeWays decodeWays = new DecodeWays();
//        decodeWays.numDecodings("02421");

//        FirstUniqChar firstUniqChar = new FirstUniqChar();
//        firstUniqChar.firstUniqCharTwo("leetcode");

//        FindTheDuplicateNumber findTheDuplicateNumber = new FindTheDuplicateNumber();
//        findTheDuplicateNumber.findDuplicateTwo(new int[]{1, 2, 3, 2});

//        OddEvenJump oddEvenJump = new OddEvenJump();
//        oddEvenJump.oddEvenJumps(new int[]{5, 1, 3, 4, 2});

//        Candy candy = new Candy();
//        candy.candy(new int[]{1, 0, 3, 2, 5});

//        DesignSearchAutocompleteSystem designSearchAutocompleteSystem = new DesignSearchAutocompleteSystem(
//                new String[]{"i love you", "island", "ironman", "i love leetcode"}, new int[]{5, 3, 2, 2});
//        designSearchAutocompleteSystem.input('i');
//        designSearchAutocompleteSystem.input(' ');

//        CrackingTheSafe crackingTheSafe = new CrackingTheSafe();
//        crackingTheSafe.crackSafe(3, 2);

//        SplitArrayLargestSum splitArrayLargestSum = new SplitArrayLargestSum();
//        splitArrayLargestSum.splitArray(new int[]{7, 2, 5, 10, 8}, 2);

//        TwentyFourGame twentyFourGame = new TwentyFourGame();
//        twentyFourGame.judgePoint24(new int[]{4, 1, 8, 7});

//        OptimalAccountBalancing optimalAccountBalancing = new OptimalAccountBalancing();
//        optimalAccountBalancing.balanceGraphDp(new int[][]{{0, 1, 10}, {1, 0, 1}, {1, 2, 15}, {2, 0, 4}});
//        optimalAccountBalancing.balanceGraphDp(new int[][]{{0, 1, 10}, {1, 0, 10}, {1, 2, 5}, {2, 0, 5}, {3, 0, 25}, {3, 2, 15}, {2, 4, 5}, {4, 2, 5}});


//        FriendCircles friendCircles = new FriendCircles();
//        List<String> friend = new ArrayList<>(Arrays.asList("YYNN", "YYYN", "NYYN", "NNNY"));
//        friendCircles.friendCircles(friend);
//        friendCircles.findCircleNum(new int[][]{{1, 1, 0}, {1, 1, 2}, {0, 0, 1}});

//        RaceCar raceCar = new RaceCar();
//        raceCar.racecar(6);

//        EncodeStringWithShortestLength encodeStringWithShortestLength = new EncodeStringWithShortestLength();
//        encodeStringWithShortestLength.encode("aabcaabcd");

//        NumberOfDistinctIslandsII numberOfDistinctIslandsII = new NumberOfDistinctIslandsII();
//        numberOfDistinctIslandsII.numDistinctIslands2(new int[][]{{1, 1, 1, 0, 0}, {1, 0, 0, 0, 1},
//                {0, 1, 0, 0, 1}, {0, 1, 1, 1, 0}});

//        ReorganizeString reorganizeString = new ReorganizeString();
//        reorganizeString.reorganizeString("aabbbbcccc");

//        TagValidator tagValidator = new TagValidator();
//        tagValidator.isValid("<DIV>>>  ![cdata[]] <![CDATA[<div>]>]]>]]>>]</DIV>");

//        SpecialBinaryString specialBinaryString = new SpecialBinaryString();
//        specialBinaryString.makeLargestSpecial("11011000");

//        FrogJump frogJump = new FrogJump();
//        frogJump.canCross(new int[]{0, 1, 3, 5, 6, 8, 12, 17});

//        MinimizeMaxDistanceToGasStation minimizeMaxDistanceToGasStation = new MinimizeMaxDistanceToGasStation();
//        minimizeMaxDistanceToGasStation.minmaxGasDist(new int[]{10, 19, 25, 27, 56}, 3);

//        AddBoldTagInString addBoldTagInString = new AddBoldTagInString();
//        addBoldTagInString.addBoldTagArray("aaabbcc", new String[]{"aaa", "aab", "bc"});

//        RemoveComment removeComment = new RemoveComment();
//        removeComment.removeComments(new String[]{"/*Test program */", "int main()", "{ ",
//                "  // variable declaration ", "int a, b, c;", "/* This is a test",
//                "   multiline  ", "   comment for ", "   testing */", "a = b + c;", "}"});

//        LeastSubsequences leastSubsequences = new LeastSubsequences();
//        leastSubsequences.LeastSubsequences(new int[]{5, 2, 1, 4, 3, 6});

//        SalaryAdjustment salaryAdjustment = new SalaryAdjustment();
//        salaryAdjustment.getCap(new int[]{1, 2, 3, 4}, 13);

//        ExpressionAddOperators expressionAddOperators = new ExpressionAddOperators();
//        expressionAddOperators.addOperatorsTwo("246", 10);

//        DataStreamAsDisjointIntervals dataStreamAsDisjointIntervals = new DataStreamAsDisjointIntervals();
//        dataStreamAsDisjointIntervals.addNumTwo(1);
//        dataStreamAsDisjointIntervals.addNumTwo(4);
//        dataStreamAsDisjointIntervals.addNumTwo(7);
//        dataStreamAsDisjointIntervals.addNumTwo(2);
//        dataStreamAsDisjointIntervals.addNumTwo(6);
//        dataStreamAsDisjointIntervals.getIntervalsTwo();

//        LargestDivisibleSubset largestDivisibleSubset = new LargestDivisibleSubset();
//        largestDivisibleSubset.largestDivisibleSubset(new int[]{1, 2, 4, 7});

//        RotateFunction rotateFunction = new RotateFunction();
//        rotateFunction.maxRotateFunction(new int[]{4, 3, 2, 6});

//        ReconstructOriginalDigitsFromEnglish reconstructOriginalDigitsFromEnglish = new ReconstructOriginalDigitsFromEnglish();
//        reconstructOriginalDigitsFromEnglish.originalDigits("owoztneoertwo");

//        KthSmallestInLexicographicalOrder kthSmallestInLexicographicalOrder = new KthSmallestInLexicographicalOrder();
//        kthSmallestInLexicographicalOrder.findKthNumber(300, 128);

//        ArithmeticSlicesII arithmeticSlicesII = new ArithmeticSlicesII();
//        arithmeticSlicesII.numberOfArithmeticSlices(new int[]{2, 4, 6, 8, 10});

//        SlidingWindowMedian slidingWindowMedian = new SlidingWindowMedian();
//        slidingWindowMedian.medianSlidingWindowTs(new int[]{1, 3, -1, -3, 5, 3, 6, 7}, 3);
//        slidingWindowMedian.medianSlidingWindowTs(new int[]{2147483647, 2147483647}, 2);

//        ContinuousSubarraySum continuousSubarraySum = new ContinuousSubarraySum();
//        continuousSubarraySum.checkSubarraySum(new int[]{23, 2, 4, 6, 7}, 4);

//        ContiguousArray contiguousArray = new ContiguousArray();
//        contiguousArray.findMaxLength(new int[]{0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0});

//        FractionAdditionAndSubtraction fractionAdditionAndSubtraction = new FractionAdditionAndSubtraction();
//        fractionAdditionAndSubtraction.fractionAddition("1/3-1/2+1/5");

//        SmallestRange smallestRange = new SmallestRange();
//        smallestRange.smallestRangeThree(Arrays.asList(Arrays.asList(4, 10, 15, 24, 26), Arrays.asList(0, 9, 12, 20),
//                Arrays.asList(5, 18, 22, 30)));

//        FindKClosestElements findKClosestElements = new FindKClosestElements();
//        findKClosestElements.findClosestElementsTwo(new int[]{1, 3, 5, 7, 9, 11, 13, 15, 17, 19}, 3, 10);

//        ConsecutiveNumbersSum consecutiveNumbersSum = new ConsecutiveNumbersSum();
//        consecutiveNumbersSum.consecutiveNumbersSum(15);

//        TextJustification textJustification = new TextJustification();
//        textJustification.fullJustify(new String[]{"This", "is", "an", "example", "of", "text", "justification."}, 16);

//        PreferenceList preferenceList = new PreferenceList();
//        preferenceList.getPreference(Arrays.asList(Arrays.asList(3, 5, 7, 9), Arrays.asList(2, 3, 8), Arrays.asList(5, 8)));

//        NumberofIntersectedRectangles numberofIntersectedRectangles = new NumberofIntersectedRectangles();
//        numberofIntersectedRectangles.countIntersection(new int[][][]{
//                {{-3, -2}, {2, 1}},
//                {{10, 8}, {15, 10}},
//                {{1, 0}, {7, 4}},
//                {{12, 9}, {16, 12}},
//                {{-2, -1}, {5, 3}}
//        });

//        ImplementQueuewithFixedSizeofArrays.QueueWithFixedArray queueWithFixedArray =
//                new ImplementQueuewithFixedSizeofArrays().new QueueWithFixedArray(5);
//        queueWithFixedArray.offer(1);
//        queueWithFixedArray.offer(2);
//        int res = queueWithFixedArray.poll();
//        queueWithFixedArray.offer(3);
//        queueWithFixedArray.offer(4);
//        queueWithFixedArray.offer(5);
//        queueWithFixedArray.offer(6);
//        queueWithFixedArray.offer(7);
//        queueWithFixedArray.offer(8);
//        queueWithFixedArray.offer(9);
//        res = queueWithFixedArray.poll();
//        res = queueWithFixedArray.poll();

//        MeetingTime meetingTime = new MeetingTime();
//        List<List<Interval>> intervals = new ArrayList<List<Interval>>() {{
//            add(new ArrayList<Interval>() {{
//                add(new Interval(1, 3));
//                add(new Interval(6, 7));
//            }});
//            add(new ArrayList<Interval>() {{
//                add(new Interval(2, 4));
//            }});
//            add(new ArrayList<Interval>() {{
//                add(new Interval(2, 3));
//                add(new Interval(9, 12));
//            }});
//        }};
//        meetingTime.getAvailableIntervals(intervals, 3);

//        SlidingPuzzle slidingPuzzle = new SlidingPuzzle();
//        slidingPuzzle.slidingPuzzle(new int[][]{{1, 2, 3}, {4, 0, 5}});

//        Wizards wizards = new Wizards();
//        int[][] ids = {{1, 5, 9}, {2, 3, 9}, {4}, {}, {}, {9}, {}, {}, {}, {}};
//        List<List<Integer>> wizardList = new ArrayList<>();
//        for (int i = 0; i < ids.length; i++) {
//            List<Integer> wizard = new ArrayList<>();
//            for (int j = 0; j < ids[i].length; j++) {
//                wizard.add(ids[i][j]);
//            }
//            wizardList.add(wizard);
//        }
//        wizards.getShortestPath(wizardList, 0, 9);

//        PyramidTransitionMatrix pyramidTransitionMatrix = new PyramidTransitionMatrix();
//        pyramidTransitionMatrix.pyramidTransition("XYZ", Arrays.asList("XYD", "YZE", "DEA", "FFF"));

//        Set<String> myWishList = new HashSet<>(Arrays.asList(new String[]{"a", "b", "c", "d"}));
//        Set<String> wishList1 = new HashSet<>(Arrays.asList(new String[]{"a", "b", "e", "f"}));
//        Set<String> wishList2 = new HashSet<>(Arrays.asList(new String[]{"a", "c", "d", "g"}));
//        Set<String> wishList3 = new HashSet<>(Arrays.asList(new String[]{"c", "f", "e", "g"}));
//        Map<String, Set<String>> friendWishLists = new HashMap<>();
//        friendWishLists.put("Buddy1", wishList1);
//        friendWishLists.put("Buddy2", wishList2);
//        friendWishLists.put("Buddy3", wishList3);
//        TravelBuddy.Solution solution = new TravelBuddy().new Solution(myWishList, friendWishLists);
//        solution.recommend(10);

//        HilbertCurve hilbertCurve = new HilbertCurve();
//        System.out.println(hilbertCurve.hilbertCurve(2, 1, 2));

//        MissingWords missingWords = new MissingWords();
//        missingWords.missingWords("I am using HackerRank to improve programming", "am HackerRank to improve");

//        SubsequencesAirbnb subsequencesAirbnb = new SubsequencesAirbnb();
//        System.out.println(subsequencesAirbnb.maxDownSequences(Arrays.asList(9, 32, 65, 59, 7, 5, 90, 74, 45, 32, 6, 52, 18, 53, 90, 79, 75, 82, 51, 58)));

//        ap.plusMinus(new int[]{-4, 3, -9, 0, 4, 1});

//        CaesarCipher caesarCipher = new CaesarCipher();
//        caesarCipher.caesarCipher("159357lcfd", 98);

//        HogwartsMeetup hogwartsMeetup = new HogwartsMeetup();
//        int[][] ids = {{1, 2, 3}, {8, 6, 4}, {7, 8, 3}, {8, 1}, {6}, {8, 7}, {9, 4}, {4, 6}, {1}, {1, 4}};
////        int[][] ids = {{1, 2, 3}, {}, {}, {}, {}, {}, {}, {}, {}, {}};
//        List<List<Integer>> wizardList = new ArrayList<>();
//        for (int i = 0; i < ids.length; i++) {
//            List<Integer> wizard = new ArrayList<>();
//            for (int j = 0; j < ids[i].length; j++) {
//                wizard.add(ids[i][j]);
//            }
//            wizardList.add(wizard);
//        }
//        List<String> wizards = Arrays.asList("1 2 3", "8 6 4",
//                "7 8 3", "8 1", "6", "8 7", "9 4", "4 6", "1", "1 4");
////        List<String> wizards = Arrays.asList("1 2 3", "1", "1", "6", "", "", "8", "", "", "");
//        hogwartsMeetup.getShortestPathTwo(wizards);

//        PancakeSorting pancakeSorting = new PancakeSorting();
//        pancakeSorting.pancakeSort(new int[]{3, 2, 5, 4, 1});

//        ParseLispExpression parseLispExpression = new ParseLispExpression();
//        parseLispExpression.evaluate("(let x 2 (mult x (let x 3 y 4 (add x y))))");

//        PartitionArrayIntoDisjointIntervals partitionArrayIntoDisjointIntervals = new PartitionArrayIntoDisjointIntervals();
//        partitionArrayIntoDisjointIntervals.partitionDisjointTwo(new int[]{1, 2, 5, 0, 6, 3, 12});

//        PatchingArray patchingArray = new PatchingArray();
//        patchingArray.minPatches(new int[]{1, 2, 4, 13, 43}, 100);

//        PossibleBipartition possibleBipartition = new PossibleBipartition();
//        possibleBipartition.possibleBipartition(4, new int[][]{{1, 2}, {1, 3}, {2, 4}});

//        PrisonCellsAfterNDays prisonCellsAfterNDays = new PrisonCellsAfterNDays();
//        prisonCellsAfterNDays.prisonAfterNDays(new int[]{0, 1, 0, 1, 1, 0, 0, 1}, 97);

//        ProjectionAreaOf3DShapes projectionAreaOf3DShapes = new ProjectionAreaOf3DShapes();
//        projectionAreaOf3DShapes.projectionArea(new int[][]{{1, 2}, {3, 4}});

//        PushDominoes pushDominoes = new PushDominoes();
//        pushDominoes.pushDominoesTwo(".L.R...LR..LR..");
//        pushDominoes.pushDominoesThree(".L.R...LR..LR..");


//        RandomFlipMatrix randomFlipMatrix = new RandomFlipMatrix(2, 3);
//        randomFlipMatrix.flip();
//        randomFlipMatrix.flip();
//        randomFlipMatrix.flip();
//        randomFlipMatrix.flip();
//        randomFlipMatrix.flip();

//        RangeModule rangeModule = new RangeModule();
//        rangeModule.addRange(10, 20);
//        rangeModule.removeRange(14, 18);
//        rangeModule.addRange(16, 22);
//        rangeModule.removeRange(18, 20);
//        rangeModule.queryRange(10, 14);
//        rangeModule.queryRange(13, 15);
//        rangeModule.queryRange(16, 18);

//        ReachingPoints reachingPoints = new ReachingPoints();
//        reachingPoints.reachingPoints(1, 1, 3, 5);

//        ReorderedPowerOf2 reorderedPowerOf2 = new ReorderedPowerOf2();
//        reorderedPowerOf2.reorderedPowerOf2Two(1024);

//        RevealCardsInIncreasingOrder revealCardsInIncreasingOrder = new RevealCardsInIncreasingOrder();
//        revealCardsInIncreasingOrder.deckRevealedIncreasing(new int[]{17, 13, 11, 2, 3, 5, 7});

//        ScoreOfParentheses scoreOfParentheses = new ScoreOfParentheses();
//        scoreOfParentheses.scoreOfParentheses("(()(()))");

//        SetIntersectionSizeAtLeastTwo setIntersectionSizeAtLeastTwo = new SetIntersectionSizeAtLeastTwo();
//        setIntersectionSizeAtLeastTwo.intersectionSizeTwo(new int[][]{{1, 3}, {1, 4}, {2, 5}, {3, 5}});

//        ShortestPathVisitingAllNodes shortestPathVisitingAllNodes = new ShortestPathVisitingAllNodes();
//        shortestPathVisitingAllNodes.shortestPathLength(new int[][]{{1}, {0, 2, 4}, {1, 3, 4}, {2}, {1, 2}});

//        ShortestPathToGetAllKeys shortestPathToGetAllKeys = new ShortestPathToGetAllKeys();
//        shortestPathToGetAllKeys.shortestPathAllKeys(new String[]{"@..aA", "..B#.", "....b"});

//        ShortestSubarrayWithSumAtLeastK shortestSubarrayWithSumAtLeastK = new ShortestSubarrayWithSumAtLeastK();
//        shortestSubarrayWithSumAtLeastK.shortestSubarrayTm(new int[]{2, -1, 2, -2, 3, 5}, 3);

//        SmallestRotationWithHighestScore smallestRotationWithHighestScore = new SmallestRotationWithHighestScore();
//        smallestRotationWithHighestScore.bestRotation(new int[]{2, 3, 1, 4, 0});

//        SpiralMatrixIII spiralMatrixIII = new SpiralMatrixIII();
//        spiralMatrixIII.spiralMatrixIII(5, 6, 1, 4);

//        SplitArrayWithSameAverage splitArrayWithSameAverage = new SplitArrayWithSameAverage();
//        splitArrayWithSameAverage.splitArraySameAverage(new int[]{1, 2, 3, 4, 5, 6, 7, 8});

//        StampingTheSequence stampingTheSequence = new StampingTheSequence();
//        stampingTheSequence.movesToStamp("abc", "ababcbc");

//        StickersToSpellWord stickersToSpellWord = new StickersToSpellWord();
//        stickersToSpellWord.minStickers(new String[]{"with", "example", "science"}, "thehat");

//        StrangePrinter strangePrinter = new StrangePrinter();
//        strangePrinter.strangePrinter("abcba");

//        StudentAttendanceRecordII studentAttendanceRecordII = new StudentAttendanceRecordII();
//        studentAttendanceRecordII.checkRecord(3);

//        SubarraySumsDivisiblebyK subarraySumsDivisiblebyK = new SubarraySumsDivisiblebyK();
//        subarraySumsDivisiblebyK.subarraysDivByKTwo(new int[]{4, 5, 0, -2, -3, 1}, 5);

//        SubarraysWithKDifferentIntegers subarraysWithKDifferentIntegers = new SubarraysWithKDifferentIntegers();
//        subarraysWithKDifferentIntegers.subarraysWithKDistinctTwo(new int[]{1, 2, 1, 3, 4}, 3);

//        SumOfDistancesInTree sumOfDistancesInTree = new SumOfDistancesInTree();
//        sumOfDistancesInTree.sumOfDistancesInTree(6, new int[][]{{0, 1}, {0, 2}, {2, 3}, {2, 4}, {2, 5}});

//        SumOfSubarrayMinimums sumOfSubarrayMinimums = new SumOfSubarrayMinimums();
//        sumOfSubarrayMinimums.sumSubarrayMinsTwo(new int[]{2, 9, 7, 8, 3, 4, 6, 1});

//        SumOfSubsequenceWidths sumOfSubsequenceWidths = new SumOfSubsequenceWidths();
//        sumOfSubsequenceWidths.sumSubseqWidths(new int[]{2, 1, 3});

//        SuperPalindromes superPalindromes = new SuperPalindromes();
//        superPalindromes.superpalindromesInRange("4", "1000");

//        SuperWashingMachines superWashingMachines = new SuperWashingMachines();
//        superWashingMachines.findMinMovesTwo(new int[]{1, 5, 0});

//        TallestBillboard tallestBillboard = new TallestBillboard();
//        tallestBillboard.tallestBillboard(new int[]{1, 2, 3, 4, 5, 6});

//        ThreeEqualParts threeEqualParts = new ThreeEqualParts();
//        threeEqualParts.threeEqualParts(new int[]{0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0});

//        UniqueLetterString uniqueLetterString = new UniqueLetterString();
//        uniqueLetterString.uniqueLetterString("ABCAB");

//        UniquePathsIII uniquePathsIII = new UniquePathsIII();
//        uniquePathsIII.uniquePathsIII(new int[][]{{1, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 2, -1}});

//        VerifyingAnAlienDictionary verifyingAnAlienDictionary = new VerifyingAnAlienDictionary();
//        verifyingAnAlienDictionary.isAlienSorted(new String[]{"word", "world", "row"}, "worldabcefghijkmnpqstuvxyz");

//        VerticalOrderTraversalOfABinaryTree verticalOrderTraversalOfABinaryTree = new VerticalOrderTraversalOfABinaryTree();
//        verticalOrderTraversalOfABinaryTree.verticalTraversal(node1);

//        ZumaGame zumaGame = new ZumaGame();
//        zumaGame.findMinStep("RRGGWYYWWGGR", "YRG");

//        BricksFallingWhenHit bricksFallingWhenHit = new BricksFallingWhenHit();
//        bricksFallingWhenHit.hitBricks(new int[][]{{1, 0, 0, 0}, {1, 1, 1, 0}}, new int[][]{{1, 0}});

//        BusRoutes busRoutes = new BusRoutes();
//        busRoutes.numBusesToDestination(new int[][]{{1, 2, 7}, {3, 6, 7}}, 1, 6);

//        CapacityToShipPackagesWithinDDays capacityToShipPackagesWithinDDays = new CapacityToShipPackagesWithinDDays();
//        capacityToShipPackagesWithinDDays.shipWithinDays(new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5);

//        ValidParenthese validParenthese = new ValidParenthese();
//        validParenthese.isValidPimco(new String[]{"{}[]()", "{[}]}"});

//        NumMatrix numMatrix = new NumMatrix(new int[][]{{1, 2, 3}, {4, 5, 6}});
//        numMatrix.sumRegionTwo(0, 0, 2, 3);

//        findMatrix(Arrays.asList(Arrays.asList(1, 2, 3), Arrays.asList(4, 5, 6)));

//        ConstructBinarySearchTreeFromPreorderTraversal constructBinarySearchTreeFromPreorderTraversal = new ConstructBinarySearchTreeFromPreorderTraversal();
//        constructBinarySearchTreeFromPreorderTraversal.bstFromPreorder(new int[]{8, 5, 1, 7, 10, 12});

//        wordCount("blue blue blue");

//        DecodedStringAtIndex decodedStringAtIndex = new DecodedStringAtIndex();
//        decodedStringAtIndex.decodeAtIndex("leet22code3", 10);

//        DeleteColumnsToMakeSortedII deleteColumnsToMakeSortedII = new DeleteColumnsToMakeSortedII();
//        deleteColumnsToMakeSortedII.minDeletionSize(new String[]{"xgag", "xfba", "yfac"});

//        DeleteColumnsToMakeSortedIII deleteColumnsToMakeSortedIII = new DeleteColumnsToMakeSortedIII();
//        deleteColumnsToMakeSortedIII.minDeletionSize(new String[]{"babca", "bbazb", "edcba"});

//        DistinctSubsequencesII distinctSubsequencesII = new DistinctSubsequencesII();
//        distinctSubsequencesII.distinctSubseqII("abcbae");

//        TreeNode coins1 = new TreeNode(1);
//        coins1.left = new TreeNode(0);
//        coins1.right = new TreeNode(0);
//        coins1.left.right = new TreeNode(3);
//        DistributeCoinsInBinaryTree distributeCoinsInBinaryTree = new DistributeCoinsInBinaryTree();
//        distributeCoinsInBinaryTree.distributeCoins(coins1);

//        EqualRationalNumbers equalRationalNumbers = new EqualRationalNumbers();
//        equalRationalNumbers.isRationalEqual("0.5(25)", "0.(52)");

//        ErectTheFence erectTheFence = new ErectTheFence();
//        ErectTheFence.Point fence1 = new ErectTheFence.Point(1, 1);
//        ErectTheFence.Point fence2 = new ErectTheFence.Point(2, 2);
//        ErectTheFence.Point fence3 = new ErectTheFence.Point(2, 0);
//        ErectTheFence.Point fence4 = new ErectTheFence.Point(2, 4);
//        ErectTheFence.Point fence5 = new ErectTheFence.Point(3, 3);
//        ErectTheFence.Point fence6 = new ErectTheFence.Point(4, 2);
//        erectTheFence.outerTrees(new ErectTheFence.Point[]{fence1, fence2, fence3, fence4, fence5, fence6});

//        StringChains stringChains = new StringChains();
//        stringChains.longestChain(Arrays.asList("a", "b", "ba", "bca", "bda", "bdca"));

//        GridIllumination gridIllumination = new GridIllumination();
//        gridIllumination.gridIllumination(5, new int[][]{{0, 0}, {4, 4}}, new int[][]{{1, 1}, {1, 0}});

//        KSimilarStrings kSimilarStrings = new KSimilarStrings();
//        kSimilarStrings.kSimilarity("aabdc", "abcda");

//        KthSmallestPrimeFraction kthSmallestPrimeFraction = new KthSmallestPrimeFraction();
//        kthSmallestPrimeFraction.kthSmallestPrimeFraction(new int[]{1, 2, 3, 5}, 3);

//        ShortestDistanceBetweenTwoNodesInBST shortestDistanceBetweenTwoNodesInBST = new ShortestDistanceBetweenTwoNodesInBST();
//        TreeNode sdbrn = shortestDistanceBetweenTwoNodesInBST.insert(null, 5);
//        shortestDistanceBetweenTwoNodesInBST.insert(sdbrn, 6);
//        shortestDistanceBetweenTwoNodesInBST.insert(sdbrn, 3);
//        shortestDistanceBetweenTwoNodesInBST.insert(sdbrn, 1);
//        shortestDistanceBetweenTwoNodesInBST.insert(sdbrn, 2);
//        shortestDistanceBetweenTwoNodesInBST.insert(sdbrn, 4);
//        int dis = shortestDistanceBetweenTwoNodesInBST.distance(sdbrn, 4, 2);

//        SubstringWithOnlyOneRepeatedCharacterInLengthK substringWithOnlyOneRepeatedCharacterInLengthK = new SubstringWithOnlyOneRepeatedCharacterInLengthK();
//        substringWithOnlyOneRepeatedCharacterInLengthK.solution("awaglak", 4);

//        LargestTimeForGivenDigits largestTimeForGivenDigits = new LargestTimeForGivenDigits();
//        largestTimeForGivenDigits.largestTimeFromDigits(new int[]{5, 2, 3, 4});

//        MagicalString magicalString = new MagicalString();
//        magicalString.magicalString(10);

//        List<String> request = Arrays.asList("query_1");
//        StringBuilder seqLocations = new StringBuilder();
//        seqLocations.append("Q.ID == \"");
//        seqLocations.append(String.join("\" || Q.ID == \"", request));
//        seqLocations.append("\"");
//        seqLocations.toString();

//        MaskingPersonalInformation maskingPersonalInformation = new MaskingPersonalInformation();
//        maskingPersonalInformation.maskPII("86-(10)12345678");

//        MaximumSumf3NonOverlappingSubarrays maximumSumf3NonOverlappingSubarrays = new MaximumSumf3NonOverlappingSubarrays();
//        maximumSumf3NonOverlappingSubarrays.maxSumOfThreeSubarraysTwo(new int[]{9, 1, 2, 5, 1, 2, 8, 6, 7, 5, 1, 20}, 3);

//        MaximumSwap maximumSwap = new MaximumSwap();
//        maximumSwap.maximumSwap(2736);

//        MaximumWidthRamp maximumWidthRamp = new MaximumWidthRamp();
//        maximumWidthRamp.maxWidthRamp(new int[]{9, 8, 1, 0, 1, 9, 4, 0, 4, 1});

//        MinimizeMalwareSpread minimizeMalwareSpread = new MinimizeMalwareSpread();
//        minimizeMalwareSpread.minMalwareSpread(new int[][]{{1, 1, 1}, {1, 1, 1}, {1, 1, 1}}, new int[]{1, 2});

//        MinimumDominoRotationsForEqualRow minimumDominoRotationsForEqualRow = new MinimumDominoRotationsForEqualRow();
//        minimumDominoRotationsForEqualRow.minDominoRotations(new int[]{2, 1, 2, 4, 2, 2}, new int[]{5, 2, 6, 2, 3, 2});

//        MinimumNumberOfKConsecutiveBitFlips minimumNumberOfKConsecutiveBitFlips = new MinimumNumberOfKConsecutiveBitFlips();
//        minimumNumberOfKConsecutiveBitFlips.minKBitFlipsTwo(new int[]{0, 0, 0, 1, 0, 1, 1, 0}, 3);

//        MinimumNumberOfRefuelingStops minimumNumberOfRefuelingStops = new MinimumNumberOfRefuelingStops();
//        minimumNumberOfRefuelingStops.minRefuelStops(100, 10, new int[][]{{10, 60}, {20, 30}, {30, 30}, {60, 40}});

//        MostProfitAssigningWork mostProfitAssigningWork = new MostProfitAssigningWork();
//        mostProfitAssigningWork.maxProfitAssignmentTm(new int[]{4, 4, 6, 8, 10}, new int[]{30, 20, 50, 40, 50}, new int[]{4, 5, 6, 7});

//        ListNode nextGreater = new ListNode(1);
//        nextGreater.next = new ListNode(7);
//        nextGreater.next.next = new ListNode(5);
//        nextGreater.next.next.next = new ListNode(1);
//        nextGreater.next.next.next.next = new ListNode(9);
//        nextGreater.next.next.next.next.next = new ListNode(2);
//        nextGreater.next.next.next.next.next.next = new ListNode(5);
//        nextGreater.next.next.next.next.next.next.next = new ListNode(1);
//        NextGreaterNodeInLinkedList nextGreaterNodeInLinkedList = new NextGreaterNodeInLinkedList();
//        nextGreaterNodeInLinkedList.nextLargerNodes(nextGreater);

//        NumberOfAtoms numberOfAtoms = new NumberOfAtoms();
//        numberOfAtoms.countOfAtoms("K4(ON(SO3)2)2");

//        NumbersWithRepeatedDigits numbersWithRepeatedDigits = new NumbersWithRepeatedDigits();
//        numbersWithRepeatedDigits.numDupDigitsAtMostN(100);

//        NumbersWithSameConsecutiveDifferences numbersWithSameConsecutiveDifferences = new NumbersWithSameConsecutiveDifferences();
//        numbersWithSameConsecutiveDifferences.numsSameConsecDiff(3, 0);

//        PairsOfSongsWithTotalDurationsDivisibleBy60 pairsOfSongsWithTotalDurationsDivisibleBy60 = new PairsOfSongsWithTotalDurationsDivisibleBy60();
//        pairsOfSongsWithTotalDurationsDivisibleBy60.numPairsDivisibleBy60Two(new int[]{30, 20, 150, 100, 40});

//        RecoverATreeFromPreorderTraversal recoverATreeFromPreorderTraversal = new RecoverATreeFromPreorderTraversal();
//        recoverATreeFromPreorderTraversal.recoverFromPreorder("1-401--349---90--88");

//        RemoveOutermostParentheses removeOutermostParentheses = new RemoveOutermostParentheses();
//        removeOutermostParentheses.removeOuterParentheses("(()())(())");

//        VideoStitching videoStitching = new VideoStitching();
//        videoStitching.videoStitching(new int[][]{{0, 2}, {4, 6}, {8, 10}, {1, 9}, {1, 5}, {5, 9}}, 10);

//        TreeNode subAve = new TreeNode(1);
//        subAve.left = new TreeNode(-5);
//        subAve.left.left = new TreeNode(1);
//        subAve.left.right = new TreeNode(2);
//        subAve.right = new TreeNode(11);
//        subAve.right.left = new TreeNode(4);
//        subAve.right.right = new TreeNode(-2);
//        SubtreeWithMaximumAverage subtreeWithMaximumAverage = new SubtreeWithMaximumAverage();
//        subtreeWithMaximumAverage.findSubtree2(subAve);

//        StringCompression stringCompression = new StringCompression();
//        stringCompression.compress("aabcccccaaa");

//        List<BankAccount> accounts = new ArrayList<BankAccount>();
//        accounts.add(new SavingsAccount("USD", 3));//Savings
//        accounts.add(new SavingsAccount("EUR", 2));//Savings
//        accounts.add(new CheckingAccount("HUF", 100));//Checking
//        accounts.add(new CheckingAccount("COP", 10000));//Checking
//        accounts.add(new BrokerageAccount("GBP", 2));//Brokerage
//        accounts.add(new BrokerageAccount("INR", 600));//Brokerage
//
//        accounts.stream().forEach(
//                account -> System.out.println(
//                        MessageFormat.format(TEXT,
//                                new Object[]{
//                                        account.getAccountType().getName(),//make this work
//                                        account.getUnits(),//make this work
//                                        account.getCurrency()//make this work
//                                })));

//        String encoded = encode("abcdefg");
//        String decoded = decode(encoded);
//        System.out.println(decoded);

//        splitOrderFills(new int[]{100, 200, 300}, new int[]{200, 400});

//        orderedJunctionBoxes(6, Arrays.asList("ykc 82 01", "eo first qpx", "09z cat hamster",
//                "06f 12 25 6", "az0 first qpx", "236 cat dog rabbit snake"));

//        optimalUtilization(10, Arrays.asList(Arrays.asList(1, 3), Arrays.asList(2, 5), Arrays.asList(3, 7), Arrays.asList(4, 10)),
//                Arrays.asList(Arrays.asList(1, 2), Arrays.asList(2, 3), Arrays.asList(3, 4), Arrays.asList(4, 5)));

//        Set<String> patList = new HashSet<>(Arrays.asList("ID", "PS", "SI", "RG", "RB", "RC", "DS", "SY", "OS", "A1",
//                "A2", "A3", "AC", "DE", "GN", "OC", "S9", "MP", "BM", "S8", "MT", "NT", "RD", "CM", "SX", "RE", "GX",
//                "PJ", "PT", "P1", "KW", "PN", "PA", "PI", "PC", "PR", "PE", "AN", "KC", "PV", "CD", "PM", "XF", "FM",
//                "PB", "D1", "D3", "D4", "D2", "D6", "DC", "KD", "OX", "CC", "HL"));
//        Set<String> nonPatList = new HashSet<>(Arrays.asList("ID", "RG", "RB", "RC", "DS", "SY", "OS", "A1", "A2", "A3",
//                "AC", "DE", "GN", "OC", "S9", "MP", "BM", "S8", "MT", "NT", "RD", "CM", "SX", "RE", "PJ", "PT", "P1",
//                "KW", "CD", "CK", "CL", "CJ", "C6", "C7", "C8", "DC", "C9", "D1", "CQ", "CU", "RA", "D2", "D6", "OX",
//                "GY", "CB", "CC", "HL"));
//        Set<String> inter = new HashSet<>(patList);
//        inter.retainAll(nonPatList);
//        patList.removeAll(inter);
//        nonPatList.removeAll(inter);
//        System.out.println(inter.size());

//        Set<String> patList = new HashSet<>(Arrays.asList("ID", "AC", "P1", "DE", "DR", "FH", "FT", "KW", "OS", "PA",
//                "PI", "PN", "PR", "PS", "PT", "SQ", "D1", "D2", "D3", "D4", "PE", "KC", "OP", "PB", "PJ", "GX", "CC",
//                "PC"));
//        Set<String> nonPatList = new HashSet<>(Arrays.asList("ID", "AC", "P1", "DE", "DR", "FH", "FT", "KW", "OS", "PA",
//                "PC", "PI", "PN", "PR", "PS", "PT", "SQ", "D1", "D2", "D3", "D4", "PE", "KC", "OP", "PB", "PJ", "GX",
//                "CC"));
//        Set<String> inter = new HashSet<>(patList);
//        inter.retainAll(nonPatList);
//        patList.removeAll(inter);
//        nonPatList.removeAll(inter);
//        System.out.println(inter.size());

//        ReverseInteger reverseInteger = new ReverseInteger();
//        reverseInteger.reverse(-123);

//        MonotoneIncreasingDigits monotoneIncreasingDigits = new MonotoneIncreasingDigits();
//        monotoneIncreasingDigits.monotoneIncreasingDigits(54321);

//        ClosestLeafInABinaryTree closestLeafInABinaryTree = new ClosestLeafInABinaryTree();
//        closestLeafInABinaryTree.findClosestLeaf(mainTree, 2);

//        SetMismatch setMismatch = new SetMismatch();
//        setMismatch.findErrorNums(new int[]{1, 2, 3, 3, 5});

//        RemoveSubstrings removeSubstrings = new RemoveSubstrings();
//        removeSubstrings.minLength("ccdaabcdbb", new HashSet<>(Arrays.asList("ab", "cd")));

//        BaseballGame baseballGame = new BaseballGame();
//        baseballGame.calPointsArray(new String[]{"5", "-2", "4", "C", "D", "9", "+", "+"});

//        ConstructBinaryTreeFromString constructBinaryTreeFromString = new ConstructBinaryTreeFromString();
//        constructBinaryTreeFromString.str2tree("-4(2(3)(1))(6(5))");

//        LongestArithmeticSequence longestArithmeticSequence = new LongestArithmeticSequence();
//        longestArithmeticSequence.longestArithSeqLengthTwo(new int[]{20, 1, 15, 3, 10, 5, 8});

//        MaximumSubarray maximumSubarray = new MaximumSubarray();
//        maximumSubarray.maxSubArrayTwo(new int[]{-2, 1, -3, 4, -1, 2, 1, -5, 4});

//        PalindromeNumber palindromeNumber = new PalindromeNumber();
//        palindromeNumber.isPalindrome(123454321);

//        InterleavingString interleavingString = new InterleavingString();
//        interleavingString.isInterleave("aabcc", "dbbca", "aadbbcbcac");

//        bla();
//        MyPanCake myPanCake = new MyPanCake();

//        SampleDemo sampleDemoA = new SampleDemo("A");
//        SampleDemo sampleDemoB = new SampleDemo("B");
//        sampleDemoB.start();
//        sampleDemoA.start();

//        Properties p = System.getProperties();
//        p.setProperty("private", "scurvy");
//        String s = p.getProperty("argProp") + " ";
//        s += p.getProperty("private");
//        System.out.println(s);

//        Cons cons = new Cons();
//        cons.bla();

//        DungeonGame dungeonGame = new DungeonGame();
//        dungeonGame.calculateMinimumHP(new int[][]{{-2, -3, 3}, {-5, -10, 1}, {10, 30, -5}});

//        ShortestPalindrome shortestPalindrome = new ShortestPalindrome();
//        System.out.println(shortestPalindrome.shortestPalindrome("abacdc"));

//        CreateMaximumNumber createMaximumNumber = new CreateMaximumNumber();
//        createMaximumNumber.maxNumber(new int[]{3, 4, 6, 5}, new int[]{9, 1, 2, 5, 8, 3}, 5);

//        PerfectRectangle perfectRectangle = new PerfectRectangle();
//        perfectRectangle.isRectangleCover(new int[][]{{1, 1, 3, 3}, {3, 1, 4, 2}, {3, 2, 4, 4}, {1, 3, 2, 4}, {2, 3, 3, 4}});

//        FindAllDuplicatesInAnArray findAllDuplicatesInAnArray = new FindAllDuplicatesInAnArray();
//        findAllDuplicatesInAnArray.findDuplicates(new int[]{4, 3, 2, 7, 8, 2, 3, 1});

//        MakingAnagrams makingAnagrams = new MakingAnagrams();
//        makingAnagrams.makingAnagrams("absdjkvuahdakejfnfauhdsaavasdlkj", "djfladfhiawasdkjvalskufhafablsdkashlahdfa");

//        NumberComplement numberComplement = new NumberComplement();
//        numberComplement.findComplementTwo(38);

//        RelativeRanks relativeRanks = new RelativeRanks();
//        relativeRanks.findRelativeRanks(new int[]{10, 3, 8, 9, 4});

//        FreedomTrail freedomTrail = new FreedomTrail();
//        freedomTrail.findRotateStepsTwo("godding", "gdn");

//        ArrayNesting arrayNesting = new ArrayNesting();
//        arrayNesting.arrayNesting(new int[]{5, 4, 0, 3, 1, 6, 2});

//        NonNegativeIntegersWithoutConsecutiveOnes nonNegativeIntegersWithoutConsecutiveOnes = new NonNegativeIntegersWithoutConsecutiveOnes();
//        nonNegativeIntegersWithoutConsecutiveOnes.findIntegers(10);

//        KthSmallestNumberInMultiplicationTable kthSmallestNumberInMultiplicationTable = new KthSmallestNumberInMultiplicationTable();
//        kthSmallestNumberInMultiplicationTable.findKthNumber(3, 3, 5);

//        FindEventualSafeStates findEventualSafeStates = new FindEventualSafeStates();
//        findEventualSafeStates.eventualSafeNodes(new int[][]{{1, 2}, {2, 3}, {5}, {0}, {5}, {}, {}});

//        BinaryTreesWithFactors binaryTreesWithFactors = new BinaryTreesWithFactors();
//        binaryTreesWithFactors.numFactoredBinaryTrees(new int[]{2, 4, 5, 10});

//        ScoreAfterFlippingMatrix scoreAfterFlippingMatrix = new ScoreAfterFlippingMatrix();
//        scoreAfterFlippingMatrix.matrixScore(new int[][]{{0, 0, 1, 1}, {1, 0, 1, 0}, {1, 1, 0, 0}});

//        SmallestSubtreeWithAllTheDeepestNodes smallestSubtreeWithAllTheDeepestNodes = new SmallestSubtreeWithAllTheDeepestNodes();
//        smallestSubtreeWithAllTheDeepestNodes.subtreeWithAllDeepest(mainTree);

//        AdvantageShuffle advantageShuffle = new AdvantageShuffle();
//        advantageShuffle.advantageCount(new int[]{12, 24, 8, 32}, new int[]{13, 25, 32, 11});

//        KokoEatingBananas kokoEatingBananas = new KokoEatingBananas();
//        kokoEatingBananas.minEatingSpeed(new int[]{3, 6, 7, 11}, 8);

//        FindAndReplacePattern findAndReplacePattern = new FindAndReplacePattern();
//        findAndReplacePattern.findAndReplacePattern(new String[]{"abc", "deq", "mee", "aqq", "dkd", "ccc"}, "abb");

//        BitwiseORsOfSubarrays bitwiseORsOfSubarrays = new BitwiseORsOfSubarrays();
//        bitwiseORsOfSubarrays.subarrayBitwiseORs(new int[]{1, 2, 4});

//        FindTheTownJudge findTheTownJudge = new FindTheTownJudge();
//        findTheTownJudge.findJudge(4, new int[][]{{1, 3}, {1, 4}, {2, 3}, {2, 4}, {4, 3}});

//        MinimumAddToMakeParenthesesValid minimumAddToMakeParenthesesValid = new MinimumAddToMakeParenthesesValid();
//        minimumAddToMakeParenthesesValid.minAddToMakeValidTwo("()))((");

//        BeautifulArray beautifulArray = new BeautifulArray();
//        beautifulArray.beautifulArray(8);

//        ShortestBridge shortestBridge = new ShortestBridge();
//        shortestBridge.shortestBridge(new int[][]{{1, 1, 1, 1, 1}, {1, 0, 0, 0, 1},
//                {1, 0, 1, 0, 1}, {1, 0, 0, 0, 1}, {1, 1, 1, 1, 1,}});

//        KnightDialer knightDialer = new KnightDialer();
//        knightDialer.knightDialerDp(4);

//        LargestComponentSizeByCommonFactor largestComponentSizeByCommonFactor = new LargestComponentSizeByCommonFactor();
//        largestComponentSizeByCommonFactor.largestComponentSize(new int[]{2, 3, 6, 7, 4, 12, 21, 39});

//        ArrayOfDoubledPairs arrayOfDoubledPairs = new ArrayOfDoubledPairs();
//        arrayOfDoubledPairs.canReorderDoubled(new int[]{4, -2, 2, -4});

//        BinaryTreeCameras binaryTreeCameras = new BinaryTreeCameras();
//        binaryTreeCameras.minCameraCover(mainTree);

//        ConvertToBaseNeg2 convertToBaseNeg2 = new ConvertToBaseNeg2();
//        convertToBaseNeg2.baseNeg2(3);

//        TwoCityScheduling twoCityScheduling = new TwoCityScheduling();
//        twoCityScheduling.twoCitySchedCost(new int[][]{{10, 20}, {30, 200}, {400, 50}, {30, 20}});

//        MaximumSumOfTwoNonOverlappingSubarrays maximumSumOfTwoNonOverlappingSubarrays = new MaximumSumOfTwoNonOverlappingSubarrays();
//        maximumSumOfTwoNonOverlappingSubarrays.maxSumTwoNoOverlap(new int[]{3, 8, 1, 3, 2, 1, 8, 9, 0}, 3, 2);

//        PartitionArrayForMaximumSum partitionArrayForMaximumSum = new PartitionArrayForMaximumSum();
//        partitionArrayForMaximumSum.maxSumAfterPartitioning(new int[]{1, 15, 7, 9, 2, 5, 10}, 3);

//        LongestStringChain longestStringChain = new LongestStringChain();
//        longestStringChain.longestStrChain(new String[]{"a", "b", "ba", "bca", "bda", "bdca"});

//        LastStoneWeightII lastStoneWeightII = new LastStoneWeightII();
//        lastStoneWeightII.lastStoneWeightII(new int[]{2, 7, 4, 1, 8, 1});

//        DistantBarcodes distantBarcodes = new DistantBarcodes();
//        distantBarcodes.rearrangeBarcodes(new int[]{1, 1, 1, 1, 2, 2, 3, 3});

//        SmallestSubsequenceOfDistinctCharacters smallestSubsequenceOfDistinctCharacters = new SmallestSubsequenceOfDistinctCharacters();
//        smallestSubsequenceOfDistinctCharacters.smallestSubsequence("cdadabcc");

//        DuplicateZeros duplicateZeros = new DuplicateZeros();
//        duplicateZeros.duplicateZeros(new int[]{1, 0, 2, 3, 0, 4, 5, 0});

//        PathInZigzagLabelledBinaryTree pathInZigzagLabelledBinaryTree = new PathInZigzagLabelledBinaryTree();
//        pathInZigzagLabelledBinaryTree.pathInZigZagTree(26);

//        FillingBookcaseShelves fillingBookcaseShelves = new FillingBookcaseShelves();
//        fillingBookcaseShelves.minHeightShelves(new int[][]{{1, 1}, {2, 3}, {2, 3}, {1, 1}, {1, 1}, {1, 1}, {1, 2}}, 4);

//        LongestWellPerformingInterval longestWellPerformingInterval = new LongestWellPerformingInterval();
//        longestWellPerformingInterval.longestWPI(new int[]{9, 9, 6, 0, 6, 6, 9, 0, 9, 9, 9, 9});

//        SmallestSufficientTeam smallestSufficientTeam = new SmallestSufficientTeam();
//        smallestSufficientTeam.smallestSufficientTeam(new String[]{"algorithms", "math", "java", "reactjs", "csharp", "aws"},
//                Arrays.asList(Arrays.asList("algorithms", "math", "java"), Arrays.asList("algorithms", "math", "reactjs"),
//                        Arrays.asList("java", "csharp", "aws"), Arrays.asList("reactjs", "csharp"),
//                        Arrays.asList("csharp", "math"), Arrays.asList("aws", "java")));

//        LargestOneBorderedSquare largestOneBorderedSquare = new LargestOneBorderedSquare();
//        largestOneBorderedSquare.largest1BorderedSquare(new int[][]{{1, 1, 1, 1}, {1, 0, 1, 0}, {1, 0, 1, 0}, {1, 1, 1, 0}});

//        ShortestCommonSupersequence shortestCommonSupersequence = new ShortestCommonSupersequence();
//        shortestCommonSupersequence.shortestCommonSupersequenceTwo("XABCBDAB", "yBDCABA");

//        GradingStudents gradingStudents = new GradingStudents();
//        gradingStudents.gradingStudents(Arrays.asList(73, 67, 38, 33, 99));

//        MedianFinder medianFinder = new MedianFinder();
//        medianFinder.addNum(1);
//        medianFinder.addNum(5);
//        medianFinder.addNum(4);
//        medianFinder.addNum(2);
//        medianFinder.addNum(3);
//        medianFinder.addNum(9);
//        medianFinder.findMedian();

//        UniqueSubstringsInWraparoundString uniqueSubstringsInWraparoundString = new UniqueSubstringsInWraparoundString();
//        uniqueSubstringsInWraparoundString.findSubstringInWraproundString("zabcd");

//        IncreasingSubsequences increasingSubsequences = new IncreasingSubsequences();
//        increasingSubsequences.findSubsequences(new int[]{4, 6, 7, 7});

//        MaximumSubarrayII maximumSubarrayII = new MaximumSubarrayII();
//        maximumSubarrayII.maxTwoSubArrays(Arrays.asList(1, 3, -1, 2, -1, 2));

//        BinaryTreePathSumIV binaryTreePathSumIV = new BinaryTreePathSumIV();
//        binaryTreePathSumIV.pathSum(new int[]{115, 213, 227, 336, 345});

//        TrimABinarySearchTree trimABinarySearchTree = new TrimABinarySearchTree();
//        trimABinarySearchTree.trimBST(node1, 4, 13);

//        SubstringWithAtLeastKDistinctCharacters substringWithAtLeastKDistinctCharacters = new SubstringWithAtLeastKDistinctCharacters();
//        substringWithAtLeastKDistinctCharacters.kDistinctCharacters("abcabcabcabc", 3);

//        BinaryTreePathSum binaryTreePathSum = new BinaryTreePathSum();
//        binaryTreePathSum.binaryTreePathSum(secondMin, 8);

//        TreeLongestPathWithSameValue treeLongestPathWithSameValue = new TreeLongestPathWithSameValue();
//        treeLongestPathWithSameValue.LongestPathWithSameValue(new int[]{1, 2, 1, 2, 2}, new int[]{1, 2, 1, 3, 2, 4, 2, 5});

//        LargestPalindromeProduct largestPalindromeProduct = new LargestPalindromeProduct();
//        largestPalindromeProduct.largestPalindrome(2);

//        TwoKeysKeyboard twoKeysKeyboard = new TwoKeysKeyboard();
//        twoKeysKeyboard.minStepsDp(9);

//        practice.lintcode.TernaryExpressionParser ternaryExpressionParser = new TernaryExpressionParser();
//        ternaryExpressionParser.parseTernary("F?1:T?3:1");

//        TaskScheduler taskScheduler = new TaskScheduler();
//        taskScheduler.leastIntervalThree(new char[]{'A', 'A', 'A', 'B', 'B', 'B', 'C', 'C'}, 3);

//        ShortestUncommonSubsequence shortestUncommonSubsequence = new ShortestUncommonSubsequence();
//        shortestUncommonSubsequence.solution("babab", "babba");

//        LongestSubstringWithAtMostKDistinctCharacters longestSubstringWithAtMostKDistinctCharacters = new LongestSubstringWithAtMostKDistinctCharacters();
//        longestSubstringWithAtMostKDistinctCharacters.lengthOfLongestSubstringKDistinctLHM("ecebadcebe", 3);

//        RearrangeStringKDistanceApart rearrangeStringKDistanceApart = new RearrangeStringKDistanceApart();
//        rearrangeStringKDistanceApart.rearrangeStringTwo("aaadbbcc", 2);

//        LeftmostColumnIndexOfOne leftmostColumnIndexOfOne = new LeftmostColumnIndexOfOne();
//        leftmostColumnIndexOfOne.solutionTwo(new int[][]{{0, 0, 0, 1}, {0, 0, 1, 1}, {0, 1, 1, 1}, {0, 0, 0, 0}});

//        VowelSpellchecker vowelSpellchecker = new VowelSpellchecker();
//        vowelSpellchecker.spellchecker(new String[]{"KiTe", "kite", "hare", "Hare"}, new String[]{"kite", "Kite", "KiTe", "Hare", "HARE", "Hear", "hear", "keti", "keet", "keto"});

//        ReorderLogFiles reorderLogFiles = new ReorderLogFiles();
//        reorderLogFiles.reorderLogFilesTwo(new String[]{"dig1 8 1 5 1", "let1 art can", "dig2 3 6", "let2 own kit dig", "let3 art zero"});

//        MergeKSortedArray mergeKSortedArray = new MergeKSortedArray();
//        mergeKSortedArray.mergekSortedArraysTwo(new int[][]{{1, 3, 5, 7}, {2, 4, 6}, {0, 8, 9, 10, 11}});

//        SnakesAndLadders snakesAndLadders = new SnakesAndLadders();
//        snakesAndLadders.snakesAndLadders(new int[][]{
//                {-1, -1, -1, -1, -1, -1},
//                {-1, -1, -1, -1, -1, -1},
//                {-1, -1, -1, -1, -1, -1},
//                {-1, 35, -1, -1, 13, -1},
//                {-1, -1, -1, -1, -1, -1},
//                {-1, 15, -1, -1, -1, -1}});

//        MinLengthForMergedString minLengthForMergedString = new MinLengthForMergedString();
//        minLengthForMergedString.minMergeStrings("abcdef", "defgh");

//        WordBreakHM wordBreakHM = new WordBreakHM();
//        Map<String, Integer> wbhm = new HashMap<>();
//        wbhm.put("abc", 3);
//        wbhm.put("ab", 2);
//        wbhm.put("abca", 1);
//        wordBreakHM.canBreak("abcabcabcabca", wbhm);

//        IntervalIntersection intervalIntersection = new IntervalIntersection();
//        intervalIntersection.intersection(new int[][]{{1, 10}, {2, 6}, {9, 12}, {14, 16}, {16, 17}});

//        MatrixAntidiagonalTraverse matrixAntidiagonalTraverse = new MatrixAntidiagonalTraverse();
//        matrixAntidiagonalTraverse.solution(new int[][]{
//                {12, 7, 21, 31, 11},
//                {45, -2, 14, 27, 19},
//                {-3, 15, 36, 71, 26},
//                {4, -13, 55, 34, 15}
//        });

//        ValidateBinaryTree validateBinaryTree = new ValidateBinaryTree();
//        TreeNode n1 = new TreeNode(1);
//        TreeNode n2 = new TreeNode(2);
//        TreeNode n3 = new TreeNode(3);
//        TreeNode n4 = new TreeNode(4);
//        n1.left = n2;
//        n1.right = n3;
//        n3.left = n4;
//        TreeNode n1 = new TreeNode(1);
//        TreeNode n2 = new TreeNode(2);
//        TreeNode n3 = new TreeNode(3);
//        TreeNode n4 = new TreeNode(4);
//
//        n1.left = n2;
//        n1.right = n3;
//        n2.right = n4;
//        n3.left = n4;
//        validateBinaryTree.isBinaryTree(Arrays.asList(n4, n2, n3, n1));

//        ReadNCharactersGivenRead4 readNCharactersGivenRead4 = new ReadNCharactersGivenRead4();
//        readNCharactersGivenRead4.read(new char[100], 14);

//        ReadNCharactersGivenRead4II readNCharactersGivenRead4II = new ReadNCharactersGivenRead4II();
//        char[] chars = new char[100];
//        readNCharactersGivenRead4II.read(chars, 12);
//        readNCharactersGivenRead4II.read(chars, 4);

//        Buffer buf = new Buffer(5);
//        buf.write(new char[]{'a', 'b', 'c'}); // => 3 [abc . .]
//        buf.write(new char[]{'d', 'e', 'f'}); // => 2 because the buffer is full, you can only write two chars [abcde]
//        buf.read(3); // => [abc] [. . . de]
//        buf.write(new char[]{'x', 'y', 'z', 'a', 'b', 'c'}); // => 3 [xyzde]
//        buf.read(8);

//        MinStepsToRemoveElements minStepsToRemoveElements = new MinStepsToRemoveElements();
//        minStepsToRemoveElements.solve(new int[]{6, 3, 1, 8, 9, 4, 3, 2, 8, 9});

//        EnumerateAllUniquePaths enumerateAllUniquePaths = new EnumerateAllUniquePaths();
//        enumerateAllUniquePaths.uniquePaths(4);

//        DutchNationalFlagProblem dutchNationalFlagProblem = new DutchNationalFlagProblem();
//        dutchNationalFlagProblem.sortColors(new int[]{0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2}, 4);
//        dutchNationalFlagProblem.sortColors(new int[]{9, 8, 7, 6, 5, 4, 3, 2, 1}, 4);

//        Flatten2DVector flatten2DVector = new Flatten2DVector(new int[][]{{}, {3}, {4}});
//        flatten2DVector.hasNext();
//        flatten2DVector.next();
//        flatten2DVector.hasNext();

//        RearrangeAStringWithIntegers rearrangeAStringWithIntegers = new RearrangeAStringWithIntegers();
//        rearrangeAStringWithIntegers.rearrangeTwo("AC2BEW3");

//        FriendsOfAppropriateAges friendsOfAppropriateAges = new FriendsOfAppropriateAges();
//        friendsOfAppropriateAges.numFriendRequests(new int[]{20, 30, 100, 110, 120});

//        WordSquares wordSquares = new WordSquares();
//        wordSquares.wordSquares(new String[]{"area", "lead", "wall", "lady", "ball"});

//        ConvertANumberToHexadecimal convertANumberToHexadecimal = new ConvertANumberToHexadecimal();
//        convertANumberToHexadecimal.toHex(156);

//        DesignTwitter designTwitter = new DesignTwitter();
//        designTwitter.postTweet(1, "LintCode is Good!!!");
//        designTwitter.getNewsFeed(1);
//        designTwitter.getTimeline(1);
//        designTwitter.follow(2, 1);
//        designTwitter.getNewsFeed(2);
//        designTwitter.unfollow(2, 1);
//        designTwitter.getNewsFeed(2);

//        ConsistentHashing consistentHashing = new ConsistentHashing();
//        consistentHashing.consistentHashingTwo(5);

//        RateLimiter rateLimiter = new RateLimiter();
//        rateLimiter.isRatelimited(1000, "login", "3/m", true);
//        rateLimiter.isRatelimited(1001, "login", "3/m", true);
//        rateLimiter.isRatelimited(1021, "login", "3/m", true);
//        rateLimiter.isRatelimited(1070, "login", "3/m", true);

//        Geohash geohash = new Geohash();
//        geohash.encode(-90, 180, 12);

//        MovingStonesUntilConsecutiveII movingStonesUntilConsecutiveII = new MovingStonesUntilConsecutiveII();
//        movingStonesUntilConsecutiveII.numMovesStonesII(new int[]{6, 5, 4, 3, 10});

//        HeightChecker heightChecker = new HeightChecker();
//        heightChecker.heightChecker(new int[]{1, 1, 4, 2, 1, 3});

//        DecreaseElementsToMakeArrayZigzag decreaseElementsToMakeArrayZigzag = new DecreaseElementsToMakeArrayZigzag();
//        decreaseElementsToMakeArrayZigzag.movesToMakeZigzag(new int[]{9, 6, 1, 6, 2});

//        BinaryTreeColoringGame binaryTreeColoringGame = new BinaryTreeColoringGame();
//        binaryTreeColoringGame.btreeGameWinningMove(mainTree, 8, 4);

//        SnapshotArray snapshotArray = new SnapshotArray(4);
//        snapshotArray.set(0, 5);  // Set array[0] = 5
//        snapshotArray.snap();  // Take a snapshot, return snap_id = 0
//        snapshotArray.set(0, 6);
//        snapshotArray.get(0, 0);

//        LongestChunkedPalindromeDecomposition longestChunkedPalindromeDecomposition = new LongestChunkedPalindromeDecomposition();
//        longestChunkedPalindromeDecomposition.longestDecomposition("ghiabcdefhelloadamhelloabcdefghi");

//        SwapForLongestRepeatedCharacterSubstring swapForLongestRepeatedCharacterSubstring = new SwapForLongestRepeatedCharacterSubstring();
//        swapForLongestRepeatedCharacterSubstring.maxRepOpt1("bbaaaa");

//        AsFarFromLandAsPossible asFarFromLandAsPossible = new AsFarFromLandAsPossible();
//        asFarFromLandAsPossible.maxDistance(new int[][]{{1, 0, 1}, {0, 0, 0}, {1, 0, 1}});

//        RemoveZeroSumConsecutiveNodesFromLinkedList removeZeroSumConsecutiveNodesFromLinkedList = new RemoveZeroSumConsecutiveNodesFromLinkedList();
//        ListNode tmp = new ListNode(1);
//        tmp.next = new ListNode(3);
//        tmp.next.next = new ListNode(2);
//        tmp.next.next.next = new ListNode(-3);
//        tmp.next.next.next.next = new ListNode(-2);
//        tmp.next.next.next.next.next = new ListNode(5);
//        tmp.next.next.next.next.next.next = new ListNode(100);
//        tmp.next.next.next.next.next.next.next = new ListNode(-100);
//        tmp.next.next.next.next.next.next.next.next = new ListNode(4);
//        removeZeroSumConsecutiveNodesFromLinkedList.removeZeroSumSublists(tmp);

//        CanMakePalindromeFromSubstring canMakePalindromeFromSubstring = new CanMakePalindromeFromSubstring();
//        canMakePalindromeFromSubstring.canMakePaliQueriesTwo("abcda", new int[][]{{3, 3, 0}, {1, 2, 0}, {0, 3, 1}, {0, 3, 2}, {0, 4, 1}});

//        CompareStringsByFrequencyOfTheSmallestCharacter compareStringsByFrequencyOfTheSmallestCharacter = new CompareStringsByFrequencyOfTheSmallestCharacter();
//        compareStringsByFrequencyOfTheSmallestCharacter.numSmallerByFrequency(new String[]{"bbb", "cc"}, new String[]{"a", "aa", "aaa", "aaaa"});

//        NumberOfValidWordsForEachPuzzle numberOfValidWordsForEachPuzzle = new NumberOfValidWordsForEachPuzzle();
//        numberOfValidWordsForEachPuzzle.findNumOfValidWords(new String[]{"aaaa", "asas", "able", "ability", "actt", "actor", "access"}, new String[]{"acefji", "aboveyz", "abrodyz", "abslute", "absoryz", "actresz", "gaswxyz"});

//        BitSet bitSet = new BitSet();
//        BitSet bitSet2 = new BitSet();
//        String test = "acegikCD";
//        for (char ch : test.toCharArray())
//            bitSet.set(1 << (ch - 'A'));
//        String test2 = "bdfhjAB";
//        for (char ch : test2.toCharArray())
//            bitSet2.set(1 << (ch - 'A'));
//        bitSet2.and(bitSet);
//        System.out.println(bitSet);

//        int[] arr = new int[]{1, 3, 5, 7};
//        int idx = Arrays.binarySearch(arr, 2);

//        MakeArrayStrictlyIncreasing makeArrayStrictlyIncreasing = new MakeArrayStrictlyIncreasing();
//        makeArrayStrictlyIncreasing.makeArrayIncreasingTwo(new int[]{1, 5, 3, 6, 7}, new int[]{1, 3, 2, 4});

//        ReverseSubstringsBetweenEachPairOfParentheses reverseSubstringsBetweenEachPairOfParentheses = new ReverseSubstringsBetweenEachPairOfParentheses();
//        reverseSubstringsBetweenEachPairOfParentheses.reverseParenthesesOn("(ed(et(oc))el)");

//        KConcatenationMaximumSum kConcatenationMaximumSum = new KConcatenationMaximumSum();
//        kConcatenationMaximumSum.kConcatenationMaxSum(new int[]{-1, 3, 2, -7}, 3);

//        CriticalConnectionsInANetwork criticalConnectionsInANetwork = new CriticalConnectionsInANetwork();
//        criticalConnectionsInANetwork.criticalConnections(4, Arrays.asList(Arrays.asList(0, 1), Arrays.asList(1, 2), Arrays.asList(2, 0), Arrays.asList(1, 3)));

//        SmallestStringWithSwaps smallestStringWithSwaps = new SmallestStringWithSwaps();
//        smallestStringWithSwaps.smallestStringWithSwaps("dcab", Arrays.asList(Arrays.asList(0, 3), Arrays.asList(1, 2)));

//        ArrayToBinaryTreeCompareLeftOrRightSum arrayToBinaryTreeCompareLeftOrRightSum = new ArrayToBinaryTreeCompareLeftOrRightSum();
//        arrayToBinaryTreeCompareLeftOrRightSum.solution(new long[]{1, 4, 100, 5});

//        ClimbingStairsThree climbingStairsThree = new ClimbingStairsThree();
//        climbingStairsThree.solution(5);

//        UniqueCharacters uniqueCharacters = new UniqueCharacters();
//        uniqueCharacters.isUnique("abc_____");

//        MedianIndex medianIndex = new MedianIndex();
//        medianIndex.getAns(new int[]{4, 5, 1, 2, 3});

//        InsertNodeInSortedLinkedList insertNodeInSortedLinkedList = new InsertNodeInSortedLinkedList();
        ListNode tmp = new ListNode(1);
        tmp.next = new ListNode(4);
        tmp.next.next = new ListNode(6);
        tmp.next.next.next = new ListNode(8);
        tmp.next.next.next.next = new ListNode(10);
//        insertNodeInSortedLinkedList.insertNode(tmp, 5);

//        MiddleOfTheLinkedList middleOfTheLinkedList = new MiddleOfTheLinkedList();
//        middleOfTheLinkedList.middleNodeTwo(tmp);

//        MajorElementIII majorElementIII = new MajorElementIII();
//        majorElementIII.majorityNumber(Arrays.asList(3, 1, 2, 3, 2, 3, 3, 4, 4, 4), 3);

//        CombinationAndJudgmentPrimeNumber combinationAndJudgmentPrimeNumber = new CombinationAndJudgmentPrimeNumber();
//        combinationAndJudgmentPrimeNumber.getWays(new int[]{3, 7, 12, 19}, 3);

//        TurnBasedGame turnBasedGame = new TurnBasedGame();
//        turnBasedGame.getAnsTwo(new int[]{1, 3, 2, 5});

//        IntervalStatistics intervalStatistics = new IntervalStatistics();
//        intervalStatistics.intervalStatistics(new int[]{0, 0, 1, 0, 1, 1, 0}, 1);

//        DoingHomework doingHomework = new DoingHomework();
//        doingHomework.doingHomework(new int[]{3, 7, 3, 2, 5}, new int[]{10, 20, 12, 8, 17, 25});

//        StackPushPopSequence stackPushPopSequence = new StackPushPopSequence();
//        stackPushPopSequence.isLegalSeqTwo(new int[]{1, 2, 4, 3}, new int[]{2, 3, 4, 1});

//        CanReachTheEndpoint canReachTheEndpoint = new CanReachTheEndpoint();
//        canReachTheEndpoint.reachEndpoint(new int[][]{{1, 1, 1}, {1, 0, 1}, {1, 0, 9}});

//        ConvertBinaryTreeToLinkedListsByDepth convertBinaryTreeToLinkedListsByDepth = new ConvertBinaryTreeToLinkedListsByDepth();
//        convertBinaryTreeToLinkedListsByDepth.binaryTreeToLists(mainTree);

//        BestTimeToBuyAndSellStockV bestTimeToBuyAndSellStockV = new BestTimeToBuyAndSellStockV();
//        bestTimeToBuyAndSellStockV.getAns(new int[]{16, 40, 33, 43, 87, 26, 22, 100, 53, 38, 72, 40, 82, 19, 25, 52, 3, 83});
//        bestTimeToBuyAndSellStockV.getAns(new int[]{9, 5, 9, 10, 5});

//        PouringCola pouringCola = new PouringCola();
//        pouringCola.getMinTimes(4, 1, 3);

//        IntervalXORII intervalXORII = new IntervalXORII();
//        intervalXORII.intervalXOR(new int[]{1, 2, 4, 8}, Arrays.asList(new Interval(0, 2), new Interval(2, 2)));

//        LuckyNumber luckyNumber = new LuckyNumber();
//        luckyNumber.luckyNumberTwo("8850857390316639046360264240742576882");
//        luckyNumber.luckyNumberTwo("51443924594061573070619476735114529340233670970104091717691753660643");
//        luckyNumber.luckyNumberTwo("9999");
//        luckyNumber.luckyNumberTwo("355556");
//        luckyNumber.luckyNumberTwo("355533");

//        KSumIII kSumIII = new KSumIII();
//        kSumIII.getAns(new int[]{2, 9, 2}, 1, 2);

//        Poker poker = new Poker();
//        poker.getAns(new int[]{4, 9, 1, 4, 5, 7, 9, 1, 8, 1});
//        poker.getAns(new int[]{1, 2, 3, 4, 5, 5, 6, 7, 8, 9});
//        poker.getAns(new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 2});
//        poker.getAnsThree(new int[]{6, 4, 8, 3, 6, 5, 8, 7, 4, 2, 5, 5, 4, 6, 1, 1, 4, 7, 5, 9, 6, 8, 6, 6, 4, 7, 4, 5, 2, 7});

//        KillMonster killMonster = new KillMonster();
//        killMonster.killMonster(5, new int[][]{{1, 1, 1, 1, 1}, {1, 1, 1, 1, 1}, {1, 2, 2, 2, 2}, {1, 3, 1, 1, 1}, {1, 4, 2, 2, 2}, {1, 4, 1, 1, 1}});
//        killMonster.killMonsterTwo(5, new int[][]{{3, 9, 2, 1, 5}, {0, 9, 6, 5, 9}, {6, 1, 8, 6, 3}, {3, 7, 0, 4, 4}, {9, 9, 0, 6, 5}, {5, 6, 5, 6, 7}});
//        killMonster.killMonsterTwo(10, new int[][]{{7, 1, 6, 3, 3}, {7, 1, 3, 6, 3}, {3, 4, 1, 0, 7}, {8, 8, 0, 2, 6}, {8, 9, 0, 3, 1}, {3, 8, 7, 4, 7}, {3, 6, 5, 1, 9}, {3, 1, 3, 3, 3}, {4, 5, 8, 3, 8}, {2, 9, 7, 7, 9}, {2, 2, 9, 7, 4}});

//        CardGameII cardGameII = new CardGameII();
//        cardGameII.cardGame(new int[]{1, 2, 3, 4, 5}, new int[]{1, 2, 3, 4, 5}, 10, 10);

//        MinimumPathSumIII minimumPathSumIII = new MinimumPathSumIII();
//        minimumPathSumIII.minimumPathSumIII(new int[][]{{1, 1}, {2, -1}});

//        SmallestRectangleEnclosingBlackPixels smallestRectangleEnclosingBlackPixels = new SmallestRectangleEnclosingBlackPixels();
//        smallestRectangleEnclosingBlackPixels.minArea(new char[][]{{'0', '0', '1', '0'}, {'0', '1', '1', '0'}, {'0', '1', '0', '0'}}, 0, 2);

//        WoodCut woodCut = new WoodCut();
//        woodCut.woodCut(new int[]{232, 124, 456}, 7);

//        TeamSquad teamSquad = new TeamSquad();
//        teamSquad.getAns(new int[]{17, 17, 37, 20, 35, 21, 33, 16, 3, 45}, new int[]{21, 44, 5, 21, 33, 38, 23, 5, 25, 43});

//        ShortestPathToTheDestination shortestPathToTheDestination = new ShortestPathToTheDestination();
//        shortestPathToTheDestination.shortestPath(new int[][]{{0, 0, 1, 0}, {0, 1, 2, 0}, {1, 1, 0, 1}});

//        BinaryTreeMaximumNode binaryTreeMaximumNode = new BinaryTreeMaximumNode();
//        binaryTreeMaximumNode.maxNode(mainTree);

//        IPToCIDR ipToCIDR = new IPToCIDR();
//        ipToCIDR.ipToCIDR("255.0.0.7", 10);

//        MicrosoftTest microsoftTest = new MicrosoftTest();
//        microsoftTest.solution("abcabcabcdddbd");
//        microsoftTest.riddleSolution("rd?e?w?g??");
//        microsoftTest.insert5Solution(-987);

//        CutTheCake cutTheCake = new CutTheCake();
//        cutTheCake.getTheShortestCutLength(3, 4, 3, new int[][]{{1, 2}, {2, 3}, {3, 2}});

//        IntervalsAddAndGetValue intervalsAddAndGetValue = new IntervalsAddAndGetValue();
//        intervalsAddAndGetValue.intervalsAddAndGetValue(new int[]{0, 1, 2, 3, 4}, new int[][]{{1, 1, 0, 0}, {0, 1, 2, 1}, {1, 2, 0, 0}});
//        intervalsAddAndGetValue.intervalsAddAndGetValue(new int[]{0, 1, 5, 7, 7, 6, 7, 9, 5, 8, 3, 0, 1, 7, 9, 7, 8, 1, 8, 4},
//                new int[][]{{0, 2, 11, 56}, {0, 12, 18, 55}, {0, 7, 11, 57}, {1, 4, 0, 0}, {0, 14, 19, 64}, {1, 4, 0, 0}, {1, 13, 0, 0}, {0, 1, 8, 69}, {1, 11, 0, 0}, {1, 13, 0, 0}, {0, 1, 3, 47}});

//        LongestCommonSubsequenceIII longestCommonSubsequenceIII = new LongestCommonSubsequenceIII();
//        longestCommonSubsequenceIII.longestCommonSubsequenceIII(new int[]{6, 9, 4, 2, 8, 1, 3, 5, 7}, new int[]{8, 1, 2, 4, 5, 3, 7, 9, 6});

//        MinimumCost minimumCost = new MinimumCost();
//        minimumCost.getAns(new int[]{10, 1, 50, 50, 20, 5});
//        minimumCost.getAns(new int[]{3, 4, 5, 6});

//        MonsterHunter monsterHunter = new MonsterHunter();
//        monsterHunter.killMonsterThree(new int[]{8, 1, 4, 4}, new int[]{2, 4, 5, 2});
//        monsterHunter.killMonsterDp(new int[]{8, 1, 4, 4}, new int[]{2, 4, 5, 2});
//        monsterHunter.killMonsterThree(new int[]{1, 4, 5, 4}, new int[]{3, 4, 9, 1});
//        monsterHunter.killMonsterDp(new int[]{1, 4, 5, 4}, new int[]{3, 4, 9, 1});
//        monsterHunter.killMonsterThree(new int[]{3, 5, 7}, new int[]{0, 2, 0});
//        monsterHunter.killMonsterDp(new int[]{3, 5, 7}, new int[]{0, 2, 0});
//        monsterHunter.killMonsterThree(new int[]{5, 3, 3, 0, 4, 3, 1, 4, 5, 9, 0, 7, 6, 9, 6, 9, 7, 0, 3, 2, 4, 1, 2, 5, 1, 9, 7, 0, 0, 4, 8, 4, 7, 6, 1, 8, 2, 0, 4, 1, 5, 7, 0, 4, 2, 6, 7, 3, 4, 8, 4, 4, 1, 7, 6, 6, 3, 0, 2, 7, 0, 7, 8, 3, 3, 9, 3, 1, 4, 1, 3, 2, 1, 4, 0, 9, 4, 1, 2, 0, 2, 8, 6, 1, 5, 6, 9, 8, 5, 7, 0, 4, 3, 5, 1, 4, 7, 6, 6, 1, 7, 4, 1, 3, 9, 4, 6, 4, 9, 5, 7, 0, 2, 5, 0, 6, 0, 2, 3, 5, 7, 8, 7, 5, 1, 0, 7, 3, 1, 6, 2, 7, 2, 1, 3, 2, 5, 5, 6, 5, 9, 7, 3, 3, 7, 2, 2, 1, 4, 6, 5, 1, 9, 4, 3, 4, 4, 5, 8, 7, 3, 8, 4, 8, 5, 6, 7, 4, 7, 0, 5, 0, 2, 2, 5, 6, 1, 7, 9, 9, 0, 5, 0, 4, 6, 3, 7, 5, 9, 2, 0, 1, 6, 1, 9, 8, 4, 8, 8, 6},
//                new int[]{3, 8, 3, 3, 3, 3, 6, 9, 0, 5, 2, 8, 1, 4, 4, 2, 4, 5, 2, 4, 2, 8, 7, 1, 5, 6, 7, 2, 3, 2, 5, 8, 6, 3, 3, 8, 8, 9, 7, 7, 4, 2, 2, 7, 1, 0, 9, 6, 0, 3, 7, 2, 3, 6, 5, 2, 5, 4, 0, 6, 3, 6, 0, 1, 0, 7, 2, 5, 1, 1, 8, 2, 0, 9, 9, 0, 8, 8, 1, 4, 6, 7, 1, 3, 0, 1, 9, 2, 2, 4, 1, 6, 9, 1, 1, 7, 9, 9, 5, 7, 1, 3, 5, 9, 6, 4, 9, 3, 7, 1, 2, 6, 8, 1, 4, 2, 8, 0, 4, 3, 1, 1, 1, 1, 2, 1, 1, 8, 3, 3, 4, 6, 5, 4, 7, 0, 2, 4, 5, 5, 4, 1, 6, 8, 3, 9, 2, 0, 6, 2, 1, 5, 0, 8, 9, 3, 5, 0, 7, 2, 9, 8, 5, 2, 1, 8, 1, 9, 5, 2, 0, 2, 9, 1, 9, 2, 1, 4, 2, 3, 0, 0, 6, 0, 1, 9, 7, 1, 3, 6, 8, 7, 9, 9, 4, 7, 5, 3, 9, 4});

//        KnightShortestPathIII knightShortestPathIII = new KnightShortestPathIII();
//        knightShortestPathIII.shortestPath(new boolean[][]{{false, false, false}, {false, false, false}, {false, false, false}}, new KnightShortestPathIII.Point(0, 0), new KnightShortestPathIII.Point(2, 2));

//        TravelingSalesman travelingSalesman = new TravelingSalesman();
//        travelingSalesman.minCost(5, new int[][]{{1, 2, 9}, {2, 3, 1}, {3, 4, 9}, {4, 5, 4}, {2, 4, 3}, {1, 3, 2}, {5, 4, 9}});

//        BankSystem bankSystem = new BankSystem();
//        bankSystem.deposite(0, 1268, 5);
//        bankSystem.withdraw(0, 1797, 15);
//        bankSystem.check(0, 2, 17);
//        bankSystem.check(0, 20, 32);
//        bankSystem.withdraw(0, 1535, 57);
//        bankSystem.deposite(0, 1179, 66);
//        bankSystem.deposite(0, 1158, 66);
//        bankSystem.deposite(0, 1356, 75);
//        bankSystem.withdraw(0, 126, 79);
//        bankSystem.deposite(0, 856, 114);
//        bankSystem.check(0, 115, 118);

//        SumPath sumPath = new SumPath();
//        sumPath.sumPathTwo(new int[][]{{2, 1, 5}, {3, 10, 1}, {1, 3, 0}}, 9);
//        sumPath.sumPathFive(new int[][]{{2, 1}, {3, 4}}, 9);
//        sumPath.sumPathFive(new int[][]{{2, 1, 5}, {3, 10, 1}, {1, 3, 0}}, 9);
//        sumPath.sumPathFive(new int[][]{{1, 1, 1}, {1, 1, 1}, {1, 1, 1}}, 5);
//        sumPath.sumPathFive(new int[][]{{67733446, 91176976, 12634101, 42781526, 16747567, 23150831, 31586916, 3107867, 36703782, 38115073, 60476069, 57720394},
//                        {81283803, 53866479, 52526823, 93793588, 99719251, 75557249, 17455031, 85970273, 18219287, 27995246, 43809465, 26711423},
//                        {52679061, 58144753, 20157842, 53222563, 35921921, 33056372, 53063503, 71004597, 22233018, 47807471, 32084387, 10181041},
//                        {72991894, 66226701, 55370753, 44231057, 41515644, 84324437, 27852371, 75691861, 74693425, 74462117, 92475405, 58454041},
//                        {60733916, 18855001, 69920625, 96980354, 46214595, 42541154, 22391161, 18645661, 45255798, 55222528, 23884561, 69073001},
//                        {75851003, 33504801, 6763601, 14818561, 74485767, 683441, 73974217, 29750471, 99281921, 61389133, 27987841, 29568132},
//                        {64944553, 50603721, 6125457, 2246091, 32182091, 44419247, 30266593, 63626601, 11233033, 6773259, 68067237, 73152433},
//                        {63688683, 17230711, 29786034, 29202528, 77288176, 27383930, 56451673, 72566242, 88441034, 92769201, 89685126, 94779298},
//                        {23171726, 65586281, 7377617, 20214303, 83604569, 65322385, 23451251, 65104223, 52194481, 82614821, 57725734, 71027449},
//                        {32047364, 71654691, 26814294, 29615919, 92316380, 74731765, 60012022, 57225226, 83850855, 71885961, 25433607, 22397409},
//                        {10999931, 43810559, 67234686, 75300817, 50426826, 8888587, 96651547, 68844997, 55264263, 6049683, 47384279, 41032829},
//                        {24376462, 11256251, 22964032, 63952018, 51911559, 15305093, 5858269, 79906915, 84572271, 70871926, 59225389, 67670037},
//                        {24091171, 23250184, 43234321, 78813255, 69574113, 60921975, 9975238, 6093848, 44287560, 75892973, 85003977, 28971263},
//                        {23927298, 10638137, 43957136, 77130091, 52531595, 83956503, 5793601, 45969843, 23399033, 9449992, 71760031, 94019811},
//                        {60833401, 68362720, 1069095, 16018521, 35138365, 38230080, 35830481, 43299053, 9078466, 68119090, 24753326, 15621497},
//                        {90177266, 1468547, 27526280, 21905310, 70890897, 31971444, 69282221, 1503304, 24774241, 19375502, 46022117, 12868834},
//                        {2670645, 69619990, 33103628, 64797301, 14640561, 72576889, 19689206, 88147017, 29313297, 93502065, 9150249, 91310159},
//                        {97866575, 53247897, 38108169, 93998551, 89959161, 1876289, 22090409, 59938708, 24321626, 53277461, 3974433, 77032680}},
//                1543008561);
//        sumPath.sumPath(new int[][]{{1, 1, 1, 1, 1, 1, 1}, {1, 1, 1, 1, 1, 1, 1}, {1, 1, 1, 1, 1, 1, 1}, {1, 1, 1, 1, 1, 1, 1}, {1, 1, 1, 1, 1, 1, 1}, {1, 1, 1, 1, 1, 1, 1}, {1, 1, 1, 1, 1, 1, 1}}, 35);


//        SlidingOnIceSurface slidingOnIceSurface = new SlidingOnIceSurface();
//        slidingOnIceSurface.getAns(new String[]{"S.*.", "...*", ".*.T"});
//        slidingOnIceSurface.getAns(new String[]{"S*..", "....", "*.T."});

//        Knightship knightship = new Knightship();
//        System.out.println(knightship.getSteps(new String[]{
//                "10110",
//                "01*11",
//                "10111",
//                "00110",
//                "00000"
//        }));
//        System.out.println(knightship.getStepsTwo(new String[]{
//                "10110",
//                "01*11",
//                "10111",
//                "00110",
//                "00000"
//        }));
//        System.out.println(knightship.getStepsThree(new String[]{
//                "10110",
//                "01*11",
//                "10111",
//                "00110",
//                "00000"
//        }));
//        System.out.println(knightship.getStepsFour(new String[]{
//                "10110",
//                "01*11",
//                "10111",
//                "00110",
//                "00000"
//        }));

//        Twitch twitch = new Twitch();
//        twitch.dayOfTheWeek("qwe", 2);
//        twitch.dayOfTheWeek("Sun", 4);
//        twitch.dayOfTheWeek("Sat", 23);

//        twitch.battleshipTwo(4, "1B 2C,2D 4D", "2B 2D 3D 4D 4A");
//        twitch.battleshipTwo(3, "1A 1B,2C 2C", "1B");
//        twitch.battleshipTwo(12, "1A 2A,12A 12A", "12A");

//        ConstructionQueueII constructionQueueII = new ConstructionQueueII();
//        constructionQueueII.getQueue(new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9}, new int[]{1, 5, 4, 0, 0, 0, 0, 1, 0});
//        constructionQueueII.getQueueTwo(new int[]{1, 2, 3, 4, 5}, new int[]{1, 1, 0, 0, 0});
//        constructionQueueII.getQueueTwo(new int[]{1, 2, 3, 4, 5}, new int[]{4, 2, 0, 0, 0});
//        constructionQueueII.getQueueTwo(new int[]{1, 3, 7, 6}, new int[]{0, 0, 0, 0});

//        ReverseOnlyLetters reverseOnlyLetters = new ReverseOnlyLetters();
//        reverseOnlyLetters.ReverseOnlyLetters("ab-cd");

//        RangeSumOfBST rangeSumOfBST = new RangeSumOfBST();
//        rangeSumOfBST.rangeSumBST(node1, 8, 11);

//        RogueKnightSven rogueKnightSven = new RogueKnightSven();
//        rogueKnightSven.getNumberOfWays()

//        CollectingDiamonds collectingDiamonds = new CollectingDiamonds();
//        collectingDiamonds.getCountDpTwo(4, 3, new int[]{10, 20, 30, 40}, new int[][]{{1, 2}, {1, 3}, {2, 4}, {3, 4}});
//        collectingDiamonds.getCountDp(6, 2, new int[]{5, 9, 8, 4, 9, 2}, new int[][]{{1, 6}, {6, 2}, {2, 5}, {5, 3}, {5, 4}});
//        collectingDiamonds.getCountPq(6, 3, new int[]{5, 9, 8, 4, 9, 2}, new int[][]{{1, 6}, {6, 2}, {2, 5}, {5, 3}, {5, 4}});
//        collectingDiamonds.getCountDpTwo(50, 44, new int[]{578, 607, 414, 993, 583, 532, 15, 207, 817, 859, 52, 711, 274, 842, 485, 200, 46, 596, 843, 16, 976, 671, 656, 277, 594, 404, 735, 114, 406, 680, 427, 432, 604, 604, 558, 170, 155, 864, 648, 714, 328, 753, 181, 104, 986, 844, 710, 664, 52, 799},
//                new int[][]{{48, 29}, {47, 29}, {35, 29}, {10, 47}, {39, 10}, {50, 29}, {43, 10}, {46, 35}, {14, 47}, {37, 14}, {8, 46}, {1, 14}, {7, 14}, {40, 14}, {49, 10}, {34, 14}, {36, 37}, {12, 10}, {45, 39}, {16, 47}, {21, 45}, {18, 16}, {41, 34}, {6, 14}, {33, 12}, {23, 21}, {24, 49}, {15, 24}, {38, 24}, {19, 36}, {3, 36}, {26, 8}, {25, 7}, {32, 6}, {22, 1}, {31, 49}, {27, 34}, {20, 46}, {42, 27}, {11, 36}, {9, 35}, {13, 23}, {28, 27}, {44, 13}, {2, 16}, {4, 28}, {17, 27}, {30, 45}, {5, 21}});
//        collectingDiamonds.getCountPq(20, 19, new int[]{668, 236, 330, 626, 973, 288, 177, 3, 763, 976, 202, 257, 190, 970, 704, 806, 825, 473, 993, 632},
//                new int[][]{{14, 15}, {8, 14}, {5, 14}, {1, 14}, {17, 5}, {10, 8}, {13, 8}, {3, 15}, {20, 17}, {11, 10}, {19, 13}, {6, 1}, {4, 11}, {9, 4}, {2, 8}, {18, 1}, {7, 3}, {12, 11}, {16, 4}});
//        collectingDiamonds.getCount(30, 19, new int[]{947, 978, 180, 984, 539, 85, 710, 114, 592, 519, 943, 265, 507, 103, 208, 600, 489, 539, 534, 114, 35, 975, 199, 153, 230, 614, 409, 174, 536, 506}, new int[][]{{24, 29}, {
//                17, 29}, {1, 17}, {3, 17}, {11, 29}, {8, 1}, {19, 1}, {12, 24}, {15, 3}, {10, 3}, {28, 17}, {20, 19}, {18, 28}, {2, 12}, {
//                26, 20}, {14, 12}, {7, 3}, {22, 1}, {27, 7}, {23, 26}, {30, 19}, {6, 30}, {9, 1}, {21, 30}, {5, 3}, {25, 8}, {4, 3}, {13, 17}, {
//                16, 13}});

//        ClimbUp climbUp = new ClimbUp();
//        climbUp.getWinnerTwo(mainTree, 10, 6);

//        BackPack backPack = new BackPack();
//        backPack.backPack(12, new int[]{2, 3, 5, 7});

//        BackPackV backPackV = new BackPackV();
//        backPackV.backPackV(new int[]{1, 2, 3, 3, 7}, 7);

//        BackPackVI backPackVI = new BackPackVI();
//        backPackVI.backPackVI(new int[]{1, 2, 4}, 4);

//        BackPackVII backPackVII = new BackPackVII();
//        backPackVII.backPackVIITwo(8, new int[]{3, 2}, new int[]{300, 160}, new int[]{1, 6});

//        FloatCombinationSum floatCombinationSum = new FloatCombinationSum();
//        floatCombinationSum.getArray(new double[]{1.3, 1.4, 2.1, 4.5, 3.3}, 12);

//        CollatzConjecture collatzConjecture = new CollatzConjecture();
//        collatzConjecture.findLongestSteps(20);

//        DisplayPage displayPage = new DisplayPage();
//        displayPage.displayPagesTwo(new ArrayList<>(Arrays.asList("1,28,300.1,SanFrancisco",
//                "4,5,209.1,SanFrancisco",
//                "20,7,208.1,SanFrancisco",
//                "23,8,207.1,SanFrancisco",
//                "16,10,206.1,Oakland",
//                "1,16,205.1,SanFrancisco",
//                "6,29,204.1,SanFrancisco",
//                "7,20,203.1,SanFrancisco",
//                "8,21,202.1,SanFrancisco",
//                "2,18,201.1,SanFrancisco",
//                "2,30,200.1,SanFrancisco",
//                "15,27,109.1,Oakland",
//                "10,13,108.1,Oakland",
//                "11,26,107.1,Oakland",
//                "12,9,106.1,Oakland",
//                "13,1,105.1,Oakland",
//                "22,17,104.1,Oakland",
//                "1,2,103.1,Oakland",
//                "28,24,102.1,Oakland",
//                "18,14,11.1,SanJose",
//                "6,25,10.1,Oakland",
//                "19,15,9.1,SanJose",
//                "3,19,8.1,SanJose",
//                "3,11,7.1,Oakland",
//                "27,12,6.1,Oakland",
//                "1,3,5.1,Oakland",
//                "25,4,4.1,SanJose",
//                "5,6,3.1,SanJose",
//                "29,22,2.1,SanJose",
//                "30,23,1.1,SanJose")), 12);

//        KEditDistance kEditDistance = new KEditDistance();
//        kEditDistance.kDistanceTwo(new String[]{"abc", "abd", "abcd", "adc"}, "ac", 1);

//        TheBiggestScoreOnTheTree theBiggestScoreOnTheTree = new TheBiggestScoreOnTheTree();
//        theBiggestScoreOnTheTree.getMaxScore(new int[]{0, 0, 0}, new int[]{1, 2, 3}, new int[]{1, 1, 1}, new int[]{1, 1, 2, 3});

//        WordSubsets wordSubsets = new WordSubsets();
//        wordSubsets.wordSubsets(new String[]{"amazon", "apple", "facebook", "google", "lintcode"}, new String[]{"e", "oo"});

//        CalculateBoardScore calculateBoardScore = new CalculateBoardScore();
//        calculateBoardScore.calculateScore(new String[]{"L0 W1 W1 W0 F2",
//                "W0 W0 T0 T0 T0",
//                "W0 W1 T0 R2 R1",
//                "L0 K0 L1 L0 L0",
//                "R0 C2 C0 L1 T0"});

//        SimplifiedXMLValidator simplifiedXMLValidator = new SimplifiedXMLValidator();
//        simplifiedXMLValidator.validXml("<a>text<b>other text</></b>");

//        FindStringsThatDifferByOneCharacter findStringsThatDifferByOneCharacter = new FindStringsThatDifferByOneCharacter();
//        findStringsThatDifferByOneCharacter.findTwo(new String[]{"abc", "xyz", "abd"});

//        LowestCommonAncestorOfTwoRegions lowestCommonAncestorOfTwoRegions = new LowestCommonAncestorOfTwoRegions();
//        List<List<String>> input = new ArrayList();
//        input.add(new ArrayList<String>(
//                Arrays.asList("Earth", "South America", "North America", "Asia", "Africa", "Pacific")));
//        input.add(new ArrayList<String>(Arrays.asList("Asia", "China", "Korea", "Japan", "India")));
//        input.add(new ArrayList<String>(Arrays.asList("North America", "USA", "Canada")));
//        input.add(new ArrayList<String>(Arrays.asList("South America", "Brazil", "Columbia")));
//        input.add(new ArrayList<String>(Arrays.asList("Africa", "Algeria", "Libya")));
//        input.add(new ArrayList<String>(Arrays.asList("China", "Beijing", "Shanghai")));
//        input.add(new ArrayList<String>(Arrays.asList("Japan", "Tokyo", "Kyoto")));
//        input.add(new ArrayList<String>(Arrays.asList("India", "Hyderabad", "Chennai")));
//        input.add(new ArrayList<String>(Arrays.asList("Korea", "Seoul")));
//        lowestCommonAncestorOfTwoRegions.solution(Arrays.asList(
//                new String[]{"Earth", "South America", "North America", "Asia", "Africa", "Pacific"},
//                new String[]{"Asia", "China", "Korea", "Japan", "India"},
//                new String[]{"North America", "USA", "Canada"},
//                new String[]{"Africa", "Algeria", "Libya"},
//                new String[]{"China", "Beijing", "Shanghai"},
//                new String[]{"Japan", "Tokyo", "Kyoto"},
//                new String[]{"India", "Hyderabad", "Chennai"},
//                new String[]{"Korea", "Seoul"}
//                ),
//                Arrays.asList(new String[]{"Asia", "North America"}, new String[]{"Beijing", "Japan"}, new String[]{"Beijing", "Hyderabad"}));
//        lowestCommonAncestorOfTwoRegions.buildMap(input);
//        System.out.println(lowestCommonAncestorOfTwoRegions.getCommonAncestor("Asia", "North America"));
//        System.out.println(lowestCommonAncestorOfTwoRegions.getCommonAncestor("Beijing", "Japan"));
//        System.out.println(lowestCommonAncestorOfTwoRegions.getCommonAncestor("Beijing", "Hyderabad"));

//        CoverAllVerticesWithTheLeastNumberOfVertices coverAllVerticesWithTheLeastNumberOfVertices = new CoverAllVerticesWithTheLeastNumberOfVertices();
//        coverAllVerticesWithTheLeastNumberOfVertices.findMinNodes(6, new int[][]{{0, 1}, {2, 1}, {1, 0}, {1, 3}, {5, 4}});

//        ShortestPathInDirectedGraphThatCanVisitEachVertexAtLeastOnce shortestPathInDirectedGraphThatCanVisitEachVertexAtLeastOnce = new ShortestPathInDirectedGraphThatCanVisitEachVertexAtLeastOnce();
//        shortestPathInDirectedGraphThatCanVisitEachVertexAtLeastOnce.shortestPathLength(6, new int[][]{{1, 2}, {2, 3}, {3, 5}, {5, 6}, {4, 6}, {1, 4}});

//        MenuCombinationSum menuCombinationSum = new MenuCombinationSum();
//        menuCombinationSum.solution(new double[]{10.02, 1.11, 2.22, 3.01, 4.02, 2.00, 5.03}, 7.03);

//        SimulateDiplomacy simulateDiplomacy = new SimulateDiplomacy();
//        simulateDiplomacy.solutionTwo(Arrays.asList("A Munich Hold", "B Bohemia Move Munich", "C Warsaw Support B"));
//        simulateDiplomacy.solution(Arrays.asList("A Munich Hold", "B Bohemia Move Munich", "C Prussia Move Munich", "D Warsaw Hold"));
//        simulateDiplomacy.solutionTwo(Arrays.asList("A Munich Support B", "B Bohemia Move Prussia", "C Prussia Hold", "D Warsaw Move Munich"));

//        MaximumPossibleValue maximumPossibleValue = new MaximumPossibleValue();
//        maximumPossibleValue.MaximumPossibleValue(-123);

//        double up = 500, down = 1.06;
//        for (int i = 1; i <= 10; i++) {
//            double newDown = Math.pow(down, i);
//            System.out.println(up / newDown);
//        }

//        TicTacToePrac ticTacToePrac = new TicTacToePrac();
//        ticTacToePrac.add('X', 0, 1);
//        Scanner scanner = new Scanner(System.in);
//        System.out.println("Enter row col, split by space");
//        int row = scanner.nextInt();
//        int col = scanner.nextInt();
//        System.out.println("Row: " + row + "; Col: " + col);
//        scanner.next();
//        while (true) {
//            ticTacToePrac.add('X', 0, 1);
//            ticTacToePrac.aiMove();
//            ticTacToePrac.print();
//        }

//        MinAdjacentSwapsToMakePalindrome minAdjacentSwapsToMakePalindrome = new MinAdjacentSwapsToMakePalindrome();
//        minAdjacentSwapsToMakePalindrome.solution("aabbcc");

//        LexicographicallySmallestString lexicographicallySmallestString = new LexicographicallySmallestString();
//        lexicographicallySmallestString.solution("dabczd");

//        MinDeletionsToMakeFrequencyOfEachLetterUnique minDeletionsToMakeFrequencyOfEachLetterUnique = new MinDeletionsToMakeFrequencyOfEachLetterUnique();
//        minDeletionsToMakeFrequencyOfEachLetterUnique.solution("example");

//        StringWithoutThreeIdenticalConsecutiveLetters stringWithoutThreeIdenticalConsecutiveLetters = new StringWithoutThreeIdenticalConsecutiveLetters();
//        stringWithoutThreeIdenticalConsecutiveLetters.solution("uuuuxaaaaxuuu");

//        LongestSemiAlternatingSubstring longestSemiAlternatingSubstring = new LongestSemiAlternatingSubstring();
//        longestSemiAlternatingSubstring.solution("baaabbabbb");

//        StrStrII strStrII = new StrStrII();
//        strStrII.strStr2("abcdefg", "cde");

//        MinDeletionsToObtainStringInRightFormat minDeletionsToObtainStringInRightFormat = new MinDeletionsToObtainStringInRightFormat();
//        minDeletionsToObtainStringInRightFormat.solution("BAAABAB");

//        MinSwapsToGroupRedBalls minSwapsToGroupRedBalls = new MinSwapsToGroupRedBalls();
//        minSwapsToGroupRedBalls.solution("WWRWWWRWRWRWR");

//        TakeTheElementAndQueryTheSum takeTheElementAndQueryTheSum = new TakeTheElementAndQueryTheSum();
//        takeTheElementAndQueryTheSum.takeTheElementAndQueryTheSum(new int[]{1, 2, 3, 4, 5});

//        MinimumString minimumString = new MinimumString();
//        minimumString.MinimumString("cba".toCharArray(), 2);

//        NumberOfValidSubarrays numberOfValidSubarrays = new NumberOfValidSubarrays();
//        numberOfValidSubarrays.solution(new int[]{1, 4, 2, 5, 3});

//        PalindromeDataStream palindromeDataStream = new PalindromeDataStream();
//        palindromeDataStream.getStream("abcdeabcd");

//        StringReplace stringReplace = new StringReplace();
//        stringReplace.stringReplace(new String[]{"ab", "aba"}, new String[]{"cc", "ccc"}, "ababa");

//        InorderPredecessorInBST inorderPredecessorInBST = new InorderPredecessorInBST();
//        inorderPredecessorInBST.inorderPredecessorTwo(node1, node1.right);

//        BinaryStream binaryStream = new BinaryStream();
//        binaryStream.getOutput("11011");

//        getDays(Arrays.asList(Arrays.asList(1, 0, 0), Arrays.asList(0, 0, 0), Arrays.asList(0, 0, 0)));

//        HowManyProblemCanIAccept howManyProblemCanIAccept = new HowManyProblemCanIAccept();
//        howManyProblemCanIAccept.canAccept(100l, 5);

//        JosephProblem josephProblem = new JosephProblem();
//        josephProblem.josephProblem(100, 7);

//        PossibleValidWords possibleValidWords = new PossibleValidWords();
//        possibleValidWords.solution(new char[]{'e', 'o', 'b', 'a', 'm', 'g', 'l', 'g', 'l'}, new String[]{"go", "bat", "me", "eat", "goal", "boy", "run", "ggll"});

//        FarthestCoprime farthestCoprime = new FarthestCoprime();
//        farthestCoprime.farthestCoprimes(250);

//        Scanner input = new Scanner(System.in);
//        int numCases = input.nextInt();
//        YouCanGoYourOwnWay youCanGoYourOwnWay = new YouCanGoYourOwnWay();
//        for (int i = 1; i <= numCases; i++) {
//            int num = input.nextInt();
//            String str = input.next();
//            System.out.println("Case #" + num + ": " + youCanGoYourOwnWay.solution(num, str));
//        }

        sparkExample();
    }


    /**
     * Interview questions
     */

//    static class Cons {
//        static String str;
//
//        public void Cons() {
//            System.out.println("in con");
//            str = "world";
//        }
//
//        public void bla() {
//            Cons c = new Cons();
//            System.out.println(str);
//        }
//    }

//    public static void bla() {
//        try {
//            Float f1 = new Float("3.0");
//            int x = f1.intValue();
//            byte b = f1.byteValue();
//            double d = f1.doubleValue();
//            System.out.println(x + b + d);
//        } catch (NumberFormatException e) {
//            System.out.println("bad");
//        }
//        boolean b1 = true, b2 = false, b3 = true;
//        if (b1 & b2 | b2 & b3 | b2)
//            System.out.println("ok");
//        if (b1 & b2 | b2 & b3 | b2 | b1)
//            System.out.println("duh");

//        PriorityQueue<String> pq = new PriorityQueue<>();
//        pq.add("laundry");
//        pq.add("bills");
//        pq.offer("bills");
//        System.out.println(pq.size() + " " + pq.poll());
//        System.out.println(" " + pq.peek() + " " + pq.poll());
//        System.out.println(" " + pq.poll() + " " + pq.poll());

//        try {
//            bad();
//            System.out.println("A");
//        } catch (Exception e) {
//            System.out.println("B");
//        } finally {
//            System.out.println("C");
//        }
//        System.out.println("D");

//        try {
//            System.out.println(doStuff("x"));
//        } catch (Exception e) {
//            System.out.println("exc");
//        }
//        doStuff("x");

//        String[] cities = {"Bla", "Pune", "San", "New"};
//        Arrays.sort(cities, ((a, b) -> (b.compareTo(a))));
//        System.out.println(Arrays.binarySearch(cities, "New"));
//    }

//    static public int doStuff(String x) {
//        return Integer.parseInt(x);
//    }

//    public static void bad() {
//    }

//    static class MyPanCake implements PanCake {
//
//        public MyPanCake() {
//            List<String> x = Arrays.asList("3", "7", "5");
//            List<String> y = new MyPanCake().doStuff(x);
//            y.add("1");
//            System.out.println(x);
//        }
//
//        @Override
//        public List<String> doStuff(List<String> z) {
//            z.add("9");
//            return z;
//        }
//    }
//
//    interface PanCake {
//        List<String> doStuff(List<String> s);
//    }

//    static class SampleDemo implements Runnable {
//
//        private Thread t;
//        private String threadName;
//
//        SampleDemo(String threadName) {
//            this.threadName = threadName;
//        }
//
//        @Override
//        public void run() {
//            while (true) {
//                System.out.println(threadName);
//            }
//        }
//
//        public void start() {
//            if (t == null) {
//                t = new Thread(this, threadName);
//                t.start();
//            }
//        }
//    }

//    private static final String TEXT = "I am a {0} account with {1,number,#} units of {2} currency";
//
//    static class AccountType {
//        String name;
//
//        public AccountType(String name) {
//            this.name = name;
//        }
//
//        public String getName() {
//            return name;
//        }
//
//        public void setName(String name) {
//            this.name = name;
//        }
//    }
//
//    static class BankAccount {
//        Integer units;
//        String currency;
//        AccountType accountType;
//
//        public BankAccount(String currency, Integer units) {
//            this.currency = currency;
//            this.units = units;
//        }
//
//        public Integer getUnits() {
//            return units;
//        }
//
//        public void setUnits(Integer units) {
//            this.units = units;
//        }
//
//        public String getCurrency() {
//            return currency;
//        }
//
//        public void setCurrency(String currency) {
//            this.currency = currency;
//        }
//
//        public AccountType getAccountType() {
//            return accountType;
//        }
//
//        public void setAccountType(AccountType accountType) {
//            this.accountType = accountType;
//        }
//    }
//
//    static class SavingsAccount extends BankAccount {
//
//        public SavingsAccount(String currency, Integer units) {
//            super(currency, units);
//            this.accountType = new AccountType("Savings");
//        }
//    }
//
//    static class CheckingAccount extends BankAccount {
//
//        public CheckingAccount(String currency, Integer units) {
//            super(currency, units);
//            this.accountType = new AccountType("Checking");
//        }
//    }
//
//    static class BrokerageAccount extends BankAccount {
//
//        public BrokerageAccount(String currency, Integer units) {
//            super(currency, units);
//            this.accountType = new AccountType("Brokerage");
//        }
//    }

//    static int maxMoney(int n, long k) {
//        int[] max = new int[n + 1];
//        max[0] = 0;
//        if ((int) k == 1) {
//            max[1] = 0;
//        } else {
//            max[1] = 1;
//        }
//        for (int i = 2; i < n + 1; i++) {
//            if (max[i - 1] + i == (int) k) {
//                max[i] = Math.max(max[i - 1] - 1, max[i - 2]) + i;
//            } else {
//                max[i] = max[i - 1] + i;
//            }
//        }
//        return max[n] < Integer.MAX_VALUE ? max[n] : n % (int) Math.pow(10, 9) + 7;

//        int max = 0, prevMax = 0;
//        if ((int) k == 1) {
//            max = 0;
//        } else {
//            max = 1;
//        }
//        for (int i = 2; i < n + 1; i++) {
//            if (max + i == (int) k) {
//                prevMax = max;
//                max = prevMax + i - 1;
//            } else {
//                prevMax = max;
//                max += i;
//            }
//        }
//        return max < Integer.MAX_VALUE ? max : max % (int) Math.pow(10, 9) + 7;
//    }

//    static List<Integer> commandCount(List<String> commands) {
//        List<Integer> result = new ArrayList<>();
//        if (commands == null || commands.size() == 0)
//            return result;
//
//        String pattern = "(\\w)([0-9]*\\w*\\:*)(\\/)([0-9a-z]+)(\\\\)(\\w+)+";
//        Pattern r = Pattern.compile(pattern);
//
//        for (int i = 0; i < commands.size(); i++) {
//            String str = commands.get(i);
//            Matcher m = r.matcher(str);
//            if (m.find()) {
//                int total = 0;
//                String temp = m.group(1) + m.group(2);
//                int count = temp.replaceAll("\\W", "").length();
//                total += count * m.group(6).length();
//                while (m.end(6) < str.length()) {
//                    String sec = str.substring(m.end(5));
//                    m = r.matcher(sec);
//                    if (m.find()) {
//                        temp = m.group(1) + m.group(2);
//                        count = temp.replaceAll("\\W", "").length();
//                        total += count * m.group(6).length();
//                    }
//                }
//                result.add(total);
//            } else {
//                result.add(0);
//            }
//        }
//        return result;
//    }


//    static long waitingTime(int[] spinners, int p) {
//        long res = 0;
//        List<Integer> lessThan = new ArrayList<>();
//        int needed = spinners[p];
//        for (int n : spinners) {
//            if (n < needed) {
//                lessThan.add(n);
//            }
//        }
//
//        Collections.sort(lessThan);
//
//        int size = spinners.length;
//        int pre = 0;
//        for (int n : lessThan) {
//            if (n == pre) {
//                size--;
//                continue;
//            }
//            res += (n - pre) * size--;
//            pre = n;
//        }
//
//        for (int i = 0; i <= p; i++) {
//            if (spinners[i] > pre)
//                res++;
//        }
//
////        while (spinners[p] > 1) {
////            for (int i = 0; i < spinners.length; i++) {
////                if (spinners[i] < 0)
////                    continue;
////                spinners[i]--;
////                res++;
////            }
////        }
////
////        for (int i = 0; i <= p; i++) {
////            if (spinners[i] > 0)
////                res++;
////        }
//
//        return res;
//    }
//    public static List<List<Integer>> findMatrix(List<List<Integer>> a) {
//        // Write your code here
//        int m = a.size(), n = a.get(0).size();
//        List<List<Integer>> res = a;
//        for (int i = 0; i < m; i++) {
//            for (int j = 0; j < n; j++) {
//                int left = j == 0 ? 0 : res.get(i).get(j - 1);
//                int up = i == 0 ? 0 : res.get(i - 1).get(j);
//                int corner = (i == 0 || j == 0) ? 0 : res.get(i - 1).get(j - 1);
//                int cur = res.get(i).get(j);
//                res.get(i).set(j, cur + left + up - corner);
//            }
//        }
//        return res;
//    }
//
//    public static String wordCount(String toCount) {
//        if (toCount == null || toCount.length() == 0)
//            return "";
//        String[] strs = toCount.split(" ");
//        TreeMap<String, Integer> map = new TreeMap<>();
//        for (String str : strs) {
//            String s = str.toLowerCase();
//            if (!map.containsKey(s))
//                map.put(s, 1);
//            else
//                map.put(s, map.get(s) + 1);
////            map.put(s, map.getOrDefault(s, 1) + 1);
//        }
//        StringBuilder sb = new StringBuilder();
//        for (Map.Entry<String, Integer> entry : map.entrySet()) {
//            sb.append(entry.getKey()).append(" - ").append(entry.getValue());
//            if (map.size() > 1)
//                sb.append("; ");
//        }
//        return sb.toString();
//    }

//    private static String encode(String text) {
//        StringBuilder b = new StringBuilder();
//        for (int i = 0; i < text.length(); i++) {
//            char c = text.charAt(i);
//            c += c + i;
//            b.append(c);
//        }
//        return b.reverse().toString();
//    }
//
//    private static String decode(String encodedMessage) {
//        StringBuilder sb = new StringBuilder(encodedMessage).reverse();
//        for (int i = 0; i < encodedMessage.length(); i++) {
//            char c = sb.charAt(i);
//            c = (char) ((c - i) / 2);
//            sb.setCharAt(i, c);
//        }
//        return sb.toString();
//    }
//
//    private static int[][] splitOrderFills(int[] orders, int[] fills) {
//        if (orders == null || orders.length == 0 || fills == null || fills.length == 0)
//            return null;
//        int oLen = orders.length, fLen = fills.length;
//        int[][] res = new int[fLen][oLen];
//        int ordersSum = 0, fillsSum = 0;
//        for (int o : orders)
//            ordersSum += o;
//        for (int f : fills)
//            fillsSum += f;
//        if (ordersSum != fillsSum)
//            return null;
//        double[] ratio = new double[oLen];
//        for (int i = 0; i < ratio.length; i++) {
//            ratio[i] = (double) orders[i] / ordersSum;
//        }
//        int[] soFar = new int[oLen];
//        for (int i = 0; i < fLen; i++) {
//            if (i != fLen - 1) {
//                for (int j = 0; j < oLen; j++) {
//                    res[i][j] = (int) (fills[i] * ratio[j]);
//                    if (j == oLen - 1 && fills[i] % oLen != 0) {
//                        res[i][j] += fills[i] % oLen;
//                    }
//                    soFar[j] += res[i][j];
//                }
//            } else {
//                for (int j = 0; j < oLen; j++) {
//                    res[i][j] = orders[j] - soFar[j];
//                }
//            }
//        }
//        return res;
//    }
//
//    public static List<String> orderedJunctionBoxes(int numberOfBoxes,
//                                                    List<String> boxList) {
//        // WRITE YOUR CODE HERE
//        if (numberOfBoxes != boxList.size())
//            return null;
//        Set<String> visited = new HashSet<>();
//        List<String> res = new ArrayList<>();
//        PriorityQueue<String[]> pq = new PriorityQueue<>((a, b) -> a[1].equals(b[1]) ? a[0].compareTo(b[0]) : a[1].compareTo(b[1]));
//        for (String box : boxList) {
//            int idx = box.indexOf(' ');
//            String key = box.substring(0, idx);
//            String val = box.substring(idx + 1);
//            if (Character.isLetter(val.charAt(0))) {
//                pq.offer(new String[]{key, val});
//                visited.add(box);
//            }
//        }
//        while (!pq.isEmpty()) {
//            String[] cur = pq.poll();
//            String temp = cur[0] + " " + cur[1];
//            res.add(temp);
//        }
//        for (int i = 0; i < boxList.size(); i++) {
//            if (!visited.contains(boxList.get(i)))
//                res.add(boxList.get(i));
//        }
//        return res;
//    }
//
//    public static List<List<Integer>> optimalUtilization(int deviceCapacity,
//                                                         List<List<Integer>> foregroundAppList,
//                                                         List<List<Integer>> backgroundAppList) {
//        // WRITE YOUR CODE HERE
//        if (foregroundAppList == null || backgroundAppList == null || foregroundAppList.size() == 0 || backgroundAppList.size() == 0)
//            return null;
//        List<List<Integer>> res = new ArrayList<>();
//        Map<Integer, List<Integer>> foreMap = new HashMap<>();
//        for (List<Integer> fore : foregroundAppList) {
//            foreMap.putIfAbsent(fore.get(1), new ArrayList<>());
//            foreMap.get(fore.get(1)).add(fore.get(0));
//        }
//        boolean foundMax = false;
//        for (int i = deviceCapacity; i >= 0; i--) {
//            if (foundMax)
//                break;
//            for (List<Integer> back : backgroundAppList) {
//                if (foreMap.containsKey(i - back.get(1))) {
//                    List<Integer> indexes = foreMap.get(i - back.get(1));
//                    for (int idx : indexes) {
//                        res.add(Arrays.asList(idx, back.get(0)));
//                    }
//                    foundMax = true;
//                }
//            }
//        }
//        return res;
//    }
//
//    public static List<List<Integer>> optimalUtilizationTwo(int deviceCapacity,
//                                                            List<List<Integer>> foregroundAppList,
//                                                            List<List<Integer>> backgroundAppList) {
//        // WRITE YOUR CODE HERE
//        if (foregroundAppList == null || backgroundAppList == null || foregroundAppList.size() == 0 || backgroundAppList.size() == 0)
//            return null;
//        Collections.sort(foregroundAppList, (a, b) -> a.get(1) - b.get(1));
//        Collections.sort(backgroundAppList, (a, b) -> a.get(1) - b.get(1));
//        List<List<Integer>> res = new ArrayList<>();
//        Map<Integer, List<List<Integer>>> map = new HashMap<>();
//        int max = Integer.MIN_VALUE;
//        for (int i = foregroundAppList.size() - 1; i >= 0; i--) {
//            for (int j = backgroundAppList.size() - 1; j >= 0; j--) {
//                int sum = foregroundAppList.get(i).get(1) + backgroundAppList.get(j).get(1);
//                if (sum < max) {
//                    break;
//                }
//                if (sum <= deviceCapacity) {
//                    map.putIfAbsent(sum, new ArrayList<>());
//                    List<Integer> idx = Arrays.asList(foregroundAppList.get(i).get(0), backgroundAppList.get(j).get(0));
//                    map.get(sum).add(idx);
//                    max = Math.max(sum, max);
//                }
//            }
//        }
//        return map.get(max);
//    }
//    public static int getDays(List<List<Integer>> grid) {
//        if (grid == null || grid.size() == 0)
//            return 0;
//        int m = grid.size(), n = grid.get(0).size();
//        // use a boolean array to track which position we already visited
//        boolean[][] visited = new boolean[m][n];
//        // use queue to store all the 1's in current day.
//        Queue<int[]> q = new LinkedList<>();
//        for (int i = 0; i < m; i++) {
//            for (int j = 0; j < n; j++) {
//                if (grid.get(i).get(j) == 1) {
//                    visited[i][j] = true;
//                    q.offer(new int[]{i, j});
//                }
//            }
//        }
//        // if no 1 found or all position are already 1, just return 0
//        if (q.size() == 0 || q.size() == m * n)
//            return 0;
//        int days = 0;
//        int[][] dirs = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}}; // 4 direction move
//        while (!q.isEmpty()) {
//            int size = q.size(); // we only iterate all the 1's in current day.
//            while (size-- > 0) {
//                int[] cur = q.poll();
//                for (int[] d : dirs) {
//                    int x = cur[0] + d[0], y = cur[1] + d[1];
//                    // if out of range or already visited, just skip
//                    if (x < 0 || x >= m || y < 0 || y >= n || visited[x][y])
//                        continue;
//                    // mark the unvisted to be visited and put it into the queue
//                    visited[x][y] = true;
//                    q.offer(new int[]{x, y});
//                }
//            }
//            days++;
//        }
//        return days;
//    }
    public static void sparkExample() {
        SparkConf conf = new SparkConf().setMaster("local[*]").setAppName("SparkFileSumApp");
        JavaSparkContext sc = new JavaSparkContext(conf);
        JavaRDD<String> input = sc.textFile("file:///Users/tang/Documents/workspace/algorithmPractice/src/main/resources/numbers.txt");
        JavaRDD<String> numberStrings = input.flatMap(s -> Arrays.asList(SPACE_DELIMITER.split(s)).iterator());
        JavaRDD<String> validNumberString = numberStrings.filter(string -> !string.isEmpty());
        JavaRDD<Integer> numbers = validNumberString.map(numberString -> Integer.valueOf(numberString));
        int finalSum = numbers.reduce((x, y) -> x + y);

        System.out.println("Final sum is: " + finalSum);

        sc.close();
    }
}
