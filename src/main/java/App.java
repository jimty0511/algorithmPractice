import practice.AllPractices;
import practice.domain.*;
import practice.problem.*;

import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {
//    public String getGreeting() {
//        return "Hello world.";
//    }

    public static void main(String[] args) {

        AllPractices ap = new AllPractices();

//        System.out.println(new App().getGreeting());

//        int[] ints = new int[]{2, 2, 3, 4};
//        int[] res = findErrorNums(ints);

//        TreeNode treeNode1 = new TreeNode(1);
//        TreeNode treeNode2 = new TreeNode(2);
//        TreeNode treeNode3 = new TreeNode(-1);
//        TreeNode treeNode4 = new TreeNode(-1);
//        TreeNode treeNode5 = new TreeNode(2);
//
//        treeNode1.left = treeNode2;
//        treeNode1.right = treeNode3;
//        treeNode2.left = treeNode4;
//        treeNode3.right = treeNode5;

//        int n = pathSum(treeNode1, 2);

//        int i = 8;
////        hammingWeight(i);
////        boolean res = isUgly(300);
//        int[] ints = new int[]{1, 12, -5, -6, 50, 3};
//        int[] ints2 = new int[]{1, 12, -5, -6, 12, 1};
////        double res = findMaxAverage(ints, 4);

        MergeTwoLists mergeTwoLists = new MergeTwoLists();
        ListNode l1 = new ListNode(1);
        l1.next = new ListNode(3);
        l1.next.next = new ListNode(5);
        ListNode l2 = new ListNode(2);
        l2.next = new ListNode(4);
        l2.next.next = new ListNode(6);
//
        ListNode l3 = mergeTwoLists.mergeTwoListsIter(l1, l2);
////        int length = removeElement(ints2, 1);
//        int[] ints4 = new int[]{1, 3, 5, 6};
////        int[] plusOne = plusOne(ints4);
////        getRow(3);
////        isPowerOfFour(16);
//
//        String[] list1 = {"Shogun", "Tapioca Express", "Burger King", "KFC"};
//        String[] list2 = {"KFC", "Shogun", "Burger King"};
////        String[] res = findRestaurant(list1, list2);
////        System.out.println(res);
//
//
//        int arr[] = {9, 2, 3, 4, 5, 6, 7, 8, 18, 0};
//        int n = arr.length;
////        int maxDiff = maxIndexDiffTwo(arr, n);
////        System.out.println(maxDiff);
//
//        String[] morseString = {"shogun", "tapioc", "burger", "kfc"};
////        System.out.println(uniqueMorseRepresentations(morseString));
//
////        System.out.println(selfDividingNumbers(9, 22));
//        String[] domains = {"900 google.mail.com", "50 yahoo.com", "1 intel.mail.com", "5 wiki.org"};
////        System.out.println(subdomainVisits(domains));
//
//        int[] widths = {4, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10};
//        String s = "bbbcccdddaaa";
////        System.out.println(numberOfLines(widths, s));
//
//        String[] points = {"5", "-2", "4", "C", "D", "9", "+", "+"};
////        System.out.println(calPoints(points));
//
//        int[][] matrix = {{1, 2, 3, 4}, {5, 1, 2, 3}, {9, 5, 1, 2}};
////        System.out.println(isToeplitzMatrix(matrix));
//
////        System.out.println(hasAlternatingBits(43));
////        System.out.println(countBits(15));
//        int[][] trianglePoints = {{0, 0}, {0, 1}, {1, 0}, {2, 0}, {0, 2}};
////        System.out.println(largestTriangleArea(trianglePoints));
//
//        int[][] oldMatrix = {{1, 2}, {3, 4}};
////        System.out.println(matrixReshape(oldMatrix, 1, 4));
//
////        System.out.println(countPrimes(100));
//
////        System.out.println(letterCasePermutation("a1b2"));
//        int[][] flip = {{1, 1, 0}, {1, 0, 1}, {0, 0, 0}};
//
//        System.out.println(flipAndInvertImage(flip));

        Employee employee1 = new Employee();
        employee1.id = 1;
        employee1.importance = 5;
        employee1.subordinates = Arrays.asList(2, 3);

        Employee employee2 = new Employee();
        employee2.id = 2;
        employee2.importance = 3;
        employee2.subordinates = new ArrayList<>();

        Employee employee3 = new Employee();
        employee3.id = 3;
        employee3.importance = 3;
        employee3.subordinates = new ArrayList<>();

        List<Employee> employeeList = Arrays.asList(employee1, employee2, employee3);
        Stream<List<Employee>> listStream = Stream.of(employeeList);
        System.out.println(ap.getImportance(employeeList, 1));

        List<String> a = Arrays.asList("a", "b", "c", "f");
        List<String> b = Arrays.asList("a", "b", "c", "d", "f");
        List<String> c = Arrays.asList("d", "e", "f", "g");

        List<List<String>> lists = new ArrayList<List<String>>();
        lists.add(a);
        lists.add(b);
        lists.add(c);
        List<String> collect = lists.stream().flatMap(x -> x.stream()).distinct().collect(Collectors.toList());
        System.out.println("Common in A & B & C: " + ap.getCommonElements(lists));

        Map<String, List<Integer>> strIntMap = new HashMap<>();
        strIntMap.put("Jim", Arrays.asList(1, 2, 3));
        strIntMap.put("Qwe", Arrays.asList(1));
        strIntMap.put("Asd", Arrays.asList(2));
        strIntMap.put("Zxc", Arrays.asList(2, 3));
        strIntMap.put("Poi", Arrays.asList(1, 3));

        Staff jimInt = new Staff();
        jimInt.setName("Jim");
        jimInt.setIntegerList(Arrays.asList(1, 2, 3));

        Staff staff1Int = new Staff();
        staff1Int.setName("staff1");
        staff1Int.setIntegerList(Arrays.asList(3));

        Staff staff2Int = new Staff();
        staff2Int.setName("staff2");
        staff2Int.setIntegerList(Arrays.asList(2));

        Staff staff3Int = new Staff();
        staff3Int.setName("staff3");
        staff3Int.setIntegerList(Arrays.asList(2, 3));

        Staff jimStr = new Staff();
        jimStr.setName("Jim");
        jimStr.setStringList(Arrays.asList("one", "two", "three"));

        Staff staff1Str = new Staff();
        staff1Str.setName("staff1");
        staff1Str.setStringList(Arrays.asList("three"));

        Staff staff2Str = new Staff();
        staff2Str.setName("staff2");
        staff2Str.setStringList(Arrays.asList("two", "three"));

        Staff staff3Str = new Staff();
        staff3Str.setName("staff3");
        staff3Str.setStringList(Arrays.asList("two"));

        List<Staff> staffIntList = Arrays.asList(jimInt, staff1Int, staff2Int, staff3Int);
        List<Staff> staffStrList = Arrays.asList(jimStr, staff1Str, staff2Str, staff3Str);

        List<Staff> staffIntFinalList = staffIntList.stream().filter(staff -> staff.getIntegerList().size() > 1).collect(Collectors.toList());
        List<Staff> staffStrFinalList = staffStrList.stream().filter(staff -> staff.getStringList().size() > 1).collect(Collectors.toList());

        List<String> staffIntFinalListName = staffIntList.stream().filter(staff -> staff.getIntegerList().size() > 1).map(staff -> staff.getName()).collect(Collectors.toList());
        List<String> staffStrFinalListName = staffStrList.stream().filter(staff -> staff.getStringList().size() > 1).map(staff -> staff.getName()).collect(Collectors.toList());

        List<String> StaffMultiIntAndStr = staffIntFinalListName.stream().filter(staffStrFinalListName::contains).collect(Collectors.toList());

        List<Integer> intListForAllStaff = staffIntList.stream().flatMap(staff -> staff.getIntegerList().stream()).collect(Collectors.toList());

        List<String> ultimateStreamList = staffIntList.stream().filter(staff -> staff.getIntegerList().size() > 1).map(staff -> staff.getName())
                .filter(qwe -> staffStrList.stream().filter(staff -> staff.getStringList().size() > 1).map(staff -> staff.getName()).collect(Collectors.toList()).contains(qwe)
                ).collect(Collectors.toList());
        System.out.println(staffIntFinalList);

//        mergeSort(Arrays.asList(34, 3, 21, 6, 0, 32)).forEach(System.out::println);

//        int[][] island = {
//                {0, 0, 0, 0, 0},
//                {0, 1, 0, 1, 0},
//                {0, 1, 1, 1, 0},
//                {0, 0, 0, 1, 0},
//                {1, 1, 1, 0, 0}};

//        System.out.println(maxAreaOfIsland(island));
//
//        System.out.println(rotatedDigits(15));
//
//        System.out.println(countBinarySubstrings("00110001111"));

        TreeNode node1 = new TreeNode(10);
        node1.left = new TreeNode(6);
        node1.right = new TreeNode(12);
        node1.left.left = new TreeNode(2);
        node1.left.right = new TreeNode(9);
        node1.right.right = new TreeNode(15);

//        System.out.println(findTarget(node1, 14));
//
//        System.out.println(tree2str(node1));
//
//        System.out.println(isOneBitCharacter(new int[]{1, 0, 1, 1, 1, 0}));

//        String strWithBanned = "Bob hit a ball, the hit BALL flew far after it wasn't hit.";
//        String[] banned = {"hit"};

//        System.out.println(mostCommonWord(strWithBanned, banned));
//
//        System.out.println(largeGroupPositions("abcdddeeeeaabbbcd"));

        node1.right.left = new TreeNode(11);

//        System.out.println(convertBST(node1));

//        System.out.println(maxCount(3, 3, new int[][]{{3, 3}, {2, 2}, {3, 1}}));
//
//        System.out.println(minMoves(new int[]{2, 1, 3}));
//
//        System.out.println(floodFill(new int[][]{{1, 1, 1}, {1, 1, 0}, {1, 0, 1}}, 1, 1, 2));
//
//        System.out.println(minDiffInBST(node1));
//
//        System.out.println(findShortestSubArray(new int[]{1, 2, 2, 3, 1, 2, 1}));
//
//        System.out.println(imageSmootherTwo(new int[][]{{9, 8, 7}, {6, 5, 4}, {3, 2, 1}}));
//
//        System.out.println(nextGreatestLetter(new char[]{'c', 'f', 'j'}, 'd'));
//
//        System.out.println(minCostClimbingStairs(new int[]{1, 100, 1, 1, 1, 100, 1, 1, 100, 1}));
//
//        System.out.println(longestCommonPrefix(new String[]{"flower", "flow", "flight"}));
//
//        System.out.println(nthUglyNumber(15));
//
//        System.out.println(findLengthOfLCIS(new int[]{1, 3, 5, 4, 6, 7, 8, 9}));

        TreeNode secondMin = new TreeNode(2);
        secondMin.left = new TreeNode(4);
        secondMin.left.left = new TreeNode(4);
        secondMin.left.right = new TreeNode(6);
        secondMin.right = new TreeNode(2);
        secondMin.right.left = new TreeNode(2);
        secondMin.right.right = new TreeNode(8);
        secondMin.right.left.left = new TreeNode(2);
        secondMin.right.left.right = new TreeNode(3);

//        System.out.println(findSecondMinimumValue(secondMin));
//
//        System.out.println(findLHS(new int[]{1, 2, 2, 3, 1, 2, 1}));
//
//        System.out.println(binaryTreePaths(node1));
//
//        System.out.println(dominantIndex(new int[]{1, 3, 4, 5}));
//
//        System.out.println(multiplesOf3And5(10));
//
//        System.out.println(binomialCoeff(4, 3));
//
//        System.out.println(binomial(5, 3));
//
//        System.out.println(getMaxProfit(new int[]{10, 7, 5, 8, 11, 9}));
//
//        System.out.println(getProductsOfAllIntsExceptAtIndex(new int[]{5, 7, 3, 4}));
//
//        System.out.println(highestProductOf3(new int[]{1, -7, 3, -4, 5, 10, -10}));
//
//        System.out.println(longestWord(new String[]{"a", "banana", "app", "appl", "apply", "apple", "b", "ban"}));

        TreeNode mainTree = new TreeNode(3);
        mainTree.left = new TreeNode(4);
        mainTree.right = new TreeNode(5);
        mainTree.left.left = new TreeNode(1);
        mainTree.left.right = new TreeNode(2);
        mainTree.left.right.left = new TreeNode(0);

        TreeNode subTree = new TreeNode(4);
        subTree.left = new TreeNode(1);
        subTree.right = new TreeNode(2);

//        System.out.println(isSubtree(mainTree, subTree));
//
//        System.out.println(pivotIndex(new int[]{1, 7, 3, 6, 5, 6}));
//
//        System.out.println(licenseKeyFormatting("5F3Z-2e-9-w1", 2));
//
//        System.out.println(isPerfectSquare(49));
//
//        System.out.println(isBalanced(mainTree));

//        MyQueue myQueue = new MyQueue();
//        myQueue.push(1);
//        myQueue.push(2);
//        myQueue.push(3);
//
//        myQueue.peek();
//
//        myQueue.pop();
//        myQueue.pop();
//
//        Queue<Integer> testQueue = new PriorityQueue<>();

//        System.out.println(twoSum(new int[]{1, 7, 3, 6, 5, 6}, 11));
//
//        System.out.println(repeatedSubstringPattern("abcabcabcabcabca"));
//
//        System.out.println(isRectangleOverlap(new int[]{-2, -2, 0, 0}, new int[]{-3, -3, -1, -1}));

//        TreeNode findMode = new TreeNode(1);
//        findMode.right = new TreeNode(2);
//        findMode.right.left = new TreeNode(2);

//        System.out.println(findMode(findMode));
//
//        System.out.println(trailingZeroes(28));
//
//        System.out.println(countAndSay(9));
//
//        System.out.println(removeDuplicates(new int[]{0, 0, 1, 1, 1, 2, 2, 3, 3, 4}));
//
//        System.out.println(countSegments("Hello, my  name is John"));
//
//        System.out.println(countPrimes(20));
//
//        System.out.println(arrangeCoins(8));
//
//        System.out.println(isPalindrome(43232));
//
//        System.out.println(compress(new char[]{'a', 'a', 'b', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c'}));

        mainTree.right.right = new TreeNode(6);
//        PathSum pathSum = new PathSum();
//        System.out.println(pathSum.hasPathSumIterative(mainTree, 14));

//        TreeNode pathSumII = new TreeNode(5);
//        pathSumII.left = new TreeNode(4);
//        pathSumII.left.left = new TreeNode(11);
//        pathSumII.left.left.left = new TreeNode(7);
//        pathSumII.left.left.right = new TreeNode(2);
//        pathSumII.right = new TreeNode(8);
//        pathSumII.right.left = new TreeNode(13);
//        pathSumII.right.right = new TreeNode(4);
//        pathSumII.right.right.left = new TreeNode(5);
//        pathSumII.right.right.right = new TreeNode(1);
//
//        PathSumII pathSumII1 = new PathSumII();
//        pathSumII1.pathSum(pathSumII, 22);

//        PathSumIII pathSumIII = new PathSumIII();
//        pathSumIII.pathSum(mainTree, 8);

//        PathSumIV pathSumIV = new PathSumIV();
//        pathSumIV.pathSum(new int[]{113, 214, 225, 311, 322, 346});

//        System.out.println(isIsomorphic("title", "paper"));

//        MyStack myStack = new MyStack();
//        myStack.push(1);
//        myStack.push(2);
//        myStack.push(3);
//        System.out.println("my stack pop: " + myStack.pop());
//
//        System.out.println(addBinary("10101", "1110"));
//
//        System.out.println(wordPattern("abba", "dog dog dog dog"));
//
//        System.out.println(isValid("(){}[]({[]})"));
//
//        System.out.println(findAnagrams("abcdecabedabde", "abc"));

//        System.out.println(minWindow("ADEFOQWEBECODEGBANC", "ABC"));

//        System.out.println(lengthOfLongestSubstring("pwwpkewx"));

//        System.out.println(findSubstring("barfoobarfoothefoobarman", new String[]{"foo", "bar", "foo"}));

//        System.out.println(minDepth(mainTree));

//        System.out.println(maxDepth(mainTree));

        ListNode palindrome = new ListNode(1);
        palindrome.next = new ListNode(2);
        palindrome.next.next = new ListNode(3);
        palindrome.next.next.next = new ListNode(4);
        palindrome.next.next.next.next = new ListNode(3);
        palindrome.next.next.next.next.next = new ListNode(2);
        palindrome.next.next.next.next.next.next = new ListNode(1);

//        System.out.println(ap.isPalindrome(palindrome));

//        System.out.println(removeElements(palindrome, 1));

//        System.out.println(containsNearbyDuplicate(new int[]{1, 2, 3, 4, 2, 1}, 3));

        TreeNode univalue = new TreeNode(4);
        univalue.left = new TreeNode(3);
        univalue.left.right = new TreeNode(3);
        univalue.left.right.left = new TreeNode(3);
        univalue.right = new TreeNode(2);
        univalue.right.right = new TreeNode(5);
        univalue.right.right.left = new TreeNode(5);

//        System.out.println(longestUnivaluePath(univalue));

//        NumArray numArray = new NumArray(new int[]{-2, 0, 3, -5, 2, -1});

//        System.out.println(checkPerfectNumber(30));

//        System.out.println(judgeSquareSum(18));

//        mergeSortedArray(new int[]{1, 2, 3, 4, 0, 0, 0}, 4, new int[]{2, 5, 6}, 3);

//        System.out.println(validPalindrome("abcddcbfa"));

//        System.out.println(repeatedStringMatch("abcd", "cdabcdab"));

        ListNode intersection = new ListNode(9);
        intersection.next = new ListNode(10);

        ListNode interOne = new ListNode(1);
        interOne.next = new ListNode(3);
        interOne.next.next = new ListNode(5);
        interOne.next.next.next = intersection;

        ListNode interTwo = new ListNode(2);
        interTwo.next = new ListNode(4);
        interTwo.next.next = new ListNode(6);
        interTwo.next.next.next = new ListNode(8);
//        interTwo.next.next.next.next = intersection;

//        System.out.println(ap.getIntersectionNode(interOne, interTwo));

//        System.out.println(canPlaceFlowers(new int[]{1, 0, 0, 0, 1, 0, 0, 1, 0, 0}, 3));

//        System.out.println(findNthDigit(2040));

//        System.out.println(findRadius(new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, new int[]{1, 7, 8}));

//        System.out.println(reverseBits(29471923));

//        System.out.println(findUnsortedSubarray(new int[]{2, 4, 8, 6, 1, 7, 10}));

//        System.out.println(mySqrt(21));

//        System.out.println(thirdMax(new int[]{1, 3, 3, 5, 5, 9, 6}));

//        System.out.println(convertToTitle(702));

//        System.out.println(largestPalindrome(2));

//        System.out.println(leavesToDoublyLinkedList(mainTree));

//        System.out.println(hammingDistance(14, 19));

//        System.out.println(findTheDifference("abcd", "abced"));

//        System.out.println(maxIndexDiff(new int[]{34, 8, 10, 3, 2, 80, 30, 33, 1}, 9));

//        System.out.println(ap.maxSubArray(new int[]{34, 8, -10, 3, 2, -80, 30, 33, 1}));

//        System.out.println(removeAlternateDuplicate("you got beautiful eyes"));

//        System.out.println(topKFrequent(new String[]{"i", "love", "leetcode", "i", "love", "coding", "i", "love", "coding"}, 2));

        mainTree.left.right.right = new TreeNode(10);
//        System.out.println(printkdistanceNode(mainTree, mainTree.right, 3));

//        ShortestDistanceToACharacter shortestDistanceToACharacter = new ShortestDistanceToACharacter();
//        System.out.println(shortestDistanceToACharacter.shortestToChar("loveleetcode", 'e'));

//        System.out.println(convertToBase7(100));

//        rotate(new int[]{1, 2, 3, 4, 5, 6, 7}, 20);

//        System.out.println(reverse(-123));

//        System.out.println(checkPossibility(new int[]{1, 4, 4, 3, 2, 6, 7}));

//        System.out.println(reverseString("abcdefg"));

//        System.out.println(fizzBuzz(15));

//        System.out.println(singleNumber(new int[]{1, 4, 4, 3, 1, 3, 7}));

//        System.out.println(getSum(10,9));

//        RomanToInt romanToInt = new RomanToInt();
//        System.out.println(romanToInt.romanToInt("MCMXCIV"));

//        IntToRoman intToRoman = new IntToRoman();
//        intToRoman.intToRoman(1998);

//        moveZeroes(new int[]{1, 0, 3, 0, 12, 0, 5});

//        System.out.println(maxProfitTwo(new int[]{7, 1, 5, 3, 6, 4}));

//        System.out.println(isAnagram("ac", "bb"));

//        System.out.println(containsDuplicate(new int[]{1, 2, 3, 1}));

        ListNode reverseList = new ListNode(1);
        reverseList.next = new ListNode(3);
        reverseList.next.next = new ListNode(5);
        reverseList.next.next.next = new ListNode(7);

//        System.out.println(ap.reverseList(reverseList));

//        System.out.println(reverseListRecursive(reverseList));

//        System.out.println(missingNumber(new int[]{6, 4, 3, 2, 1, 0}));

//        System.out.println(sortedArrayToBST(new int[]{-10, -3, 0, 5, 9}));

        ListNode listToBST = new ListNode(-10);
        listToBST.next = new ListNode(-3);
        listToBST.next.next = new ListNode(0);
        listToBST.next.next.next = new ListNode(5);
        listToBST.next.next.next.next = new ListNode(9);

        System.out.println(ap.sortedListToBST(listToBST));

//        System.out.println(isHappy(198));

//        System.out.println(climbStairs(10));

//        System.out.println(isPowerOfThree(80));

//        TreeNode symmetric = new TreeNode(1);
//        symmetric.left = new TreeNode(2);
//        symmetric.right = new TreeNode(2);
//        symmetric.left.left = new TreeNode(3);
//        symmetric.left.right = new TreeNode(4);
////        symmetric.right.left = new TreeNode(4);
//        symmetric.right.right = new TreeNode(3);

//        System.out.println(isSymmetric(symmetric));

//        System.out.println(hammingWeight(27));

//        System.out.println(generate(5));

//        System.out.println(cellCompete(new int[]{1, 1, 1, 0, 1, 1, 1, 1,}, 2));

//        System.out.println(generalizedGCD(5, new int[]{2, 4, 6, 8, 10}));

//        spiralPrint(new int[][]{{1, 2, 3, 4, 5, 6}, {7, 8, 9, 10, 11, 12}, {13, 14, 15, 16, 17, 18}});

//        System.out.println(rowWithMax0(new int[][]{{1, 1, 1, 0}, {1, 1, 0, 0,}, {0, 0, 0, 0,}, {1, 0, 0, 0}}));

//        System.out.println(pythagoreanTriplets(20));

//        System.out.println(lcm(15, 25));

//        System.out.println(lcmOfArraysTwo(new int[]{2, 7, 3, 9, 4}));

//        System.out.println(retrieveMostFrequentlyUsedWords("Jill and Jack and Jill. went to Jack's and Jill's food's", Arrays.asList("and", "to", "Jack")));

//        System.out.println(reorderLines(6, Arrays.asList("g1 act car", "zo4 4 7", "a8 act zoo", "f3 52 54 31", "t2 13 121 98", "a1 13 121 98")));

//        System.out.println(productExceptSelf(new int[]{1, 3, 5, 7, 9}));

//        System.out.println(inorderTraversalIterative(mainTree));

//        System.out.println(trimBST(node1, 2, 10));

//        System.out.println(averageOfLevels(node1));

//        System.out.println(minDiffInBST(node1));

//        System.out.println(generateParenthesis(3));

//        System.out.println(generateParenthesisTwo(3));

//        System.out.println(generateParenthesisBacktrack(3));

//        KnightsTour tour = new KnightsTour(5, 5);
//        tour.tourFrom(0, 0);
//        tour.printGrid();

//        System.out.println(permute(new int[]{1, 2, 3}));

//        System.out.println(permuteUnique(new int[]{1, 2, 2}));

//        System.out.println(subsets(new int[]{1, 2, 3}));

//        System.out.println(subsetsWithDup(new int[]{1, 2, 2}));

//        System.out.println(combinationSum(new int[]{2, 3, 6, 7}, 10));

//        System.out.println(combinationSum2(new int[]{10, 1, 2, 7, 6, 1, 5}, 8));

//        System.out.println(ap.partition("aabcb"));

//        System.out.println(fourSumCount(new int[]{1, 2}, new int[]{-2, -1}, new int[]{-1, 2}, new int[]{0, 2}));

//        System.out.println(fourSum(new int[]{1, 0, -1, 0, -2, 2}, 0));

//        Solution obj = new Solution(new int[]{1, 3, 5});
//        int[] shuffle = obj.shuffle();

//        System.out.println(ap.kthSmallestIter(node1, 3));

        ListNode oddEven = new ListNode(1);
        oddEven.next = new ListNode(2);
        oddEven.next.next = new ListNode(3);
        oddEven.next.next.next = new ListNode(4);
        oddEven.next.next.next.next = new ListNode(5);
        oddEven.next.next.next.next.next = new ListNode(6);
        oddEven.next.next.next.next.next.next = new ListNode(7);

//        System.out.println(ap.oddEvenList(oddEven));

//        System.out.println(ap.kthSmallestBinarySearch(new int[][]{{1, 5, 9}, {10, 11, 13}, {12, 13, 15}}, 8));

//        System.out.println(kSmallestPairs(new int[]{1, 7, 11}, new int[]{2, 4, 6}, 8));

//        System.out.println(ap.findDuplicateBinarySearch(new int[]{1, 3, 4, 2, 2, 5}));

        ListNode withCircle = new ListNode(1);
        withCircle.next = new ListNode(2);
        ListNode circle = new ListNode(3);
        withCircle.next.next = circle;
        circle.next = new ListNode(4);
        circle.next.next = new ListNode(5);
        circle.next.next.next = new ListNode(6);
        circle.next.next.next.next = circle;

//        System.out.println(ap.detectCycle(withCircle));

//        System.out.println(uniquePaths(7, 3));

//        rotate(new int[][]{{1, 2, 3}, {4, 5, 6}, {7, 8, 9}});

//        System.out.println(findKthLargestPq(new int[]{3, 2, 3, 1, 2, 4, 5, 5, 6}, 4));

//        RandomizedSet randomSet = new RandomizedSet();
//        randomSet.insert(1);
//        randomSet.remove(2);
//        randomSet.insert(2);
//        randomSet.getRandom();
//        randomSet.remove(1);

//        System.out.println(increasingTriplet(new int[]{9, 6, 5, 1, 3, 10, 7}));

//        System.out.println(groupAnagrams(new String[]{"eat", "tea", "tan", "ate", "nat", "bat"}));

//        sortColors(new int[]{2, 0, 2, 1, 1, 0, 1, 2, 0});

//        System.out.println(findPeakElement(new int[]{1, 2, 1, 3, 5, 6, 4}));

//        System.out.println(lengthOfLISdp(new int[]{10, 9, 2, 5, 3, 7, 101, 18}));

//        System.out.println(lengthOfLIS(new int[]{10, 9, 2, 5, 3, 7, 101, 18}));

//        System.out.println(isValidSudoku(new char[][]{
//                {'5', '3', '.', '.', '7', '.', '.', '.', '.'},
//                {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
//                {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
//                {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
//                {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
//                {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
//                {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
//                {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
//                {'.', '.', '.', '.', '8', '.', '.', '7', '9'}
//        }));

//        System.out.println(numSquares(13));

//        gameOfLife(new int[][]{
//                {1, 0, 0, 1, 0, 1, 0},
//                {1, 1, 0, 0, 0, 0, 1},
//                {0, 0, 1, 1, 0, 1, 0}
//        });

//        System.out.println(zigzagLevelOrder(mainTree));

//        System.out.println(maxArea(new int[]{9, 10, 8, 7, 3, 5, 6}));

//        System.out.println(numIslands(new char[][]{
//                {'1', '1', '0', '0', '0'},
//                {'1', '1', '0', '0', '0'},
//                {'0', '0', '1', '0', '0'},
//                {'0', '0', '0', '1', '1'}
//        }));

//        System.out.println(letterCombinations("23"));

//        setZeroes(new int[][]{
//                {1, 1, 1},
//                {1, 0, 1},
//                {1, 1, 1}
//        });

        TreeLinkNode treeLinkNode1 = new TreeLinkNode(1);
        treeLinkNode1.left = new TreeLinkNode(2);
        treeLinkNode1.right = new TreeLinkNode(3);
        treeLinkNode1.left.left = new TreeLinkNode(4);
        treeLinkNode1.left.right = new TreeLinkNode(5);
        treeLinkNode1.right.left = new TreeLinkNode(6);
        treeLinkNode1.right.right = new TreeLinkNode(7);

//        connect(treeLinkNode1);

//        System.out.println(longestSubstring("ababdbbcababab", 2));

//        ConstructBinaryTreefromPreorderandInorderTraversal constructBinaryTreefromPreorderandInorderTraversal = new ConstructBinaryTreefromPreorderandInorderTraversal();
//        System.out.println(constructBinaryTreefromPreorderandInorderTraversal.buildTreeTwo(new int[]{3, 9, 20, 15, 7}, new int[]{9, 3, 15, 20, 7}));

        ListNode listNodeRemoveFromEnd = new ListNode(1);
        listNodeRemoveFromEnd.next = new ListNode(2);
        listNodeRemoveFromEnd.next.next = new ListNode(3);
        listNodeRemoveFromEnd.next.next.next = new ListNode(4);
        listNodeRemoveFromEnd.next.next.next.next = new ListNode(5);
        listNodeRemoveFromEnd.next.next.next.next.next = new ListNode(6);

//        System.out.println(ap.removeNthFromEnd(listNodeRemoveFromEnd, 3));

        List<Interval> intervalList = new ArrayList<>();
        intervalList.addAll(Arrays.asList(new Interval(10, 18), new Interval(1, 3), new Interval(2, 6),
                new Interval(8, 15)));

//        System.out.println(merge(intervalList));

//        System.out.println(search(new int[]{4, 5, 6, 7, 0, 1, 2}, 0));

//        System.out.println(wordBreak("applepenapple", Arrays.asList("apple", "pen")));

//        System.out.println(searchRange(new int[]{5, 7, 7, 8, 8, 10}, 8));

//        TrieLeetCode trieLeetCode = new TrieLeetCode();
//        trieLeetCode.insert("apple");
//        trieLeetCode.search("apple");   // returns true
//        trieLeetCode.search("app");     // returns false
//        trieLeetCode.startsWith("app"); // returns true
//        trieLeetCode.insert("app");
//        trieLeetCode.search("app");

//        System.out.println(calculate(" 3+5 / 2 "));
        ListNode mergeSortList = new ListNode(-1);
        mergeSortList.next = new ListNode(5);
        mergeSortList.next.next = new ListNode(3);
        mergeSortList.next.next.next = new ListNode(4);
        mergeSortList.next.next.next.next = new ListNode(0);

//        System.out.println(ap.sortList(mergeSortList));

//        System.out.println(ap.insertionSortList(mergeSortList));

//        System.out.println(ap.canCompleteCircuit(new int[]{1, 2, 3, 4, 5}, new int[]{3, 4, 5, 5, 6}));

//        System.out.println(ap.lowestCommonAncestor236(mainTree, mainTree.left.right, mainTree.left));

//        System.out.println(ap.canJump(new int[]{3, 2, 1, 0, 4}));

        ListNode addTwoNumbers1 = new ListNode(2);
        addTwoNumbers1.next = new ListNode(4);
        addTwoNumbers1.next.next = new ListNode(3);
        ListNode addTwoNumbers2 = new ListNode(5);
        addTwoNumbers2.next = new ListNode(6);
        addTwoNumbers2.next.next = new ListNode(4);
//        System.out.println(ap.addTwoNumbersTwo(addTwoNumbers1, addTwoNumbers2));

//        System.out.println(ap.evalRPN(new String[]{"10", "6", "9", "3", "+", "-11", "*", "/", "*", "17", "+", "5", "+"}));

//        System.out.println(ap.exist(new char[][]{
//                {'A', 'B', 'C', 'E'},
//                {'S', 'F', 'C', 'S'},
//                {'A', 'D', 'E', 'E'}
//        }, "ABCCED"));

//        ap.spiralOrder(new int[][]{{1, 2, 3, 4, 5, 6}, {7, 8, 9, 10, 11, 12}, {13, 14, 15, 16, 17, 18}});

//        ap.generateMatrix(2);

//        System.out.println(ap.maxProduct(new int[]{2, 3, 0, -2, 4, -3}));

//        System.out.println(ap.coinChange(new int[]{1, 2, 5}, 11));

//        Codec codec = new Codec();
//        codec.decode(codec.encode("www.google.com"));

//        System.out.println(ap.rightSideViewIter(mainTree));

//        System.out.println(ap.grayCode(3));

        RandomListNode randomListNode1 = new RandomListNode(1);
        RandomListNode randomListNode2 = new RandomListNode(2);
        RandomListNode randomListNode3 = new RandomListNode(3);
        RandomListNode randomListNode4 = new RandomListNode(4);
        randomListNode1.next = randomListNode2;
        randomListNode1.random = randomListNode3;
        randomListNode2.next = randomListNode3;
        randomListNode2.random = randomListNode4;
        randomListNode3.next = randomListNode4;

//        System.out.println(ap.copyRandomList(randomListNode1));

//        ListNode example = new ListNode(1);
//        example.next = new ListNode(2);
//        example.next.next = new ListNode(3);
//        example.next.next.next = new ListNode(4);
//        example.next.next.next.next = new ListNode(5);
//        example.next.next.next.next.next = new ListNode(6);
//
//        ListNode cur = example;
//        ListNode pre = example;
//
//        pre.next = pre.next.next;
//
//        cur.next = cur.next.next;
//
//        cur = cur.next;
//
//        System.out.println(example);

//        System.out.println(ap.longestPalindromeExpand("abcefgfeddefg"));

//        System.out.println(ap.threeSum(new int[]{-1, 0, 1, 2, -1, -4, 3}));

//        System.out.println(ap.ladderLengthTwoPointer("hit", "cog", Arrays.asList("hot", "dot", "dog", "lot", "log", "cog")));

//        System.out.println(ap.myAtoi("    -42"));

//        Node nodeA = new Node("A");
//        Node nodeB = new Node("B");
//        Node nodeC = new Node("C");
//        Node nodeD = new Node("D");
//        Node nodeE = new Node("E");
//        Node nodeF = new Node("F");
//
//        nodeA.addDestination(nodeB, 10);
//        nodeA.addDestination(nodeC, 15);
//
//        nodeB.addDestination(nodeD, 12);
//        nodeB.addDestination(nodeF, 15);
//
//        nodeC.addDestination(nodeE, 10);
//
//        nodeD.addDestination(nodeE, 2);
//        nodeD.addDestination(nodeF, 1);
//
//        nodeF.addDestination(nodeE, 5);
//
//        Graph graph = new Graph();
//
//        graph.addNode(nodeA);
//        graph.addNode(nodeB);
//        graph.addNode(nodeC);
//        graph.addNode(nodeD);
//        graph.addNode(nodeE);
//        graph.addNode(nodeF);
//
//        graph = DijkstraExample.calculateShortestPathFromSource(graph, nodeA);

//        System.out.println(ap.trap(new int[]{0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1}));

//        SerializeDeserializeBinaryTree serializeDeserializeBinaryTree = new SerializeDeserializeBinaryTree();
//        serializeDeserializeBinaryTree.deserialize(serializeDeserializeBinaryTree.serialize(mainTree));

//        System.out.println(ap.maxSlidingWindowPq(new int[]{1, 3, -1, -3, 5, 3, 6, 7}, 3));

        ListNode mergeKListsOne = new ListNode(1);
        mergeKListsOne.next = new ListNode(4);
        mergeKListsOne.next.next = new ListNode(5);

        ListNode mergeKListsTwo = new ListNode(1);
        mergeKListsTwo.next = new ListNode(3);
        mergeKListsTwo.next.next = new ListNode(4);

        ListNode mergeKListsThree = new ListNode(2);
        mergeKListsThree.next = new ListNode(6);

//        System.out.println(ap.mergeKLists(new ListNode[]{mergeKListsOne, mergeKListsTwo, mergeKListsThree}));

//        Map<Integer, String> map = new LinkedHashMap<>(16, .75f, true);
//        map.put(1, null);
//        map.put(2, null);
//        map.put(3, null);
//        map.put(4, null);
//        map.put(5, null);
//        Set<Integer> keys = map.keySet();
//        System.out.println(keys.toString());
//        map.get(4);
//        System.out.println(keys.toString());
//        map.get(3);
//        System.out.println(keys.toString());

//        LRUCache cache = new LRUCache(2);
//        cache.put(1, 1);
//        cache.put(2, 2);
//        cache.get(1);       // returns 1
//        cache.put(3, 3);    // evicts key 2
//        cache.get(2);       // returns -1 (not found)
//        cache.put(4, 4);    // evicts key 1
//        cache.get(1);       // returns -1 (not found)
//        cache.get(3);       // returns 3
//        cache.get(4);

//        System.out.println(ap.findLaddersBiDirection("hit", "cog", Arrays.asList("hot", "dot", "dog", "lot", "log", "cog")));

//        BreadthFirstSearchExampleNeighbourList.BfsNode node40 = new BreadthFirstSearchExampleNeighbourList.BfsNode(40);
//        BreadthFirstSearchExampleNeighbourList.BfsNode node10 = new BreadthFirstSearchExampleNeighbourList.BfsNode(10);
//        BreadthFirstSearchExampleNeighbourList.BfsNode node20 = new BreadthFirstSearchExampleNeighbourList.BfsNode(20);
//        BreadthFirstSearchExampleNeighbourList.BfsNode node30 = new BreadthFirstSearchExampleNeighbourList.BfsNode(30);
//        BreadthFirstSearchExampleNeighbourList.BfsNode node60 = new BreadthFirstSearchExampleNeighbourList.BfsNode(60);
//        BreadthFirstSearchExampleNeighbourList.BfsNode node50 = new BreadthFirstSearchExampleNeighbourList.BfsNode(50);
//        BreadthFirstSearchExampleNeighbourList.BfsNode node70 = new BreadthFirstSearchExampleNeighbourList.BfsNode(70);
//        node40.addNeighbours(node10);
//        node40.addNeighbours(node20);
//        node10.addNeighbours(node30);
//        node20.addNeighbours(node10);
//        node20.addNeighbours(node30);
//        node20.addNeighbours(node60);
//        node20.addNeighbours(node50);
//        node30.addNeighbours(node60);
//        node60.addNeighbours(node70);
//        node50.addNeighbours(node70);
//        BreadthFirstSearchExampleNeighbourList breadthFirstSearchExampleNeighbourList = new BreadthFirstSearchExampleNeighbourList();
//        breadthFirstSearchExampleNeighbourList.bfs(node40);

//        System.out.println(ap.minMutationBiDirection("AACCGGTT", "ACACCGTA", new String[]{"AACCGGTA", "AACCGCTA", "AAACGGTA", "AAACCGTA", "ACACCGTA"}));

//        LFUCacheLHM lfuCacheLHM = new LFUCacheLHM(3);
//        lfuCacheLHM.put(1, 1);
//        lfuCacheLHM.put(2, 2);
//        lfuCacheLHM.put(3, 3);
//        lfuCacheLHM.get(1);
//        lfuCacheLHM.get(2);
//        lfuCacheLHM.get(3);
//        lfuCacheLHM.put(4, 4);
//        lfuCacheLHM.get(1);
//        lfuCacheLHM.get(3);
//        lfuCacheLHM.get(4);

//        LFUCache lfuCache = new LFUCache(3);
//        lfuCache.put(1, 1);
//        lfuCache.put(2, 2);
//        lfuCache.put(3, 3);
//        lfuCache.get(1);
//        lfuCache.get(2);
//        lfuCache.get(3);
//        lfuCache.put(4, 4);
//        lfuCache.get(1);
//        lfuCache.get(3);
//        lfuCache.get(4);

//        System.out.println(ap.levelOrderBottomDfs(mainTree));

//        System.out.println(ap.largestValuesDfs(mainTree));

//        System.out.println(ap.canFinish(4, new int[][]{{1, 0}, {2, 1}, {3, 2}}));

//        ap.solve(new char[][]{{'X', 'X', 'X', 'X'}, {'X', 'O', 'O', 'X'}, {'X', 'X', 'O', 'X'}, {'X', 'X', 'O', 'X'}});

//        ZeroOneMatrix zeroOneMatrix = new ZeroOneMatrix();
//        zeroOneMatrix.updateMatrixDp(new int[][]{{0, 0, 0}, {0, 1, 0}, {1, 1, 1}});

//        RemoveInvalidParentheses removeInvalidParentheses = new RemoveInvalidParentheses();
//        removeInvalidParentheses.removeInvalidParenthesesDfs("(a)(()()");

//        System.out.println(ap.pacificAtlanticBfs(new int[][]{{1, 2, 2, 3, 5}, {3, 2, 3, 4, 4}, {2, 4, 5, 3, 1}, {6, 7, 1, 4, 5}, {5, 1, 1, 2, 4}}));

//        TrappingRainWaterII trappingRainWaterII = new TrappingRainWaterII();
//        System.out.println(trappingRainWaterII.trapRainWater(new int[][]{{1, 4, 3, 1, 3, 2}, {3, 2, 1, 3, 2, 4}, {2, 3, 3, 2, 3, 1}}));

//        ap.wallsAndGatesMultiEndBfs(new int[][]{
//                {Integer.MAX_VALUE, -1, 0, Integer.MAX_VALUE},
//                {Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, -1},
//                {Integer.MAX_VALUE, -1, Integer.MAX_VALUE, -1},
//                {0, -1, Integer.MAX_VALUE, Integer.MAX_VALUE}});

//        ShortestDistanceFromAllBuildings shortestDistanceFromAllBuildings = new ShortestDistanceFromAllBuildings();
//        System.out.println(shortestDistanceFromAllBuildings.shortestDistance(new int[][]{{1, 0, 2, 0, 1}, {0, 0, 0, 0, 0}, {0, 0, 1, 0, 0}}));

//        MinimumHeightTrees minimumHeightTrees = new MinimumHeightTrees();
//        System.out.println(minimumHeightTrees.findMinHeightTrees(7, new int[][]{{0, 3}, {1, 3}, {2, 3}, {4, 3}, {5, 4}, {6, 5}}));

//        CheapestFlightsWithinKStops cheapestFlightsWithinKStops = new CheapestFlightsWithinKStops();
//        System.out.println(cheapestFlightsWithinKStops.findCheapestPriceTwo(3, new int[][]{{0, 1, 100}, {1, 2, 100}, {0, 2, 500}}, 0, 2, 1));

//        NetworkDelyTime networkDelyTime = new NetworkDelyTime();
//        System.out.println(networkDelyTime.networkDelayTime(new int[][]{{2, 3, 5}, {2, 4, 5}, {3, 6, 3}, {3, 7, 4}, {4, 8, 10}}, 6, 2));

//        PartitionLabels partitionLabels = new PartitionLabels();
//        System.out.println(partitionLabels.partitionLabels("ababcbacadefegdehijhklij"));

//        PalindromePartitioningII palindromePartitioningII = new PalindromePartitioningII();
//        System.out.println(palindromePartitioningII.minCutDp("aabcbcbdd"));

//        System.out.println(ap.boundaryOfBinaryTree(mainTree));

//        CutOffTreesForGolfEvent cutOffTreesForGolfEvent = new CutOffTreesForGolfEvent();
//        System.out.println(cutOffTreesForGolfEvent.cutOffTree(Arrays.asList(Arrays.asList(1, 2, 0), Arrays.asList(0, 0, 4), Arrays.asList(7, 6, 5))));

//        ValidateBinarySearchTree validateBinarySearchTree = new ValidateBinarySearchTree();
//        System.out.println(validateBinarySearchTree.isValidBST(node1));

//        SerializeDeserializeBinarySearchTree serializeDeserializeBinarySearchTree = new SerializeDeserializeBinarySearchTree();
//        serializeDeserializeBinarySearchTree.deserialize(serializeDeserializeBinarySearchTree.serialize(node1));

//        ConstructBinaryTreefromInorderandPostorderTraversal constructBinaryTreefromInorderandPostorderTraversal = new ConstructBinaryTreefromInorderandPostorderTraversal();
//        System.out.println(constructBinaryTreefromInorderandPostorderTraversal.buildTree(new int[]{1, 2, 3, 5, 6, 7, 9}, new int[]{1, 3, 2, 6, 9, 7, 5}));

//        System.out.println(ap.findMedianSortedArrays(new int[]{8, 9, 10, 20}, new int[]{1, 3, 5, 7, 9, 11, 13}));

//        System.out.println(ap.findMinTwo(new int[]{3, 3, 3, 4, 5, 5, 1, 2, 3}));

//        System.out.println(ap.threeSumClosest(new int[]{-1, 2, 1, -4, 7}, 1));

//        System.out.println(ap.majorityElementMoore(new int[]{2, 2, 1, 1, 3, 2, 2}));

//        System.out.println(ap.majorityElementTwo(new int[]{1, 3, 1, 3, 3, 2, 2, 2}));

//        System.out.println(ap.summaryRanges(new int[]{0, 2, 3, 4, 6, 8, 9}));

//        ap.nextPermutation(new int[]{6, 5, 4, 8, 7, 5, 1});

//        System.out.println(ap.minimumTotal(Arrays.asList(Arrays.asList(2), Arrays.asList(3, 4), Arrays.asList(6, 5, 7), Arrays.asList(4, 1, 8, 3))));

//        System.out.println(ap.minPathSum(new int[][]{{1, 3, 1, 2}, {1, 5, 5, 2}, {4, 2, 1, 3}}));

//        System.out.println(ap.leastInterval(new char[]{'A', 'A', 'A', 'B', 'B', 'B', 'C', 'C', 'D'}, 3));

        ListNode removeDups = new ListNode(1);
        removeDups.next = new ListNode(3);
        removeDups.next.next = new ListNode(5);
        removeDups.next.next.next = new ListNode(5);
        removeDups.next.next.next.next = new ListNode(4);

//        ap.removeDups(removeDups);

        ListNode partition = new ListNode(6);
        partition.next = new ListNode(5);
        partition.next.next = new ListNode(8);
        partition.next.next.next = new ListNode(4);
        partition.next.next.next.next = new ListNode(10);
        partition.next.next.next.next.next = new ListNode(2);
        partition.next.next.next.next.next.next = new ListNode(1);

//        System.out.println(ap.partitionLC(partition, 3));
//        System.out.println(ap.swapPairs(listNodeRemoveFromEnd));
//        ap.reorderList(listNodeRemoveFromEnd);

        ListNode removeDupsTwo = new ListNode(1);
        removeDupsTwo.next = new ListNode(1);
        removeDupsTwo.next.next = new ListNode(1);
        removeDupsTwo.next.next.next = new ListNode(2);
        removeDupsTwo.next.next.next.next = new ListNode(3);
        removeDupsTwo.next.next.next.next.next = new ListNode(3);
        removeDupsTwo.next.next.next.next.next.next = new ListNode(4);
        removeDupsTwo.next.next.next.next.next.next.next = new ListNode(5);

//        System.out.println(ap.deleteDuplicatesTwo(removeDupsTwo));

        ListNode removeDupsUnsorted = new ListNode(1);
        removeDupsUnsorted.next = new ListNode(2);
        removeDupsUnsorted.next.next = new ListNode(5);
        removeDupsUnsorted.next.next.next = new ListNode(4);
        removeDupsUnsorted.next.next.next.next = new ListNode(2);
        removeDupsUnsorted.next.next.next.next.next = new ListNode(1);
        removeDupsUnsorted.next.next.next.next.next.next = new ListNode(3);

//        System.out.println(ap.deleteDuplicatesUnsorted(removeDupsUnsorted));

//        ReverseLinkedListII reverseLinkedListII = new ReverseLinkedListII();
//        System.out.println(reverseLinkedListII.reverseBetween(removeDupsUnsorted, 1, 2));

//        RotateList rotateList = new RotateList();
//        System.out.println(rotateList.rotateRight(listNodeRemoveFromEnd, 8));

//        SplitLinkedListInParts splitLinkedListInParts = new SplitLinkedListInParts();
//        listNodeRemoveFromEnd.next.next.next.next.next.next = new ListNode(8);
//        splitLinkedListInParts.splitListToParts(listNodeRemoveFromEnd, 3);

//        KillProcess killProcess = new KillProcess();
//        killProcess.killProcess(Arrays.asList(1, 3, 10, 5), Arrays.asList(3, 0, 5, 3), 3);

//        MaxSumOfRectangleNoLargerThanK maxSumOfRectangleNoLargerThanK = new MaxSumOfRectangleNoLargerThanK();
//        maxSumOfRectangleNoLargerThanK.maxSumSubmatrixTreeSet(new int[][]{{1, 0, 1}, {0, -2, 3}}, 2);

//        DailyTemperatures dailyTemperatures = new DailyTemperatures();
//        dailyTemperatures.dailyTemperatures(new int[]{73, 74, 75, 71, 69, 72, 76, 73});

//        NextGreaterElementI nextGreaterElementI = new NextGreaterElementI();
//        nextGreaterElementI.nextGreaterElement(new int[]{4, 1, 2, 7}, new int[]{1, 4, 3, 2, 5, 6});

//        NextGreaterElementII nextGreaterElementII = new NextGreaterElementII();
//        nextGreaterElementII.nextGreaterElements(new int[]{1, 4, 3, 6, 5, 2});

//        DecodeString decodeString = new DecodeString();
//        decodeString.decodeString("3[a2[c]]");

//        BinaryTreePreorderTraversal binaryTreePreorderTraversal = new BinaryTreePreorderTraversal();
//        binaryTreePreorderTraversal.preorderTraversalTwo(node1);

//        BinaryTreeInorderTraversal binaryTreeInorderTraversal = new BinaryTreeInorderTraversal();
//        binaryTreeInorderTraversal.inorderTraversalTwo(node1);

//        VerifyPreorderSequenceinBinarySearchTree verifyPreorderSequenceinBinarySearchTree = new VerifyPreorderSequenceinBinarySearchTree();
//        verifyPreorderSequenceinBinarySearchTree.verifyPreorderTwo(new int[]{10, 6, 2, 9, 11, 12, 15});

//        SimplifyPath simplifyPath = new SimplifyPath();
//        simplifyPath.simplifyPath("/a/./b/../../c/");

//        VerifyPreorderSequenceinBinaryTree verifyPreorderSequenceinBinaryTree = new VerifyPreorderSequenceinBinaryTree();
//        verifyPreorderSequenceinBinaryTree.isValidSerialization("9,3,4,#,#,1,#,#,2,#,6,#,#");

//        TernaryExpressionParser ternaryExpressionParser = new TernaryExpressionParser();
//        ternaryExpressionParser.parseTernary("F?1:T?4:5");

//        OneThreeTwoPattern oneThreeTwoPattern = new OneThreeTwoPattern();
//        oneThreeTwoPattern.find132pattern(new int[]{3, 1, 4, 2});

//        RemoveKDigits removeKDigits = new RemoveKDigits();
//        removeKDigits.removeKdigits("10200", 1);

//        LargestRectangleInHistogram largestRectangleInHistogram = new LargestRectangleInHistogram();
//        largestRectangleInHistogram.largestRectangleArea(new int[]{6, 2, 5, 4, 5, 1, 6});

//        MaximalRectangle maximalRectangle = new MaximalRectangle();
//        maximalRectangle.maximalRectangle(new char[][]{
//                {'1', '0', '1', '0', '0'},
//                {'1', '0', '1', '1', '1'},
//                {'1', '1', '1', '1', '1'},
//                {'1', '0', '0', '1', '0'}});

//        MaximalSquare maximalSquare = new MaximalSquare();
//        maximalSquare.maximalSquare(new char[][]{
//                {'1', '0', '1', '0', '0'},
//                {'1', '0', '1', '1', '1'},
//                {'1', '1', '1', '1', '1'},
//                {'1', '0', '0', '1', '1'}});

//        LargestPlusSign largestPlusSign = new LargestPlusSign();
//        largestPlusSign.orderOfLargestPlusSignTwo(5, new int[][]{{4, 2}, {2, 4}});

//        MaximizeDistanceToClosestPerson maximizeDistanceToClosestPerson = new MaximizeDistanceToClosestPerson();
//        maximizeDistanceToClosestPerson.maxDistToClosest(new int[]{1, 0, 0, 0});

//        BoldWordsInString boldWordsInString = new BoldWordsInString();
//        boldWordsInString.boldWords(new String[]{"ab", "bc"}, "aabcd");

//        SentenceSimilarityII sentenceSimilarityII = new SentenceSimilarityII();
//        sentenceSimilarityII.areSentencesSimilarTwo(new String[]{"great", "acting", "skills"},
//                new String[]{"cool", "drama", "talent"},
//                new String[][]{{"great", "good"}, {"fine", "good"}, {"good", "cool"}, {"acting", "drama"}, {"skills", "talent"}});

//        SentenceSimilarityI sentenceSimilarityI = new SentenceSimilarityI();
//        sentenceSimilarityI.areSentencesSimilar(new String[]{"great", "acting", "skills"},
//                new String[]{"fine", "drama", "talent"},
//                new String[][]{{"great", "good"}, {"fine", "good"}, {"acting", "drama"}, {"skills", "talent"}});

//        FlipGameII flipGameII = new FlipGameII();
//        System.out.println(flipGameII.canWin("++++"));

//        ShortestWordDistanceII shortestWordDistanceII = new ShortestWordDistanceII(new String[]{"practice", "makes", "perfect", "coding", "makes"});
//        shortestWordDistanceII.shortest("makes", "coding");

//        ShortestWordDistanceIII shortestWordDistanceIII = new ShortestWordDistanceIII();
//        shortestWordDistanceIII.shortestWordDistance(new String[]{"practice", "makes", "perfect", "coding", "makes"}, "makes", "makes");

//        InvertBinaryTree invertBinaryTree = new InvertBinaryTree();
//        invertBinaryTree.invertTreeStack(node1);

//        MergeTwoBinaryTrees mergeTwoBinaryTrees = new MergeTwoBinaryTrees();
//        mergeTwoBinaryTrees.mergeTreesDfs(node1, mainTree);

//        UniqueBinarySearchTreesII uniqueBinarySearchTreesII = new UniqueBinarySearchTreesII();
//        uniqueBinarySearchTreesII.generateTrees(3);

//        BalanceBinaryTree balanceBinaryTree = new BalanceBinaryTree();
//        balanceBinaryTree.isBalanced(node1);

//        LowestCommonAncestorOfABinaryTree lowestCommonAncestorOfABinaryTree = new LowestCommonAncestorOfABinaryTree();
//        lowestCommonAncestorOfABinaryTree.lowestCommonAncestorIterative(node1, node1.left, node1.right.right);

//        MaximumBinaryTree maximumBinaryTree = new MaximumBinaryTree();
//        maximumBinaryTree.constructMaximumBinaryTreeIterative(new int[]{3, 2, 1, 6, 0, 5});

        TreeNode completeNode = new TreeNode(10);
        completeNode.left = new TreeNode(6);
        completeNode.right = new TreeNode(12);
        completeNode.left.left = new TreeNode(2);
        completeNode.left.right = new TreeNode(9);

//        CountCompleteTreeNodes countCompleteTreeNodes = new CountCompleteTreeNodes();
//        countCompleteTreeNodes.countNodes(completeNode);

//        CountPrimes countPrimes = new CountPrimes();
//        countPrimes.countPrimes(8);
//        countPrimes.getAllPrime(50);

//        FlattenBinaryTreeToLinkedList flattenBinaryTreeToLinkedList = new FlattenBinaryTreeToLinkedList();
//        flattenBinaryTreeToLinkedList.flattenIterative(node1);

        TreeNode rob3 = new TreeNode(2);
        rob3.left = new TreeNode(1);
        rob3.left.left = new TreeNode(3);
        rob3.left.left.left = new TreeNode(4);

//        HouseRobberIII houseRobberIII = new HouseRobberIII();
//        houseRobberIII.rob(rob3);

//        HouseRobber houseRobber = new HouseRobber();
//        houseRobber.rob(new int[]{2, 7, 9, 3, 1, 20});

        TreeNode uniValue = new TreeNode(5);
        uniValue.left = new TreeNode(1);
        uniValue.left.left = new TreeNode(5);
        uniValue.left.right = new TreeNode(5);
        uniValue.right = new TreeNode(5);
        uniValue.right.right = new TreeNode(5);

//        CountUnivalueSubtrees countUnivalueSubtrees = new CountUnivalueSubtrees();
//        countUnivalueSubtrees.countUnivalSubtrees(uniValue);

        TreeLinkNode populating2 = new TreeLinkNode(1);
        populating2.left = new TreeLinkNode(2);
        populating2.right = new TreeLinkNode(3);
        populating2.left.left = new TreeLinkNode(4);
        populating2.left.right = new TreeLinkNode(5);
        populating2.right.right = new TreeLinkNode(7);

//        PopulatingNextRightPointersInEachNodeII populatingNextRightPointersInEachNodeII = new PopulatingNextRightPointersInEachNodeII();
//        populatingNextRightPointersInEachNodeII.connect(populating2);

//        InorderSuccessorInBST inorderSuccessorInBST = new InorderSuccessorInBST();
//        inorderSuccessorInBST.inorderSuccessor(node1, node1.right);

        TreeNode upsideDown = new TreeNode(1);
        upsideDown.left = new TreeNode(2);
        upsideDown.left.left = new TreeNode(4);
        upsideDown.left.right = new TreeNode(5);
        upsideDown.right = new TreeNode(3);

//        BinaryTreeUpsideDown binaryTreeUpsideDown = new BinaryTreeUpsideDown();
//        binaryTreeUpsideDown.upsideDownBinaryTree(upsideDown);

//        PrintBinaryTree printBinaryTree = new PrintBinaryTree();
//        printBinaryTree.printTree(node1);

//        SumRootToLeafNumbers sumRootToLeafNumbers = new SumRootToLeafNumbers();
//        sumRootToLeafNumbers.sumNumbersIterative(node1);

//        DeleteNodeInBST deleteNodeInBST = new DeleteNodeInBST();
//        deleteNodeInBST.deleteNode(node1, 6);

//        FindDuplicateSubtrees findDuplicateSubtrees = new FindDuplicateSubtrees();
//        findDuplicateSubtrees.findDuplicateSubtrees(uniValue);

//        ClosestBinarySearchTreeValue closestBinarySearchTreeValue = new ClosestBinarySearchTreeValue();
//        closestBinarySearchTreeValue.closestValue(node1, 8.8);

//        FindLeavesOfBinaryTree findLeavesOfBinaryTree = new FindLeavesOfBinaryTree();
//        findLeavesOfBinaryTree.findLeaves(mainTree);

//        ClosestBinarySearchTreeValueII closestBinarySearchTreeValueII = new ClosestBinarySearchTreeValueII();
//        closestBinarySearchTreeValueII.closestKValuesTwoIterative(node1, 9.5, 2);

//        ZigZagConversion zigZagConversion = new ZigZagConversion();
//        zigZagConversion.convert("PAYPALISHIRING", 4);

//        ValidParenthesisString validParenthesisString = new ValidParenthesisString();
//        validParenthesisString.checkValidStringTwo("()(*))");

//        ReversePairsLC reversePairsLC = new ReversePairsLC();
//        reversePairsLC.reversePairs(new int[]{2, 4, 1, 3, 5});

//        ReversePairs reversePairs = new ReversePairs();
//        reversePairs.reversePairs(new int[]{2, 4, 3, 5, 1});

        CountOfSmallerNumbersAfterSelf countOfSmallerNumbersAfterSelf = new CountOfSmallerNumbersAfterSelf();
        countOfSmallerNumbersAfterSelf.countSmaller(new int[]{5, 2, 6, 1});
    }

}
